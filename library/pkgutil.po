# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Shengjing Zhu <zsj950618@gmail.com>, 2018
# laazy <laaazy@sjtu.edu.cn>, 2020
# Freesand Leo <yuqinju@163.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 05:02+0000\n"
"PO-Revision-Date: 2017-02-16 23:22+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2022\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pkgutil.rst:2
msgid ":mod:`pkgutil` --- Package extension utility"
msgstr ":mod:`pkgutil` --- 包扩展工具"

#: ../../library/pkgutil.rst:7
msgid "**Source code:** :source:`Lib/pkgutil.py`"
msgstr "**源代码:** :source:`Lib/pkgutil.py`"

#: ../../library/pkgutil.rst:11
msgid ""
"This module provides utilities for the import system, in particular package "
"support."
msgstr "该模块为导入系统提供了工具，尤其是在包支持方面。"

#: ../../library/pkgutil.rst:16
msgid "A namedtuple that holds a brief summary of a module's info."
msgstr "一个包含模块信息的简短摘要的命名元组。"

#: ../../library/pkgutil.rst:22
msgid ""
"Extend the search path for the modules which comprise a package.  Intended "
"use is to place the following code in a package's :file:`__init__.py`::"
msgstr "扩展组成包的模块的搜索路径。 预期用途是将以下代码放到包的 :file:`__init__.py` 中::"

#: ../../library/pkgutil.rst:28
msgid ""
"This will add to the package's ``__path__`` all subdirectories of "
"directories on ``sys.path`` named after the package.  This is useful if one "
"wants to distribute different parts of a single logical package as multiple "
"directories."
msgstr ""

#: ../../library/pkgutil.rst:33
msgid ""
"It also looks for :file:`\\*.pkg` files beginning where ``*`` matches the "
"*name* argument.  This feature is similar to :file:`\\*.pth` files (see the "
":mod:`site` module for more information), except that it doesn't special-"
"case lines starting with ``import``.  A :file:`\\*.pkg` file is trusted at "
"face value: apart from checking for duplicates, all entries found in a "
":file:`\\*.pkg` file are added to the path, regardless of whether they exist"
" on the filesystem.  (This is a feature.)"
msgstr ""
"它还会查找开头部分 ``*`` 与 *name* 参数相匹配的 :file:`\\*.pkg` 文件。 此特性与 :file:`\\*.pth` "
"文件类似（请参阅 :mod:`site` 模块了解更多信息），区别在于它不会对以 ``import`` 开头的行做特别对待。 将按外在值对 "
":file:`\\*.pkg` 文件添加信任：除了检查重复项，，所有在 :file:`\\*.pkg` "
"文件中找到的条目都会被添加到路径中，不管它们是否存在于文件系统中。 （这是特性而非缺陷。）"

#: ../../library/pkgutil.rst:41
msgid ""
"If the input path is not a list (as is the case for frozen packages) it is "
"returned unchanged.  The input path is not modified; an extended copy is "
"returned.  Items are only appended to the copy at the end."
msgstr "如果输入路径不是一个列表（已冻结包就是这种情况）则它将被原样返回。 输入路径不会被修改；将返回一个扩展的副本。 条目将被添加到副本的末尾。"

#: ../../library/pkgutil.rst:45
msgid ""
"It is assumed that :data:`sys.path` is a sequence.  Items of "
":data:`sys.path` that are not strings referring to existing directories are "
"ignored. Unicode items on :data:`sys.path` that cause errors when used as "
"filenames may cause this function to raise an exception (in line with "
":func:`os.path.isdir` behavior)."
msgstr ""
":data:`sys.path` 会被假定为一个序列。 :data:`sys.path` 中的条目如果不是指向现有目录的字符串则会被忽略。 "
":data:`sys.path` 上当用作文件名时会导致错误的 Unicode 条目可以会使得此函数引发异常（与 "
":func:`os.path.isdir` 的行为一致）。"

#: ../../library/pkgutil.rst:54
msgid ":pep:`302` Finder that wraps Python's \"classic\" import algorithm."
msgstr "包装了 Python 的 \"经典\" 导入算法的 :pep:`302` 查找器"

#: ../../library/pkgutil.rst:56
msgid ""
"If *dirname* is a string, a :pep:`302` finder is created that searches that "
"directory.  If *dirname* is ``None``, a :pep:`302` finder is created that "
"searches the current :data:`sys.path`, plus any modules that are frozen or "
"built-in."
msgstr ""
"如果 *dirname* 是一个字符串，将创建一个 :pep:`302` 查找器来搜索该目录。 如果 *dirname* 为 "
"``None``，则将创建一个 :pep:`302` 来搜索当前 :data:`sys.path`，加上任何已冻结或内置的模块。"

#: ../../library/pkgutil.rst:61
msgid ""
"Note that :class:`ImpImporter` does not currently support being used by "
"placement on :data:`sys.meta_path`."
msgstr "请注意 :class:`ImpImporter` 目前并不支持放置在 :data:`sys.meta_path` 上使用。"

#: ../../library/pkgutil.rst:64 ../../library/pkgutil.rst:73
msgid ""
"This emulation is no longer needed, as the standard import mechanism is now "
"fully :pep:`302` compliant and available in :mod:`importlib`."
msgstr "这种模拟已不再必要，因为标准的导入机制现在完全兼容 :pep:`302` 并且在 :mod:`importlib` 中可用。"

#: ../../library/pkgutil.rst:71
msgid ":term:`Loader <loader>` that wraps Python's \"classic\" import algorithm."
msgstr "包装了 Python 的 \"经典\" 导入算法的 :term:`加载器 <loader>`。"

#: ../../library/pkgutil.rst:80
msgid "Retrieve a module :term:`loader` for the given *fullname*."
msgstr "为给定的 *fullname* 获取一个模块 :term:`loader`。"

#: ../../library/pkgutil.rst:82
msgid ""
"This is a backwards compatibility wrapper around "
":func:`importlib.util.find_spec` that converts most failures to "
":exc:`ImportError` and only returns the loader rather than the full "
":class:`ModuleSpec`."
msgstr ""
"这是针对 :func:`importlib.util.find_spec` 的向下兼容包装器，它将大多数失败转换为 :exc:`ImportError`"
" 并且只返回加载器而不是完整的 :class:`ModuleSpec`。"

#: ../../library/pkgutil.rst:87 ../../library/pkgutil.rst:104
#: ../../library/pkgutil.rst:119 ../../library/pkgutil.rst:140
#: ../../library/pkgutil.rst:161 ../../library/pkgutil.rst:200
msgid ""
"Updated to be based directly on :mod:`importlib` rather than relying on the "
"package internal :pep:`302` import emulation."
msgstr "更新为直接基于 :mod:`importlib` 而不是依赖于包内部的 :pep:`302` 导入模拟。"

#: ../../library/pkgutil.rst:91 ../../library/pkgutil.rst:123
msgid "Updated to be based on :pep:`451`"
msgstr "更新为基于 :pep:`451`"

#: ../../library/pkgutil.rst:96
msgid "Retrieve a :term:`finder` for the given *path_item*."
msgstr "为给定的 *path_item* 获取一个 :term:`finder`。"

#: ../../library/pkgutil.rst:98
msgid ""
"The returned finder is cached in :data:`sys.path_importer_cache` if it was "
"newly created by a path hook."
msgstr "返回的查找器如果是由一个路径钩子新建的则会被缓存至 :data:`sys.path_importer_cache`。"

#: ../../library/pkgutil.rst:101
msgid ""
"The cache (or part of it) can be cleared manually if a rescan of "
":data:`sys.path_hooks` is necessary."
msgstr "如果需要重新扫描 :data:`sys.path_hooks` 则缓存（或其一部分）可以被手动清空。"

#: ../../library/pkgutil.rst:111
msgid "Get a :term:`loader` object for *module_or_name*."
msgstr "为 *module_or_name* 获取一个 :term:`loader`。"

#: ../../library/pkgutil.rst:113
msgid ""
"If the module or package is accessible via the normal import mechanism, a "
"wrapper around the relevant part of that machinery is returned.  Returns "
"``None`` if the module cannot be found or imported.  If the named module is "
"not already imported, its containing package (if any) is imported, in order "
"to establish the package ``__path__``."
msgstr ""
"如果模块或包可通过正常导入机制来访问，则会返回该机制相关部分的包装器。 如果模块无法找到或导入则返回 ``None``。 "
"如果指定的模块尚未被导入，则包含它的包（如果存在）会被导入，以便建立包 ``__path__``。"

#: ../../library/pkgutil.rst:129
msgid "Yield :term:`finder` objects for the given module name."
msgstr "为给定的模块名称产生 :term:`finder` 对象。"

#: ../../library/pkgutil.rst:131
msgid ""
"If fullname contains a '.', the finders will be for the package containing "
"fullname, otherwise they will be all registered top level finders (i.e. "
"those on both sys.meta_path and sys.path_hooks)."
msgstr ""

#: ../../library/pkgutil.rst:135
msgid ""
"If the named module is in a package, that package is imported as a side "
"effect of invoking this function."
msgstr ""

#: ../../library/pkgutil.rst:138
msgid "If no module name is specified, all top level finders are produced."
msgstr ""

#: ../../library/pkgutil.rst:147
msgid ""
"Yields :class:`ModuleInfo` for all submodules on *path*, or, if *path* is "
"``None``, all top-level modules on ``sys.path``."
msgstr ""

#: ../../library/pkgutil.rst:150 ../../library/pkgutil.rst:171
msgid ""
"*path* should be either ``None`` or a list of paths to look for modules in."
msgstr ""

#: ../../library/pkgutil.rst:152 ../../library/pkgutil.rst:173
msgid ""
"*prefix* is a string to output on the front of every module name on output."
msgstr ""

#: ../../library/pkgutil.rst:156 ../../library/pkgutil.rst:195
msgid ""
"Only works for a :term:`finder` which defines an ``iter_modules()`` method. "
"This interface is non-standard, so the module also provides implementations "
"for :class:`importlib.machinery.FileFinder` and "
":class:`zipimport.zipimporter`."
msgstr ""

#: ../../library/pkgutil.rst:168
msgid ""
"Yields :class:`ModuleInfo` for all modules recursively on *path*, or, if "
"*path* is ``None``, all accessible modules."
msgstr ""

#: ../../library/pkgutil.rst:175
msgid ""
"Note that this function must import all *packages* (*not* all modules!) on "
"the given *path*, in order to access the ``__path__`` attribute to find "
"submodules."
msgstr ""

#: ../../library/pkgutil.rst:179
msgid ""
"*onerror* is a function which gets called with one argument (the name of the"
" package which was being imported) if any exception occurs while trying to "
"import a package.  If no *onerror* function is supplied, "
":exc:`ImportError`\\s are caught and ignored, while all other exceptions are"
" propagated, terminating the search."
msgstr ""

#: ../../library/pkgutil.rst:185
msgid "Examples::"
msgstr "例如::"

#: ../../library/pkgutil.rst:207
msgid "Get a resource from a package."
msgstr "从包中获取一个资源。"

#: ../../library/pkgutil.rst:209
msgid ""
"This is a wrapper for the :term:`loader` :meth:`get_data "
"<importlib.abc.ResourceLoader.get_data>` API.  The *package* argument should"
" be the name of a package, in standard module format (``foo.bar``).  The "
"*resource* argument should be in the form of a relative filename, using "
"``/`` as the path separator.  The parent directory name ``..`` is not "
"allowed, and nor is a rooted name (starting with a ``/``)."
msgstr ""

#: ../../library/pkgutil.rst:216
msgid ""
"The function returns a binary string that is the contents of the specified "
"resource."
msgstr ""

#: ../../library/pkgutil.rst:219
msgid ""
"For packages located in the filesystem, which have already been imported, "
"this is the rough equivalent of::"
msgstr ""

#: ../../library/pkgutil.rst:225
msgid ""
"If the package cannot be located or loaded, or it uses a :term:`loader` "
"which does not support :meth:`get_data "
"<importlib.abc.ResourceLoader.get_data>`, then ``None`` is returned.  In "
"particular, the :term:`loader` for :term:`namespace packages <namespace "
"package>` does not support :meth:`get_data "
"<importlib.abc.ResourceLoader.get_data>`."
msgstr ""

#: ../../library/pkgutil.rst:234
msgid "Resolve a name to an object."
msgstr ""

#: ../../library/pkgutil.rst:236
msgid ""
"This functionality is used in numerous places in the standard library (see "
":issue:`12915`) - and equivalent functionality is also in widely used third-"
"party packages such as setuptools, Django and Pyramid."
msgstr ""

#: ../../library/pkgutil.rst:240
msgid ""
"It is expected that *name* will be a string in one of the following formats,"
" where W is shorthand for a valid Python identifier and dot stands for a "
"literal period in these pseudo-regexes:"
msgstr ""

#: ../../library/pkgutil.rst:244
msgid "``W(.W)*``"
msgstr ""

#: ../../library/pkgutil.rst:245
msgid "``W(.W)*:(W(.W)*)?``"
msgstr ""

#: ../../library/pkgutil.rst:247
msgid ""
"The first form is intended for backward compatibility only. It assumes that "
"some part of the dotted name is a package, and the rest is an object "
"somewhere within that package, possibly nested inside other objects. Because"
" the place where the package stops and the object hierarchy starts can't be "
"inferred by inspection, repeated attempts to import must be done with this "
"form."
msgstr ""

#: ../../library/pkgutil.rst:254
msgid ""
"In the second form, the caller makes the division point clear through the "
"provision of a single colon: the dotted name to the left of the colon is a "
"package to be imported, and the dotted name to the right is the object "
"hierarchy within that package. Only one import is needed in this form. If it"
" ends with the colon, then a module object is returned."
msgstr ""

#: ../../library/pkgutil.rst:260
msgid ""
"The function will return an object (which might be a module), or raise one "
"of the following exceptions:"
msgstr "此函数将返回一个对象（可能为模块），或是引发下列异常之一:"

#: ../../library/pkgutil.rst:263
msgid ":exc:`ValueError` -- if *name* isn't in a recognised format."
msgstr ":exc:`ValueError` -- 如果 *name* 不为可识别的格式。"

#: ../../library/pkgutil.rst:265
msgid ":exc:`ImportError` -- if an import failed when it shouldn't have."
msgstr ":exc:`ImportError` -- 如果导入本应成功但却失败。"

#: ../../library/pkgutil.rst:267
msgid ""
":exc:`AttributeError` -- If a failure occurred when traversing the object "
"hierarchy within the imported package to get to the desired object."
msgstr ":exc:`AttributeError` -- 当在遍历所导入包的对象层级结构以获取想要的对象时遭遇失败。"
