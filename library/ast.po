# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# thautwarm <twshere@outlook.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2020
# Jarry Shaw <jarryshaw@icloud.com>, 2020
# nick <2330458484@qq.com>, 2020
# xixi zhao <xixizxx@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 11:56+0000\n"
"Last-Translator: xixi zhao <xixizxx@gmail.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/ast.rst:2
msgid ":mod:`ast` --- Abstract Syntax Trees"
msgstr ":mod:`ast` --- 抽象语法树"

#: ../../library/ast.rst:10
msgid "**Source code:** :source:`Lib/ast.py`"
msgstr "**源代码：** :source:`Lib/ast.py`"

#: ../../library/ast.rst:14
msgid ""
"The :mod:`ast` module helps Python applications to process trees of the "
"Python abstract syntax grammar.  The abstract syntax itself might change "
"with each Python release; this module helps to find out programmatically "
"what the current grammar looks like."
msgstr ""
":mod:`ast` 模块帮助 Python 程序处理 Python 语法的抽象语法树。抽象语法或许会随着 Python "
"的更新发布而改变；该模块能够帮助理解当前语法在编程层面的样貌。"

#: ../../library/ast.rst:19
msgid ""
"An abstract syntax tree can be generated by passing "
":data:`ast.PyCF_ONLY_AST` as a flag to the :func:`compile` built-in "
"function, or using the :func:`parse` helper provided in this module.  The "
"result will be a tree of objects whose classes all inherit from "
":class:`ast.AST`.  An abstract syntax tree can be compiled into a Python "
"code object using the built-in :func:`compile` function."
msgstr ""
"抽象语法树可通过将 :data:`ast.PyCF_ONLY_AST` 作为旗标传递给 :func:`compile` "
"内置函数来生成，或是使用此模块中提供的 :func:`parse` 辅助函数。返回结果将是一个对象树，，其中的类都继承自 "
":class:`ast.AST`。抽象语法树可被内置的 :func:`compile` 函数编译为一个 Python 代码对象。"

#: ../../library/ast.rst:27
msgid "Node classes"
msgstr "节点类"

#: ../../library/ast.rst:31
msgid ""
"This is the base of all AST node classes.  The actual node classes are "
"derived from the :file:`Parser/Python.asdl` file, which is reproduced "
":ref:`below <abstract-grammar>`.  They are defined in the :mod:`_ast` C "
"module and re-exported in :mod:`ast`."
msgstr ""
"这是所有 AST 节点类的基类。实际上，这些节点类派生自 :file:`Parser/Python.asdl` 文件，其中定义的语法树示例 "
":ref:`如下 <abstract-grammar>`。它们在 C 语言模块 :mod:`_ast` 中定义，并被导出至 :mod:`ast` 模块。"

#: ../../library/ast.rst:36
msgid ""
"There is one class defined for each left-hand side symbol in the abstract "
"grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In addition,"
" there is one class defined for each constructor on the right-hand side; "
"these classes inherit from the classes for the left-hand side trees.  For "
"example, :class:`ast.BinOp` inherits from :class:`ast.expr`.  For production"
" rules with alternatives (aka \"sums\"), the left-hand side class is "
"abstract: only instances of specific constructor nodes are ever created."
msgstr ""
"抽象语法定义的每个左侧符号(比方说，  :class:`ast.stmt` 或者 "
":class:`ast.expr`)定义了一个类。另外，在抽象语法定义的右侧，对每一个构造器也定义了一个类；这些类继承自树左侧的类。比如，:class:`ast.BinOp`"
" 继承自 :class:`ast.expr`。对于多分支产生式(也就是\"和规则\")，树右侧的类是抽象的；只有特定构造器结点的实例能被构造。"

#: ../../library/ast.rst:49
msgid ""
"Each concrete class has an attribute :attr:`_fields` which gives the names "
"of all child nodes."
msgstr "每个具体类都有个属性 :attr:`_fields`, 用来给出所有子节点的名字。 "

#: ../../library/ast.rst:52
msgid ""
"Each instance of a concrete class has one attribute for each child node, of "
"the type as defined in the grammar.  For example, :class:`ast.BinOp` "
"instances have an attribute :attr:`left` of type :class:`ast.expr`."
msgstr ""
"每个具体类的实例对它每个子节点都有一个属性，对应类型如文法中所定义。比如，:class:`ast.BinOp` 的实例有个属性 "
":attr:`left`，类型是 :class:`ast.expr`."

#: ../../library/ast.rst:56
msgid ""
"If these attributes are marked as optional in the grammar (using a question "
"mark), the value might be ``None``.  If the attributes can have zero-or-more"
" values (marked with an asterisk), the values are represented as Python "
"lists.  All possible attributes must be present and have valid values when "
"compiling an AST with :func:`compile`."
msgstr ""
"如果这些属性在文法中标记为可选（使用问号），对应值可能会是 "
"``None``。如果这些属性有零或多个（用星号标记），对应值会用Python的列表来表示。所有可能的属性必须在用 :func:`compile` "
"编译得到AST时给出，且是有效的值。"

#: ../../library/ast.rst:67
msgid ""
"Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have "
":attr:`lineno`, :attr:`col_offset`, :attr:`lineno`, and :attr:`col_offset` "
"attributes.  The :attr:`lineno` and :attr:`end_lineno` are the first and "
"last line numbers of source text span (1-indexed so the first line is line "
"1) and the :attr:`col_offset` and :attr:`end_col_offset` are the "
"corresponding UTF-8 byte offsets of the first and last tokens that generated"
" the node. The UTF-8 offset is recorded because the parser uses UTF-8 "
"internally."
msgstr ""

#: ../../library/ast.rst:75
msgid ""
"Note that the end positions are not required by the compiler and are "
"therefore optional. The end offset is *after* the last symbol, for example "
"one can get the source segment of a one-line expression node using "
"``source_line[node.col_offset : node.end_col_offset]``."
msgstr ""

#: ../../library/ast.rst:80
msgid ""
"The constructor of a class :class:`ast.T` parses its arguments as follows:"
msgstr "一个类的构造器 :class:`ast.T` 像下面这样parse它的参数。"

#: ../../library/ast.rst:82
msgid ""
"If there are positional arguments, there must be as many as there are items "
"in :attr:`T._fields`; they will be assigned as attributes of these names."
msgstr "如果有位置参数，它们必须和 :attr:`T._fields` 中的元素一样多；他们会像这些名字的属性一样被赋值。"

#: ../../library/ast.rst:84
msgid ""
"If there are keyword arguments, they will set the attributes of the same "
"names to the given values."
msgstr "如果有关键字参数，它们必须被设为和给定值同名的属性。"

#: ../../library/ast.rst:87
msgid ""
"For example, to create and populate an :class:`ast.UnaryOp` node, you could "
"use ::"
msgstr "比方说，要创建和填充节点 :class:`ast.UnaryOp`，你得用 ::"

#: ../../library/ast.rst:99
msgid "or the more compact ::"
msgstr "或者更紧凑点 ::"

#: ../../library/ast.rst:106
msgid "Class :class:`ast.Constant` is now used for all constants."
msgstr ""

#: ../../library/ast.rst:110
msgid ""
"Old classes :class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, "
":class:`ast.NameConstant` and :class:`ast.Ellipsis` are still available, but"
" they will be removed in future Python releases.  In the meanwhile, "
"instantiating them will return an instance of a different class."
msgstr ""

#: ../../library/ast.rst:119
msgid "Abstract Grammar"
msgstr "抽象文法"

#: ../../library/ast.rst:121
msgid "The abstract grammar is currently defined as follows:"
msgstr "抽象文法目前定义如下"

#: ../../library/ast.rst:128
msgid ":mod:`ast` Helpers"
msgstr ":mod:`ast` 中的辅助函数"

#: ../../library/ast.rst:130
msgid ""
"Apart from the node classes, the :mod:`ast` module defines these utility "
"functions and classes for traversing abstract syntax trees:"
msgstr "除了节点类， :mod:`ast` 模块里为遍历抽象语法树定义了这些工具函数和类:"

#: ../../library/ast.rst:135
msgid ""
"Parse the source into an AST node.  Equivalent to ``compile(source, "
"filename, mode, ast.PyCF_ONLY_AST)``."
msgstr ""
"把源码解析为AST节点。和 ``compile(source, filename, mode,ast.PyCF_ONLY_AST)`` 等价。"

#: ../../library/ast.rst:138
msgid ""
"If ``type_comments=True`` is given, the parser is modified to check and "
"return type comments as specified by :pep:`484` and :pep:`526`. This is "
"equivalent to adding :data:`ast.PyCF_TYPE_COMMENTS` to the flags passed to "
":func:`compile()`.  This will report syntax errors for misplaced type "
"comments.  Without this flag, type comments will be ignored, and the "
"``type_comment`` field on selected AST nodes will always be ``None``.  In "
"addition, the locations of ``# type: ignore`` comments will be returned as "
"the ``type_ignores`` attribute of :class:`Module` (otherwise it is always an"
" empty list)."
msgstr ""

#: ../../library/ast.rst:148
msgid ""
"In addition, if ``mode`` is ``'func_type'``, the input syntax is modified to"
" correspond to :pep:`484` \"signature type comments\", e.g. ``(str, int) -> "
"List[str]``."
msgstr ""

#: ../../library/ast.rst:152
msgid ""
"Also, setting ``feature_version`` to a tuple ``(major, minor)`` will attempt"
" to parse using that Python version's grammar. Currently ``major`` must "
"equal to ``3``.  For example, setting ``feature_version=(3, 4)`` will allow "
"the use of ``async`` and ``await`` as variable names.  The lowest supported "
"version is ``(3, 4)``; the highest is ``sys.version_info[0:2]``."
msgstr ""

#: ../../library/ast.rst:160 ../../library/ast.rst:181
msgid ""
"It is possible to crash the Python interpreter with a sufficiently "
"large/complex string due to stack depth limitations in Python's AST "
"compiler."
msgstr "足够复杂或是巨大的字符串可能导致Python解释器的崩溃，因为Python的AST编译器是有栈深限制的。"

#: ../../library/ast.rst:164
msgid "Added ``type_comments``, ``mode='func_type'`` and ``feature_version``."
msgstr ""

#: ../../library/ast.rst:170
msgid ""
"Safely evaluate an expression node or a string containing a Python literal "
"or container display.  The string or node provided may only consist of the "
"following Python literal structures: strings, bytes, numbers, tuples, lists,"
" dicts, sets, booleans, and ``None``."
msgstr ""
"对表达式节点以及包含Python字面量或容器的字符串进行安全的求值。传入的字符串或者节点里可能只包含下列的Python字面量结构: "
"字符串，字节对象(bytes)，数值，元组，列表，字典，集合，布尔值和 ``None``。"

#: ../../library/ast.rst:175
msgid ""
"This can be used for safely evaluating strings containing Python values from"
" untrusted sources without the need to parse the values oneself.  It is not "
"capable of evaluating arbitrarily complex expressions, for example involving"
" operators or indexing."
msgstr ""

#: ../../library/ast.rst:185
msgid "Now allows bytes and set literals."
msgstr "目前支持字节和集合。"

#: ../../library/ast.rst:191
msgid ""
"Return the docstring of the given *node* (which must be a "
":class:`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef`, or "
":class:`Module` node), or ``None`` if it has no docstring. If *clean* is "
"true, clean up the docstring's indentation with :func:`inspect.cleandoc`."
msgstr ""

#: ../../library/ast.rst:197
msgid ":class:`AsyncFunctionDef` is now supported."
msgstr "目前支持 :class:`AsyncFunctionDef` "

#: ../../library/ast.rst:203
msgid ""
"Get source code segment of the *source* that generated *node*. If some "
"location information (:attr:`lineno`, :attr:`end_lineno`, "
":attr:`col_offset`, or :attr:`end_col_offset`) is missing, return ``None``."
msgstr ""

#: ../../library/ast.rst:207
msgid ""
"If *padded* is ``True``, the first line of a multi-line statement will be "
"padded with spaces to match its original position."
msgstr ""

#: ../../library/ast.rst:215
msgid ""
"When you compile a node tree with :func:`compile`, the compiler expects "
":attr:`lineno` and :attr:`col_offset` attributes for every node that "
"supports them.  This is rather tedious to fill in for generated nodes, so "
"this helper adds these attributes recursively where not already set, by "
"setting them to the values of the parent node.  It works recursively "
"starting at *node*."
msgstr ""

#: ../../library/ast.rst:224
msgid ""
"Increment the line number and end line number of each node in the tree "
"starting at *node* by *n*. This is useful to \"move code\" to a different "
"location in a file."
msgstr ""

#: ../../library/ast.rst:231
msgid ""
"Copy source location (:attr:`lineno`, :attr:`col_offset`, "
":attr:`end_lineno`, and :attr:`end_col_offset`) from *old_node* to "
"*new_node* if possible, and return *new_node*."
msgstr ""

#: ../../library/ast.rst:238
msgid ""
"Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` "
"that is present on *node*."
msgstr ""

#: ../../library/ast.rst:244
msgid ""
"Yield all direct child nodes of *node*, that is, all fields that are nodes "
"and all items of fields that are lists of nodes."
msgstr ""

#: ../../library/ast.rst:250
msgid ""
"Recursively yield all descendant nodes in the tree starting at *node* "
"(including *node* itself), in no specified order.  This is useful if you "
"only want to modify nodes in place and don't care about the context."
msgstr ""

#: ../../library/ast.rst:257
msgid ""
"A node visitor base class that walks the abstract syntax tree and calls a "
"visitor function for every node found.  This function may return a value "
"which is forwarded by the :meth:`visit` method."
msgstr ""

#: ../../library/ast.rst:261
msgid ""
"This class is meant to be subclassed, with the subclass adding visitor "
"methods."
msgstr ""

#: ../../library/ast.rst:266
msgid ""
"Visit a node.  The default implementation calls the method called "
":samp:`self.visit_{classname}` where *classname* is the name of the node "
"class, or :meth:`generic_visit` if that method doesn't exist."
msgstr ""

#: ../../library/ast.rst:272
msgid "This visitor calls :meth:`visit` on all children of the node."
msgstr ""

#: ../../library/ast.rst:274
msgid ""
"Note that child nodes of nodes that have a custom visitor method won't be "
"visited unless the visitor calls :meth:`generic_visit` or visits them "
"itself."
msgstr ""

#: ../../library/ast.rst:278
msgid ""
"Don't use the :class:`NodeVisitor` if you want to apply changes to nodes "
"during traversal.  For this a special visitor exists "
"(:class:`NodeTransformer`) that allows modifications."
msgstr ""

#: ../../library/ast.rst:284
msgid ""
"Methods :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, "
":meth:`visit_NameConstant` and :meth:`visit_Ellipsis` are deprecated now and"
" will not be called in future Python versions.  Add the "
":meth:`visit_Constant` method to handle all constant nodes."
msgstr ""

#: ../../library/ast.rst:292
msgid ""
"A :class:`NodeVisitor` subclass that walks the abstract syntax tree and "
"allows modification of nodes."
msgstr "子类 :class:`NodeVisitor`  用于遍历抽象语法树，并允许修改节点。"

#: ../../library/ast.rst:295
msgid ""
"The :class:`NodeTransformer` will walk the AST and use the return value of "
"the visitor methods to replace or remove the old node.  If the return value "
"of the visitor method is ``None``, the node will be removed from its "
"location, otherwise it is replaced with the return value.  The return value "
"may be the original node in which case no replacement takes place."
msgstr ""
":class:`NodeTransformer` 将遍历抽象语法树并使用visitor方法的返回值去替换或移除旧节点。如果visitor方法的返回值为 "
"``None`` , 则该节点将从其位置移除，否则将替换为返回值。当返回值是原始节点时，无需替换。"

#: ../../library/ast.rst:301
msgid ""
"Here is an example transformer that rewrites all occurrences of name lookups"
" (``foo``) to ``data['foo']``::"
msgstr "如下是一个转换器示例，它将所有出现的名称 (``foo``) 重写为 ``data['foo']``:: "

#: ../../library/ast.rst:313
msgid ""
"Keep in mind that if the node you're operating on has child nodes you must "
"either transform the child nodes yourself or call the :meth:`generic_visit` "
"method for the node first."
msgstr "请记住，如果您正在操作的节点具有子节点，则必须先转换其子节点或为该节点调用 :meth:`generic_visit`  方法。"

#: ../../library/ast.rst:317
msgid ""
"For nodes that were part of a collection of statements (that applies to all "
"statement nodes), the visitor may also return a list of nodes rather than "
"just a single node."
msgstr "对于属于语句集合（适用于所有语句节点）的节点，访问者还可以返回节点列表而不仅仅是单个节点。"

#: ../../library/ast.rst:321
msgid ""
"If :class:`NodeTransformer` introduces new nodes (that weren't part of "
"original tree) without giving them location information (such as "
":attr:`lineno`), :func:`fix_missing_locations` should be called with the new"
" sub-tree to recalculate the location information::"
msgstr ""

#: ../../library/ast.rst:329
msgid "Usually you use the transformer like this::"
msgstr "通常你可以像这样使用转换器:: "

#: ../../library/ast.rst:336
msgid ""
"Return a formatted dump of the tree in *node*.  This is mainly useful for "
"debugging purposes.  If *annotate_fields* is true (by default), the returned"
" string will show the names and the values for fields. If *annotate_fields* "
"is false, the result string will be more compact by omitting unambiguous "
"field names.  Attributes such as line numbers and column offsets are not "
"dumped by default.  If this is wanted, *include_attributes* can be set to "
"true."
msgstr ""

#: ../../library/ast.rst:346
msgid ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, an external "
"documentation resource, has good details on working with Python ASTs."
msgstr ""

#: ../../library/ast.rst:349
msgid ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-guide.html>`_ "
"annotates Python ASTs with the positions of tokens and text in the source "
"code that generated them. This is helpful for tools that make source code "
"transformations."
msgstr ""

#: ../../library/ast.rst:354
msgid ""
"`leoAst.py <http://leoeditor.com/appendices.html#leoast-py>`_ unifies the "
"token-based and parse-tree-based views of python programs by inserting two-"
"way links between tokens and ast nodes."
msgstr ""

#: ../../library/ast.rst:358
msgid ""
"`LibCST <https://libcst.readthedocs.io/>`_ parses code as a Concrete Syntax "
"Tree that looks like an ast tree and keeps all formatting details. It's "
"useful for building automated refactoring (codemod) applications and "
"linters."
msgstr ""

#: ../../library/ast.rst:363
msgid ""
"`Parso <https://parso.readthedocs.io>`_ is a Python parser that supports "
"error recovery and round-trip parsing for different Python versions (in "
"multiple Python versions). Parso is also able to list multiple syntax errors"
" in your python file."
msgstr ""
