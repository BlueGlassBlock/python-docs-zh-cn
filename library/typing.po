# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ww song <sww4718168@gmail.com>, 2018
# JW H <hjwdhjwd@gmail.com>, 2019
# Meng Du <alphanow@gmail.com>, 2020
# MuSheng Chen <sheng.2179@gmail.com>, 2020
# Siyuan Xu <mf20070535@126.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2021
# jaystone776 <1732865113@qq.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-05 06:14+0000\n"
"PO-Revision-Date: 2017-02-16 23:32+0000\n"
"Last-Translator: jaystone776 <1732865113@qq.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- 类型提示支持"

#: ../../library/typing.rst:10
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**源码：** :source:`Lib/typing.py`"

#: ../../library/typing.rst:14
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr "Python 运行时不强制执行函数和变量类型注解，但这些注解可用于类型检查器、IDE、静态检查器等第三方工具。"

#: ../../library/typing.rst:20
msgid ""
"This module provides runtime support for type hints as specified by "
":pep:`484`, :pep:`526`, :pep:`544`, :pep:`586`, :pep:`589`, and :pep:`591`. "
"The most fundamental support consists of the types :data:`Any`, "
":data:`Union`, :data:`Tuple`, :data:`Callable`, :class:`TypeVar`, and "
":class:`Generic`.  For full specification please see :pep:`484`.  For a "
"simplified introduction to type hints see :pep:`483`."
msgstr ""
"本模块为 :pep:`484` 、:pep:`526` 、:pep:`544` 、:pep:`586` 、:pep:`589` 和 :pep:`591`"
" "
"中的类型提示提供运行时支持。:data:`Any`、:data:`Union`、:data:`Tuple`、:data:`Callable`、:class:`TypeVar`"
" 和 :class:`Generic` 等类型是最基础的组件。完整说明详见 :pep:`484`，类型提示简介请参阅 :PEP:`483`。"

#: ../../library/typing.rst:28
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr "下面的函数接收与返回的都是字符串，注解方式如下："

#: ../../library/typing.rst:33
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as"
" arguments."
msgstr ""
"``greeting`` 函数中，参数 ``name`` 的类型是 :class:`str`，返回类型也是 "
":class:`str`。子类型也可以当作参数。"

#: ../../library/typing.rst:38
msgid "Type aliases"
msgstr "类型别名"

#: ../../library/typing.rst:40
msgid ""
"A type alias is defined by assigning the type to the alias. In this example,"
" ``Vector`` and ``list[float]`` will be treated as interchangeable "
"synonyms::"
msgstr "把类型赋给别名，就可以定义类型别名。本例中，``Vector`` 和 ``list[float]`` 相同，可互换："

#: ../../library/typing.rst:51
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "类型别名适用于简化复杂的类型签名。例如："

#: ../../library/typing.rst:69
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr "注意，``None`` 是一种类型提示特例，已被 ``type(None)`` 取代。"

#: ../../library/typing.rst:75
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:77
msgid "Use the :func:`NewType` helper function to create distinct types::"
msgstr ":func:`NewType` 辅助函数可创建不同的新类型："

#: ../../library/typing.rst:84
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr "静态类型检查器把新类型当作原始类型的子类，这种方式适用于捕捉逻辑错误："

#: ../../library/typing.rst:96
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent"
" you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"``UserId`` 类型的变量可执行所有 ``int`` 操作，但返回结果都是 ``int`` 类型。这种方式允许在预期 ``int`` 时传入 "
"``UserId``，还能防止意外创建无效的 ``UserId``："

#: ../../library/typing.rst:104
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a function that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce any overhead beyond that of a regular function call."
msgstr ""
"注意，只有静态类型检查器强制执行这些检查。在运行时，``Derived = NewType('Derived', Base)`` 语句把 "
"``Derived`` 当作函数，该函数直接返回传递给它的任何参数。即，``Derived(some_value)`` "
"表达式不创建新类，或引入超出调用常规函数的开销。"

#: ../../library/typing.rst:110
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr "更确切地说，在运行时，``some_value is Derived(some_value)`` 表达式总为 True。"

#: ../../library/typing.rst:113
msgid ""
"This also means that it is not possible to create a subtype of ``Derived`` "
"since it is an identity function at runtime, not an actual type::"
msgstr "也就是说，不能创建 ``Derived`` 的子类型，因为，在运行时，它是标识函数，不是真正的类型："

#: ../../library/typing.rst:123
msgid ""
"However, it is possible to create a :func:`NewType` based on a 'derived' "
"``NewType``::"
msgstr "但是，可以基于 '派生的' ``NewType`` 创建 :func:`NewType`："

#: ../../library/typing.rst:131
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "同时，``ProUserId`` 的类型检查也可以按预期执行。"

#: ../../library/typing.rst:133
msgid "See :pep:`484` for more details."
msgstr "详见 :pep:`484`。"

#: ../../library/typing.rst:137
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to"
" one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""
"回顾上文，类型别名声明了两种彼此 *等价* 的类型。 ``Alias = Original`` 时，静态类型检查器认为 ``Alias`` 与 "
"``Original`` *完全等价*。 这种方式适用于简化复杂类型签名。"

#: ../../library/typing.rst:142
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"反之，``NewType`` 声明把一种类型当作另一种类型的 *子类型*。``Derived = NewType('Derived', "
"Original)`` 时，静态类型检查器把 ``Derived`` 当作 ``Original`` 的 *子类* ，即，``Original`` "
"类型的值不能用在预期 ``Derived`` 类型的位置。这种方式适用于以最小运行时成本防止逻辑错误。"

#: ../../library/typing.rst:152
msgid "Callable"
msgstr "可调对象（Callable）"

#: ../../library/typing.rst:154
msgid ""
"Frameworks expecting callback functions of specific signatures might be type"
" hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""
"预期特定签名回调函数的框架可以用 ``Callable[[Arg1Type, Arg2Type], ReturnType]`` 实现类型提示。"

#: ../../library/typing.rst:157
msgid "For example::"
msgstr "例如："

#: ../../library/typing.rst:168
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"无需指定调用签名，用省略号字面量替换类型提示里的参数列表： ``Callable[..., ReturnType]``，就可以声明可调对象的返回类型。"

#: ../../library/typing.rst:175
msgid "Generics"
msgstr "泛型（Generic）"

#: ../../library/typing.rst:177
msgid ""
"Since type information about objects kept in containers cannot be statically"
" inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr "容器中，对象的类型信息不能以泛型方式静态推断，因此，抽象基类扩展支持下标，用于表示容器元素的预期类型。"

#: ../../library/typing.rst:188
msgid ""
"Generics can be parameterized by using a new factory available in typing "
"called :class:`TypeVar`."
msgstr "typing 模块中新推出的 :class:`TypeVar` 工厂函数实现泛型参数化。"

#: ../../library/typing.rst:203
msgid "User-defined generic types"
msgstr "用户定义的泛型类型"

#: ../../library/typing.rst:205
msgid "A user-defined class can be defined as a generic class."
msgstr "用户定义的类可以定义为泛型类。"

#: ../../library/typing.rst:231
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""
"``Generic[T]`` 是定义类 ``LoggedVar`` 的基类，该类使用单类型参数 ``T``。在该类体内，``T`` 是有效的类型。"

#: ../../library/typing.rst:235
msgid ""
"The :class:`Generic` base class defines :meth:`__class_getitem__` so that "
"``LoggedVar[t]`` is valid as a type::"
msgstr ""
":class:`Generic` 基类定义了 :meth:`__class_getitem__` ，因此，``LoggedVar[t]`` "
"也是有效类型："

#: ../../library/typing.rst:244
msgid ""
"A generic type can have any number of type variables, and type variables may"
" be constrained::"
msgstr "泛型类型支持多个类型变量，不过，类型变量可能会受到限制："

#: ../../library/typing.rst:256
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ":class:`Generic` 类型变量的参数应各不相同。下列代码就是无效的："

#: ../../library/typing.rst:267
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ":class:`Generic` 支持多重继承："

#: ../../library/typing.rst:277
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr "继承自泛型类时，可以修正某些类型变量："

#: ../../library/typing.rst:287
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "比如，本例中 ``MyDict`` 调用的单参数，``T``。"

#: ../../library/typing.rst:289
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any`"
" for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""
"未指定泛型类的类型参数时，每个位置的类型都预设为 :data:`Any`。下例中，``MyIterable`` 不是泛型，但却隐式继承了 "
"``Iterable[Any]``："

#: ../../library/typing.rst:297
msgid "User defined generic type aliases are also supported. Examples::"
msgstr "还支持用户定义的泛型类型别名。例如："

#: ../../library/typing.rst:314
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` 不再支持自定义元类。"

#: ../../library/typing.rst:317
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
"hashable and comparable for equality."
msgstr ""
"抽象基类可作为用户定义的泛型类的基类，且不会与元类冲突。现已不再支持泛型元类。参数化泛型的输出结果会被缓存，typing "
"模块的大多数类型都可哈希、可进行等价对比。"

#: ../../library/typing.rst:324
msgid "The :data:`Any` type"
msgstr ":data:`Any` 类型"

#: ../../library/typing.rst:326
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
":data:`Any` 是一种特殊的类型。静态类型检查器认为所有类型均与 :data:`Any` 兼容，同样，:data:`Any` 也与所有类型兼容。"

#: ../../library/typing.rst:330
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr "也就是说，可对 :data:`Any` 类型的值执行任何操作或方法调用，并赋值给任意变量："

#: ../../library/typing.rst:348
msgid ""
"Notice that no typechecking is performed when assigning a value of type "
":data:`Any` to a more precise type. For example, the static type checker did"
" not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"注意，:data:`Any` 类型的值赋给更精确的类型时，不执行类型检查。例如，把 ``a`` 赋给 ``s``，在运行时，即便 ``s`` 已声明为 "
":class:`str` 类型，但接收 :class:`int` 值时，静态类型检查器也不会报错。"

#: ../../library/typing.rst:354
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr "此外，未指定返回值与参数类型的函数，都隐式地默认使用 :data:`Any`："

#: ../../library/typing.rst:367
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr "需要混用动态与静态类型代码时，此操作把 :data:`Any` 当作 *应急出口*。"

#: ../../library/typing.rst:370
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However,"
" unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
":data:`Any` 和 :class:`object` 的区别。与 :data:`Any` 相似，所有类型都是 :class:`object` "
"的子类型。然而，与 :data:`Any` 不同，object 不可逆：:class:`object` *不是* 其它类型的子类型。"

#: ../../library/typing.rst:375
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using"
" it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"就是说，值的类型是 :class:`object` "
"时，类型检查器几乎会拒绝所有对它的操作，并且，把它赋给更精确的类型变量（或返回值）属于类型错误。例如："

#: ../../library/typing.rst:397
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe"
" manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr "使用 :class:`object`，说明值能以类型安全的方式转为任何类型。使用 :data:`Any`，说明值是动态类型。"

#: ../../library/typing.rst:402
msgid "Nominal vs structural subtyping"
msgstr "名义子类型 vs 结构子类型"

#: ../../library/typing.rst:404
msgid ""
"Initially :pep:`484` defined Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
":pep:`484` 最初只是把 Python 静态类型系统定义为应用 *名义子类型*。即，当且仅当 ``A`` 是 ``B`` 的子类时，才能在预期 "
"``B`` 类时应用 ``A`` 类。"

#: ../../library/typing.rst:408
msgid ""
"This requirement previously also applied to abstract base classes, such as "
":class:`~collections.abc.Iterable`. The problem with this approach is that a"
" class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"此项要求以前也适用于抽象基类，例如，:class:`~collections.abc.Iterable` "
"。这种方式的问题在于，定义类时必须显式说明，既不 Pythonic，也不是动态类型式 Python 代码的惯用写法。例如，下列代码就遵从了 "
":pep:`484` 的规范："

#: ../../library/typing.rst:421
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above"
" code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` 允许用户在类定义时不显式说明基类，从而解决了这一问题，静态类型检查器隐式认为 ``Bucket`` 既是 ``Sized`` "
"的子类型，又是 ``Iterable[int]`` 的子类型。这就是 *结构子类型* （又称为静态鸭子类型）："

#: ../../library/typing.rst:437
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr "此外，结构子类型的优势在于，通过继承特殊类 :class:`Protocol` ，用户可以定义新的自定义协议（见下文中的例子）。"

#: ../../library/typing.rst:442
msgid "Module contents"
msgstr "模块内容"

#: ../../library/typing.rst:444
msgid "The module defines the following classes, functions and decorators."
msgstr "本模块定义了下列类、函数和修饰器。"

#: ../../library/typing.rst:448
msgid ""
"This module defines several types that are subclasses of pre-existing "
"standard library classes which also extend :class:`Generic` to support type "
"variables inside ``[]``. These types became redundant in Python 3.9 when the"
" corresponding pre-existing classes were enhanced to support ``[]``."
msgstr ""
"本模块定义了一些类型，作为标准库中已有的类的子类，从而可以让 :class:`Generic` 支持 ``[]`` 中的类型变量。Python 3.9 "
"中，这些标准库的类已支持 ``[]`` ，因此，这些类型就变得冗余了。"

#: ../../library/typing.rst:454
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings will be issued by the interpreter. It is expected that type "
"checkers will flag the deprecated types when the checked program targets "
"Python 3.9 or newer."
msgstr ""
"Python 3.9 弃用了这些冗余类型，但解释器并未提供相应的弃用警告。标记弃用类型的工作留待支持 Python 3.9 及以上版本的类型检查器实现。"

#: ../../library/typing.rst:459
msgid ""
"The deprecated types will be removed from the :mod:`typing` module in the "
"first Python version released 5 years after the release of Python 3.9.0. See"
" details in :pep:`585`—*Type Hinting Generics In Standard Collections*."
msgstr ""
"Python 3.9.0 发布五年后的首个 Python 发行版将从 :mod:`typing` 模块中移除这些弃用类型。详见 :pep:`585` "
"《*标准集合的类型提示泛型*》。"

#: ../../library/typing.rst:465
msgid "Special typing primitives"
msgstr "特殊类型原语"

#: ../../library/typing.rst:468
msgid "Special types"
msgstr "特殊类型"

#: ../../library/typing.rst:470
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr "这些类型可用于类型注解，但不支持 ``[]``。"

#: ../../library/typing.rst:474
msgid "Special type indicating an unconstrained type."
msgstr "不受限的特殊类型。"

#: ../../library/typing.rst:476
msgid "Every type is compatible with :data:`Any`."
msgstr "所有类型都与 :data:`Any` 兼容。"

#: ../../library/typing.rst:477
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` 与所有类型都兼容。"

#: ../../library/typing.rst:481
msgid "Special type indicating that a function never returns. For example::"
msgstr "标记没有返回值的函数的特殊类型。例如："

#: ../../library/typing.rst:493
msgid "Special forms"
msgstr "特殊形式"

#: ../../library/typing.rst:495
msgid ""
"These can be used as types in annotations using ``[]``, each having a unique"
" syntax."
msgstr "可用于类型注解，且支持 ``[]`` ，每种形式都有其独特的句法。"

#: ../../library/typing.rst:499
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""
"元组类型； ``Tuple[X, Y]`` 是二项元组类型，第一个元素的类型是 X，第二个元素的类型是 Y。空元组的类型可写为 "
"``Tuple[()]``。"

#: ../../library/typing.rst:503
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""
"例：``Tuple[T1, T2]`` 是二项元组，类型变量分别为 T1 和 T2。``Tuple[int, float, str]`` "
"是由整数、浮点数、字符串组成的三项元组。"

#: ../../library/typing.rst:507
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""
"可用省略号字面量指定同质变长元组，例如，``Tuple[int, ...]`` 。:data:`Tuple` 与 ``Tuple[Any, ...]``"
" 等价，也与 :class:`tuple` 等价。"

#: ../../library/typing.rst:511
msgid ""
":class:`builtins.tuple <tuple>` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:517
msgid "Union type; ``Union[X, Y]`` means either X or Y."
msgstr "联合类型；``Union[X, Y]`` 的意思是，非 X 即 Y。"

#: ../../library/typing.rst:519
msgid "To define a union, use e.g. ``Union[int, str]``.  Details:"
msgstr "可用 ``Union[int, str]`` 等形式定义联合类型。 具体如下："

#: ../../library/typing.rst:521
msgid "The arguments must be types and there must be at least one."
msgstr "参数必须是某种类型，且至少有一个。"

#: ../../library/typing.rst:523
msgid "Unions of unions are flattened, e.g.::"
msgstr "联合类型之联合类型会被展平，例如："

#: ../../library/typing.rst:527
msgid "Unions of a single argument vanish, e.g.::"
msgstr "单参数之联合类型就是该参数自身，例如："

#: ../../library/typing.rst:531
msgid "Redundant arguments are skipped, e.g.::"
msgstr "冗余的参数会被跳过，例如："

#: ../../library/typing.rst:535
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "比较联合类型，不涉及参数顺序，例如："

#: ../../library/typing.rst:539
msgid "You cannot subclass or instantiate a union."
msgstr "联合类型不能作为子类，也不能实例化。"

#: ../../library/typing.rst:541
msgid "You cannot write ``Union[X][Y]``."
msgstr "不支持 ``Union[X][Y]`` 这种写法。"

#: ../../library/typing.rst:543
msgid "You can use ``Optional[X]`` as a shorthand for ``Union[X, None]``."
msgstr "``Optional[X]`` 是 ``Union[X, None]`` 的缩写。"

#: ../../library/typing.rst:545
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "在运行时，不要移除联合类型中的显式子类。"

#: ../../library/typing.rst:550
msgid "Optional type."
msgstr "可选类型。"

#: ../../library/typing.rst:552
msgid "``Optional[X]`` is equivalent to ``Union[X, None]``."
msgstr " ``Optional[X]`` 等价于 ``Union[X, None]`` 。"

#: ../../library/typing.rst:554
msgid ""
"Note that this is not the same concept as an optional argument, which is one"
" that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"注意，可选类型与含默认值的可选参数不同。含默认值的可选参数不需要在类型注解上添加 ``Optional`` 限定符，因为它仅是可选的。例如："

#: ../../library/typing.rst:562
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr "另一方面，显式应用 ``None`` 值时，不管该参数是否可选， ``Optional`` 都适用。例如："

#: ../../library/typing.rst:571
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr "可调类型； ``Callable[[int], str]`` 是把（int）转为 str 的函数。"

#: ../../library/typing.rst:573
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr "下标句法必须与参数列表和返回类型这两个值一起使用。参数列表只能是类型列表或省略号；返回类型只能是单一类型。"

#: ../../library/typing.rst:578
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to "
":class:`collections.abc.Callable`."
msgstr ""
"没有说明可选参数或关键字参数的句法；这类函数类型很少用作回调类型。``Callable[..., ReturnType]`` "
"（省略号字面量）可用于为接受任意数量参数，并返回 ``ReturnType`` 的可调对象提供类型提示。纯 :data:`Callable` 等价于 "
"``Callable[..., Any]``，进而等价于 :class:`collections.abc.Callable` 。"

#: ../../library/typing.rst:586
msgid ""
":class:`collections.abc.Callable` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` 现已支持 ``[]``。 详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:592
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""
"用 ``C`` 注解的变量可以接受类型 ``C`` 的值。反之，用 ``Type[C]`` 注解的变量可以接受类自身的值 — 准确地说，是接受 "
"``C`` 的 *类对象*，例如："

#: ../../library/typing.rst:601
msgid "Note that ``Type[C]`` is covariant::"
msgstr "注意，``Type[C]`` 为协变量："

#: ../../library/typing.rst:613
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""
"``Type[C]`` 为协变量的意思是指， ``C`` 的所有子类都应使用与 ``C`` "
"相同的构造器签名及类方法签名。类型检查器应标记违反此项规定的内容，但也应允许符合指定基类构造器调用的子类进行构造器调用。:pep:`484`  "
"修订版将来可能会调整类型检查器对这种特例的处理方式。"

#: ../../library/typing.rst:621
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, "
":ref:`type variables <generics>`, and unions of any of these types. For "
"example::"
msgstr ""
" :class:`Type` 合法的参数仅有类、:data:`Any` 、:ref:`类型变量<generics>` 以及上述类型的联合类型。例如："

#: ../../library/typing.rst:627
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr " ``Type[Any]`` 等价于 ``Type``，进而等价于 Python 元类架构的根基，``type``。"

#: ../../library/typing.rst:632
msgid ""
":class:`builtins.type <type>` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:638
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr "表示类型检查器对应变量或函数参数的值等价于给定字面量（或多个字面量之一）的类型。例如："

#: ../../library/typing.rst:652
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` 不能创建子类。在运行时，任意值均可作为 ``Literal[...]`` "
"的类型参数，但类型检查器可以对此加以限制。字面量类型详见 :pep:`586` 。"

#: ../../library/typing.rst:658
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of"
" their parameters are not :term:`hashable`."
msgstr ""

#: ../../library/typing.rst:666
msgid "Special type construct to mark class variables."
msgstr "标记类变量的特殊类型构造器。"

#: ../../library/typing.rst:668
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr "如 :pep:`526` 所述，打包在 ClassVar 内的变量注解是指，给定属性应当用作类变量，而不应设置在类实例上。用法如下："

#: ../../library/typing.rst:676
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` 仅接受类型，也不能使用下标。"

#: ../../library/typing.rst:678
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with "
":func:`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change "
"Python runtime behavior, but it can be used by third-party type checkers. "
"For example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` 本身不是类，不应用于 :func:`isinstance` 或 "
":func:`issubclass`。:data:`ClassVar` 不改变 Python "
"运行时行为，但可以用于第三方类型检查器。例如，类型检查器会认为以下代码有错："

#: ../../library/typing.rst:692
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr "告知类型检查器某名称不能再次赋值或在子类中重写的特殊类型构造器。例如："

#: ../../library/typing.rst:704 ../../library/typing.rst:1616
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr "这些属性没有运行时检查。详见 :pep:`591`。"

#: ../../library/typing.rst:711
msgid ""
"A type, introduced in :pep:`593` (``Flexible function and variable "
"annotations``), to decorate existing types with context-specific metadata "
"(possibly multiple pieces of it, as ``Annotated`` is variadic). "
"Specifically, a type ``T`` can be annotated with metadata ``x`` via the "
"typehint ``Annotated[T, x]``. This metadata can be used for either static "
"analysis or at runtime. If a library (or tool) encounters a typehint "
"``Annotated[T, x]`` and has no special logic for metadata ``x``, it should "
"ignore it and simply treat the type as ``T``. Unlike the ``no_type_check`` "
"functionality that currently exists in the ``typing`` module which "
"completely disables typechecking annotations on a function or a class, the "
"``Annotated`` type allows for both static typechecking of ``T`` (e.g., via "
"mypy or Pyre, which can safely ignore ``x``) together with runtime access to"
" ``x`` within a specific application."
msgstr ""
":pep:`593` （``灵活函数和变量注解``）里引入的类型，可以用上下文特定元数据（``Annotated`` "
"的参数可变，也可能用它的多个组成部分）装饰现有的类型。具体来说，就是类型提示 ``Annotated[T, x]`` 用元数据 ``x`` 注解类型 "
"``T``。静态分析或运行时都能使用该元数据。库（或工具）处理类型提示 ``Annotated[T, x]`` 时，在元数据 ``x`` "
"不涉及特殊逻辑的情况下，可忽略该类型提示，仅把它当作类型 ``T``。与 ``typing`` 模块中现有的 ``no_type_check`` "
"功能不同，该功能完全禁用了函数或类的类型检查注解，而 ``Annotated`` 类型则允许对 ``T`` 进行静态类型检查（例如，通过 mypy 或 "
"Pyre，可安全地忽略 ``x``），也可以在特定应用程序中实现 ``x`` 的运行时访问。"

#: ../../library/typing.rst:725
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at "
"all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type can"
" scan through the annotations to determine if they are of interest (e.g., "
"using ``isinstance()``)."
msgstr ""
"毕竟，如何解释注解（如有）由处理 ``Annotated`` 类型的工具/库负责。工具/库处理 ``Annotated`` "
"类型时，扫描所有注解以确定是否需要进行处理（例如，使用 ``isinstance()``）。"

#: ../../library/typing.rst:731
msgid ""
"When a tool or a library does not support annotations or encounters an "
"unknown annotation it should just ignore it and treat annotated type as the "
"underlying type."
msgstr "工具/库不支持注解，或遇到未知注解时，应忽略注解，并把注解类型当作底层类型。"

#: ../../library/typing.rst:735
msgid ""
"It's up to the tool consuming the annotations to decide whether the client "
"is allowed to have several annotations on one type and how to merge those "
"annotations."
msgstr "是否允许客户端在一个类型上使用多个注解，以及如何合并这些注解，由处理注解的工具决定。"

#: ../../library/typing.rst:739
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the "
"same (or different) type(s) on any node, the tools or libraries consuming "
"those annotations are in charge of dealing with potential duplicates. For "
"example, if you are doing value range analysis you might allow this::"
msgstr ""
"``Annotated`` "
"类型支持把多个相同（或不同）的单个（或多个）类型注解置于任意节点。因此，使用这些注解的工具/库要负责处理潜在的重复项。例如，执行值范围分析时，应允许以下操作："

#: ../../library/typing.rst:748
msgid ""
"Passing ``include_extras=True`` to :func:`get_type_hints` lets one access "
"the extra annotations at runtime."
msgstr "传递 ``include_extras=True`` 至 :func:`get_type_hints` ，即可在运行时访问额外的注解。"

#: ../../library/typing.rst:751
msgid "The details of the syntax:"
msgstr "语义详情："

#: ../../library/typing.rst:753
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr "``Annotated`` 的第一个参数必须是有效类型。"

#: ../../library/typing.rst:755
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr "支持多个类型标注（``Annotated`` 支持可变参数）："

#: ../../library/typing.rst:760
msgid ""
"``Annotated`` must be called with at least two arguments ( "
"``Annotated[int]`` is not valid)"
msgstr "调用 ``Annotated`` 至少要有两个参数（``Annotated[int]`` 是无效的）"

#: ../../library/typing.rst:763
msgid ""
"The order of the annotations is preserved and matters for equality checks::"
msgstr "注解的顺序会被保留，且影响等价检查："

#: ../../library/typing.rst:770
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr "嵌套 ``Annotated`` 类型会被展平，元数据从最内层注解依序展开："

#: ../../library/typing.rst:777
msgid "Duplicated annotations are not removed::"
msgstr "不移除注解重复项："

#: ../../library/typing.rst:783
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr "``Annotated`` 可用于嵌套或泛型别名："

#: ../../library/typing.rst:794
msgid "Building generic types"
msgstr "构建泛型类型"

#: ../../library/typing.rst:796
msgid ""
"These are not used in annotations. They are building blocks for creating "
"generic types."
msgstr "以下内容是创建泛型类型的基石，但不在注解内使用。"

#: ../../library/typing.rst:800
msgid "Abstract base class for generic types."
msgstr "用于泛型类型的抽象基类。"

#: ../../library/typing.rst:802
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr "泛型类型一般通过继承含一个或多个类型变量的类实例进行声明。例如，泛型映射类型定义如下："

#: ../../library/typing.rst:811
msgid "This class can then be used as follows::"
msgstr "该类的用法如下："

#: ../../library/typing.rst:824
msgid "Type variable."
msgstr "类型变量。"

#: ../../library/typing.rst:826 ../../library/typing.rst:942
msgid "Usage::"
msgstr "用法："

#: ../../library/typing.rst:831
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See :class:`Generic` for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""
"类型变量主要是为静态类型检查器提供支持，用于泛型类型与泛型函数定义的参数。有关泛型类型，详见 :class:`Generic`。泛型函数的写法如下："

#: ../../library/typing.rst:844
msgid ""
"The latter example's signature is essentially the overloading of ``(str, "
"str) -> str`` and ``(bytes, bytes) -> bytes``.  Also note that if the "
"arguments are instances of some subclass of :class:`str`, the return type is"
" still plain :class:`str`."
msgstr ""
"本质上，后例的签名重载了 ``(str, str) -> str`` 与 ``(bytes, bytes) -> bytes``。注意，参数是 "
":class:`str` 子类的实例时，返回类型仍是纯 :class:`str`。"

#: ../../library/typing.rst:849
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, "
":func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""
"在运行时，``isinstance(x, T)`` 会触发 :exc:`TypeError` 异常。一般而言，:func:`isinstance` 和 "
":func:`issubclass` 不应与类型搭配使用。"

#: ../../library/typing.rst:852
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default type variables are invariant.  Alternatively, a type "
"variable may specify an upper bound using ``bound=<type>``. This means that "
"an actual type substituted (explicitly or implicitly) for the type variable "
"must be a subclass of the boundary type, see :pep:`484`."
msgstr ""
"通过 ``covariant=True`` 或 ``contravariant=True`` 可以把类型变量标记为协变量或逆变量。详见 "
":pep:`484`。默认情况下，类型变量是不变量。类型变量还可以用 ``bound=<type>`` "
"指定上限。这里的意思是，（显式或隐式地）取代类型变量的实际类型必须是限定类型的子类，详见 :pep:`484`。"

#: ../../library/typing.rst:862
msgid ""
"``AnyStr`` is a type variable defined as ``AnyStr = TypeVar('AnyStr', str, "
"bytes)``."
msgstr "``AnyStr`` 类型变量的定义为 ``AnyStr = TypeVar('AnyStr', str, bytes)``。"

#: ../../library/typing.rst:865
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr "这里指的是，它可以接受任意同类字符串，但不支持混用不同类别的字符串。例如："

#: ../../library/typing.rst:877
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr "Protocol 类的基类。Protocol 类的定义如下："

#: ../../library/typing.rst:883
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr "这些类主要与静态类型检查器搭配使用，用来识别结构子类型（静态鸭子类型），例如："

#: ../../library/typing.rst:895
msgid ""
"See :pep:`544` for details. Protocol classes decorated with "
":func:`runtime_checkable` (described later) act as simple-minded runtime "
"protocols that check only the presence of given attributes, ignoring their "
"type signatures."
msgstr ""
"详见 :pep:`544`。Protocol 类用 :func:`runtime_checkable` "
"（见下文）装饰，忽略类型签名，仅检查给定属性是否存在，充当简要的运行时协议。"

#: ../../library/typing.rst:900
msgid "Protocol classes can be generic, for example::"
msgstr "Protocol 类可以是泛型，例如："

#: ../../library/typing.rst:910
msgid "Mark a protocol class as a runtime protocol."
msgstr "用于把 Protocol 类标记为运行时协议。"

#: ../../library/typing.rst:912
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as "
":class:`~collections.abc.Iterable`.  For example::"
msgstr ""
"该协议可以与 :func:`isinstance` 和 :func:`issubclass` 一起使用。应用于非协议的类时，会触发 "
":exc:`TypeError`。该指令支持简易结构检查，与 :mod:`collections.abc` 的 "
":class:`~collections.abc.Iterable` 非常类似，只擅长做一件事。  例如："

#: ../../library/typing.rst:925
msgid ""
":func:`runtime_checkable` will check only the presence of the required "
"methods, not their type signatures! For example, :class:`builtins.complex "
"<complex>` implements :func:`__float__`, therefore it passes an "
":func:`issubclass` check against :class:`SupportsFloat`. However, the "
"``complex.__float__`` method exists only to raise a :class:`TypeError` with "
"a more informative message."
msgstr ""
":func:`runtime_checkable` 只检查所需方法是否存在，但却不检查类型签名！ 例如，:class:`builtins.complex"
" <complex>` 支持 :func:`__float__`，因此，它能通过 :class:`SupportsFloat`  的 "
":func:`issubclass` 检查。 然而，``complex.__float__`` 方法其实只是为了触发含更多信息的 "
":class:`TypeError`。"

#: ../../library/typing.rst:934
msgid "Other special directives"
msgstr "其他特殊指令"

#: ../../library/typing.rst:936
msgid ""
"These are not used in annotations. They are building blocks for declaring "
"types."
msgstr "这些特殊指令是声明类型的基石，但不在注解内使用。"

#: ../../library/typing.rst:940
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ":func:`collections.namedtuple` 的类型版本。"

#: ../../library/typing.rst:948
msgid "This is equivalent to::"
msgstr "相当于："

#: ../../library/typing.rst:952
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr "为字段提供默认值，要在类体内赋值："

#: ../../library/typing.rst:961
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr "带默认值的字段必须在不带默认值的字段后面。"

#: ../../library/typing.rst:963
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict"
" that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute both of which are part of the namedtuple API.)"
msgstr ""
"生成的类具有 ``__annotations__`` 这个附加属性，提供了映射字段名与字段类型的字典。（字段名在 ``_fields`` "
"属性内，默认值在 ``_field_defaults`` 属性内，这两项都是命名元组 API 的组成部分。）"

#: ../../library/typing.rst:969
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` 子类也支持文档字符串与方法："

#: ../../library/typing.rst:979
msgid "Backward-compatible usage::"
msgstr "反向兼容用法："

#: ../../library/typing.rst:983
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "添加了对 :pep:`526` 中变量注解句法的支持。"

#: ../../library/typing.rst:986
msgid "Added support for default values, methods, and docstrings."
msgstr "添加了对默认值、方法、文档字符串的支持。"

#: ../../library/typing.rst:989
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"``_field_types`` 和 ``__annotations__`` 属性现已使用常规字典，不再使用 ``OrderedDict`` 实例。"

#: ../../library/typing.rst:993
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr "移除了 ``_field_types`` 属性， 改用具有相同信息，但更标准的  ``__annotations__`` 属性。"

#: ../../library/typing.rst:999
msgid ""
"A helper function to indicate a distinct type to a typechecker, see "
":ref:`distinct`. At runtime it returns a function that returns its argument."
" Usage::"
msgstr "用于为类型检查器标明不同类型的辅助函数，详见 :ref:`distinct`。在运行时，它返回一个返回其参数的函数。用法如下："

#: ../../library/typing.rst:1010
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr "把类型提示添加至字典的特殊构造器。在运行时，它是纯 :class:`dict`。"

#: ../../library/typing.rst:1013
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` "
"声明一个字典类型，该类型预期所有实例都具有一组键集，其中，每个键都与对应类型的值关联。运行时不检查此预期，而是由类型检查器强制执行。用法如下："

#: ../../library/typing.rst:1029
msgid ""
"The type info for introspection can be accessed via "
"``Point2D.__annotations__`` and ``Point2D.__total__``.  To allow using this "
"feature with older versions of Python that do not support :pep:`526`, "
"``TypedDict`` supports two additional equivalent syntactic forms::"
msgstr ""
"用于内省的类型信息可通过 ``Point2D.__annotations__`` 和 ``Point2D.__total__`` 访问。为了让不支持 "
":pep:`526` 的老版 Python 也能使用此功能，``TypedDict`` 支持两个附加的等价句法形式："

#: ../../library/typing.rst:1037
msgid ""
"By default, all keys must be present in a TypedDict. It is possible to "
"override this by specifying totality. Usage::"
msgstr "默认情况下，所有键都必须列在 TypedDict 里。不过，也可以通过指定 total 参数进行重写。用法如下："

#: ../../library/typing.rst:1045
msgid ""
"This means that a point2D TypedDict can have any of the keys omitted. A type"
" checker is only expected to support a literal False or True as the value of"
" the total argument. True is the default, and makes all items defined in the"
" class body be required."
msgstr ""
"这段代码的意思是，可以省略 point2D 这个 TypedDict 中的任意键。类型检查器只支持字面量 False 或 True 作为 total "
"参数的值。True 是默认值，表明在类体中，必须定义所有项目。"

#: ../../library/typing.rst:1050
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr "更多示例与 ``TypedDict`` 的详细规则，详见 :pep:`589`。"

#: ../../library/typing.rst:1055
msgid "Generic concrete collections"
msgstr "泛型具象容器"

#: ../../library/typing.rst:1058
msgid "Corresponding to built-in types"
msgstr "对应的内置类型"

#: ../../library/typing.rst:1062
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ":class:`dict` 的泛型版本。适用于注解返回类型。注解参数时，最好使用 :class:`Mapping` 等抽象容器类型。"

#: ../../library/typing.rst:1066
msgid "This type can be used as follows::"
msgstr "该类型用法如下："

#: ../../library/typing.rst:1071
msgid ""
":class:`builtins.dict <dict>` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1077
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""
":class:`list` 的泛型版本。适用于注解返回类型。注解参数时，最好使用 :class:`Sequence` 或 "
":class:`Iterable` 等抽象容器类型。"

#: ../../library/typing.rst:1082
msgid "This type may be used as follows::"
msgstr "该类型用法如下："

#: ../../library/typing.rst:1092
msgid ""
":class:`builtins.list <list>` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1098
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""
":class:`builtins.set <set>` 的泛型版本。适用于注解返回类型。注解参数时，最好使用 :class:`AbstractSet` "
"等抽象容器类型。"

#: ../../library/typing.rst:1102
msgid ""
":class:`builtins.set <set>` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1108
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ":class:`builtins.frozenset <frozenset>` 的泛型版本。"

#: ../../library/typing.rst:1110
msgid ""
":class:`builtins.frozenset <frozenset>` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1114
msgid ":data:`Tuple` is a special form."
msgstr ":data:`Tuple` 是一种特殊形式。"

#: ../../library/typing.rst:1117
msgid "Corresponding to types in :mod:`collections`"
msgstr ":mod:`collections` 对应类型"

#: ../../library/typing.rst:1121
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ":class:`collections.defaultdict` 的泛型版本。"

#: ../../library/typing.rst:1125
msgid ""
":class:`collections.defaultdict` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1131
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ":class:`collections.OrderedDict` 的泛型版本。"

#: ../../library/typing.rst:1135
msgid ""
":class:`collections.OrderedDict` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1141
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ":class:`collections.ChainMap` 的泛型版本。"

#: ../../library/typing.rst:1146
msgid ""
":class:`collections.ChainMap` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1152
msgid "A generic version of :class:`collections.Counter`."
msgstr ":class:`collections.Counter` 的泛型版本。"

#: ../../library/typing.rst:1157
msgid ""
":class:`collections.Counter` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`collections.Counter` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1163
msgid "A generic version of :class:`collections.deque`."
msgstr ":class:`collections.deque` 的泛型版本。"

#: ../../library/typing.rst:1168
msgid ""
":class:`collections.deque` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`collections.deque` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1173
msgid "Other concrete types"
msgstr "其他具象类型"

#: ../../library/typing.rst:1179
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`. These types are also in the ``typing.io`` namespace."
msgstr ""
"泛型类型 ``IO[AnyStr]`` 及其子类 ``TextIO(IO[str])`` 与 ``BinaryIO(IO[bytes])`` 表示由 "
":func:`open` 返回的 I/O 流的类型。 这些类型也在 ``typing.io`` 命名空间里。"

#: ../../library/typing.rst:1187
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``. These types are "
"also in the ``typing.re`` namespace."
msgstr ""
"这些类型对应的是从 :func:`re.compile` 与 :func:`re.match`.返回的类型。这些类型（及对应的函数）是 "
"``AnyStr`` 的泛型，且可以通过 "
"``Pattern[str]``、``Pattern[bytes]``、``Match[str]``、``Match[bytes]`` "
"指定具体类型。这些类型也在 ``typing.re`` 的命名空间里。"

#: ../../library/typing.rst:1194
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":mod:`re` 模块中的 ``Pattern`` 与 ``Match`` 类现已支持 ``[]``。详见 :pep:`585` 与 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1200
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""
"``Text`` 是 ``str`` 的别名。提供了对 Python 2 代码的向下兼容：Python 2 中，``Text`` 是 "
"``unicode`` 的别名。"

#: ../../library/typing.rst:1204
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr "使用 ``Text`` 时，值中必须包含 unicode 字符串，以兼容 Python 2 和 Python 3："

#: ../../library/typing.rst:1213
msgid "Abstract Base Classes"
msgstr "抽象基类"

#: ../../library/typing.rst:1216
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 对应的容器"

#: ../../library/typing.rst:1220
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ":class:`collections.abc.Set`  的泛型版本。"

#: ../../library/typing.rst:1222
msgid ""
":class:`collections.abc.Set` now supports ``[]``. See :pep:`585` and :ref"
":`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1228
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ":class:`collections.abc.ByteString` 的泛型版本。"

#: ../../library/typing.rst:1230
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and "
":class:`memoryview` of byte sequences."
msgstr "该类型代表了 :class:`bytes`、:class:`bytearray`、:class:`memoryview` 等字节序列类型。"

#: ../../library/typing.rst:1233
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr "作为该类型的简称，:class:`bytes` 可用于标注上述任意类型的参数。"

#: ../../library/typing.rst:1236
msgid ""
":class:`collections.abc.ByteString` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ByteString` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1242
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ":class:`collections.abc.Collection` 的泛型版本。"

#: ../../library/typing.rst:1246
msgid ""
":class:`collections.abc.Collection` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` 现已支持 ``[]``。详见 :pep:`585` 与 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1252
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ":class:`collections.abc.Container` 的泛型版本。"

#: ../../library/typing.rst:1254
msgid ""
":class:`collections.abc.Container` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1260
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ":class:`collections.abc.ItemsView` 的泛型版本。"

#: ../../library/typing.rst:1262
msgid ""
":class:`collections.abc.ItemsView` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1268
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ":class:`collections.abc.KeysView` 的泛型版本。"

#: ../../library/typing.rst:1270
msgid ""
":class:`collections.abc.KeysView` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1276
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used"
" as follows::"
msgstr ":class:`collections.abc.Mapping` 的泛型版本。用法如下："

#: ../../library/typing.rst:1282
msgid ""
":class:`collections.abc.Mapping` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1288
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ":class:`collections.abc.MappingView` 的泛型版本。"

#: ../../library/typing.rst:1290
msgid ""
":class:`collections.abc.MappingView` now supports ``[]``. See :pep:`585` and"
" :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1296
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ":class:`collections.abc.MutableMapping` 的泛型版本。"

#: ../../library/typing.rst:1298
msgid ""
":class:`collections.abc.MutableMapping` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1304
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ":class:`collections.abc.MutableSequence` 的泛型版本。"

#: ../../library/typing.rst:1306
msgid ""
":class:`collections.abc.MutableSequence` now supports ``[]``. See :pep:`585`"
" and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1312
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ":class:`collections.abc.MutableSet` 的泛型版本。"

#: ../../library/typing.rst:1314
msgid ""
":class:`collections.abc.MutableSet` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1320
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ":class:`collections.abc.Sequence` 的泛型版本。"

#: ../../library/typing.rst:1322
msgid ""
":class:`collections.abc.Sequence` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1328
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ":class:`collections.abc.ValuesView` 的泛型版本。"

#: ../../library/typing.rst:1330
msgid ""
":class:`collections.abc.ValuesView` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1335
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 对应的其他类型"

#: ../../library/typing.rst:1339
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ":class:`collections.abc.Iterable` 的泛型版本。"

#: ../../library/typing.rst:1341
msgid ""
":class:`collections.abc.Iterable` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1347
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ":class:`collections.abc.Iterator` 的泛型版本。"

#: ../../library/typing.rst:1349
msgid ""
":class:`collections.abc.Iterator` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1355
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr "生成器可以由泛型类型 ``Generator[YieldType, SendType, ReturnType]`` 注解。例如："

#: ../../library/typing.rst:1364
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""
"注意，与 typing 模块里的其他泛型不同， :class:`Generator` 的 ``SendType`` "
"属于逆变行为，不是协变行为，也是不变行为。"

#: ../../library/typing.rst:1368
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr "如果生成器只产生值，可将 ``SendType`` 与 ``ReturnType`` 设为 ``None``："

#: ../../library/typing.rst:1376
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr "此外，还可以把生成器的返回类型注解为 ``Iterable[YieldType]`` 或 ``Iterator[YieldType]``："

#: ../../library/typing.rst:1384
msgid ""
":class:`collections.abc.Generator` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1390
msgid "An alias to :class:`collections.abc.Hashable`"
msgstr ":class:`collections.abc.Hashable` 的别名。"

#: ../../library/typing.rst:1394
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ":class:`collections.abc.Reversible` 的泛型版本。"

#: ../../library/typing.rst:1396
msgid ""
":class:`collections.abc.Reversible` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1402
msgid "An alias to :class:`collections.abc.Sized`"
msgstr ":class:`collections.abc.Sized` 的别名。"

#: ../../library/typing.rst:1405
msgid "Asynchronous programming"
msgstr "异步编程"

#: ../../library/typing.rst:1409
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""
":class:`collections.abc.Coroutine` 的泛型版本。类型变量的差异和顺序与 :class:`Generator` "
"的内容相对应，例如："

#: ../../library/typing.rst:1422
msgid ""
":class:`collections.abc.Coroutine` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1428
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr "异步生成器可由泛型类型 ``AsyncGenerator[YieldType, SendType]`` 注解。例如："

#: ../../library/typing.rst:1437
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""
"与常规生成器不同，异步生成器不能返回值，因此没有 ``ReturnType`` 类型参数。 与 :class:`Generator` "
"类似，``SendType`` 也属于逆变行为。"

#: ../../library/typing.rst:1441
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr "如果生成器只产生值，可将 ``SendType`` 设置为 ``None``："

#: ../../library/typing.rst:1449
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"此外，可用 ``AsyncIterable[YieldType]`` 或 ``AsyncIterator[YieldType]`` "
"注解生成器的返回类型："

#: ../../library/typing.rst:1459
msgid ""
":class:`collections.abc.AsyncGenerator` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1465
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ":class:`collections.abc.AsyncIterable` 的泛型版本。"

#: ../../library/typing.rst:1469
msgid ""
":class:`collections.abc.AsyncIterable` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1475
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ":class:`collections.abc.AsyncIterator` 的泛型版本。"

#: ../../library/typing.rst:1479
msgid ""
":class:`collections.abc.AsyncIterator` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1485
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ":class:`collections.abc.Awaitable` 的泛型版本。"

#: ../../library/typing.rst:1489
msgid ""
":class:`collections.abc.Awaitable` now supports ``[]``. See :pep:`585` and "
":ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` 现已支持 ``[]``。详见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:1495
msgid "Context manager types"
msgstr "上下文管理器类型"

#: ../../library/typing.rst:1499
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ":class:`contextlib.AbstractContextManager` 的泛型版本。"

#: ../../library/typing.rst:1504
msgid ""
":class:`contextlib.AbstractContextManager` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` 现已支持 ``[]``。详见 :pep:`585` 和 :ref"
":`types-genericalias`。"

#: ../../library/typing.rst:1510
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ":class:`contextlib.AbstractAsyncContextManager` 的泛型版本。"

#: ../../library/typing.rst:1515
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` 现已支持 ``[]``。详见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:1520
msgid "Protocols"
msgstr "协议"

#: ../../library/typing.rst:1522
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr "这些协议由 :func:`runtime_checkable` 装饰。"

#: ../../library/typing.rst:1526
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr "含抽象方法 ``__abs__`` 的抽象基类，是其返回类型里的协变量。"

#: ../../library/typing.rst:1531
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "含抽象方法 ``__bytes__`` 的抽象基类。"

#: ../../library/typing.rst:1535
msgid "An ABC with one abstract method ``__complex__``."
msgstr "含抽象方法 ``__complex__`` 的抽象基类。"

#: ../../library/typing.rst:1539
msgid "An ABC with one abstract method ``__float__``."
msgstr "含抽象方法 ``__float__`` 的抽象基类。"

#: ../../library/typing.rst:1543
msgid "An ABC with one abstract method ``__index__``."
msgstr "含抽象方法 ``__index__`` 的抽象基类。"

#: ../../library/typing.rst:1549
msgid "An ABC with one abstract method ``__int__``."
msgstr "含抽象方法 ``__int__`` 的抽象基类。"

#: ../../library/typing.rst:1553
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr "含抽象方法 ``__round__`` 的抽象基类，是其返回类型的协变量。"

#: ../../library/typing.rst:1557
msgid "Functions and decorators"
msgstr "函数与装饰器"

#: ../../library/typing.rst:1561
msgid "Cast a value to a type."
msgstr "把值强制转换为类型。"

#: ../../library/typing.rst:1563
msgid ""
"This returns the value unchanged.  To the type checker this signals that the"
" return value has the designated type, but at runtime we intentionally don't"
" check anything (we want this to be as fast as possible)."
msgstr "不变更返回值。对类型检查器而言，代表了返回值具有指定的类型，但运行时故意不做任何检查（以便让检查速度尽量快）。"

#: ../../library/typing.rst:1570
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one "
"non-``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""
"``@overload`` 装饰器可以修饰支持多个不同参数类型组合的函数或方法。``@overload`` - 装饰定义的系列必须紧跟一个非 "
"``@overload``-装饰定义（用于同一个函数/方法）。``@overload``-装饰定义仅是为了协助类型检查器， 因为该装饰器会被非 "
"``@overload``-装饰定义覆盖，后者用于运行时，而且会被类型检查器忽略。在运行时直接调用 ``@overload`` 装饰的函数会触发 "
":exc:`NotImplementedError`。下面的重载示例给出了比联合类型或类型变量更精准的类型："

#: ../../library/typing.rst:1594
msgid "See :pep:`484` for details and comparison with other typing semantics."
msgstr "详见 :pep:`484`，与其他类型语义进行对比。"

#: ../../library/typing.rst:1598
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be"
" overridden, and the decorated class cannot be subclassed. For example::"
msgstr "告知类型检查器被装饰的方法不能被覆盖，且被装饰的类不能作为子类的装饰器，例如："

#: ../../library/typing.rst:1623
msgid "Decorator to indicate that annotations are not type hints."
msgstr "标明注解不是类型提示的装饰器。"

#: ../../library/typing.rst:1625
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies"
" recursively to all methods defined in that class (but not to methods "
"defined in its superclasses or subclasses)."
msgstr "用作类或函数的 :term:`decorator`。用于类时，递归地应用于该类中定义的所有方法，（但不影响超类或子类中定义的方法）。"

#: ../../library/typing.rst:1629
msgid "This mutates the function(s) in place."
msgstr "本方法可直接修改函数。"

#: ../../library/typing.rst:1633
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "让其他装饰器具有 :func:`no_type_check` 效果的装饰器。"

#: ../../library/typing.rst:1635
msgid ""
"This wraps the decorator with something that wraps the decorated function in"
" :func:`no_type_check`."
msgstr "本装饰器用 :func:`no_type_check` 里的装饰函数打包其他装饰器。"

#: ../../library/typing.rst:1640
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr "标记类或函数内不可用于运行时的装饰器。"

#: ../../library/typing.rst:1642
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr "在运行时，该装饰器本身不可用。实现返回的是私有类实例时，它主要是用于标记在类型存根文件中定义的类。"

#: ../../library/typing.rst:1653
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr "注意，建议不要返回私有类实例，最好将之设为公共类。"

#: ../../library/typing.rst:1657
msgid "Introspection helpers"
msgstr "内省辅助器"

#: ../../library/typing.rst:1661
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr "返回函数、方法、模块、类对象的类型提示的字典。"

#: ../../library/typing.rst:1664
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""
"一般情况下，与 ``obj.__annotations__`` 相同。此外，可通过在 ``globals`` 与 ``locals`` "
"命名空间里进行评估，以此来处理编码为字符串字面量的前向引用。如有需要，在默认值设置为 ``None`` 时，可为函数或方法注解添加 "
"``Optional[t]``。对于类 ``C``，则返回由所有 ``__annotations__`` 与 ``C.__mro__`` "
"逆序合并而成的字典。"

#: ../../library/typing.rst:1672
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example::"
msgstr ""
"本函数以递归地方式用 ``T`` 替换所有 ``Annotated[T, ...]``， 除非将 ``include_extras`` 的值设置为 "
"``True`` （详见 :class:`Annotated`）。例如："

#: ../../library/typing.rst:1685
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr ":pep:`593` 的组成部分，添加了 ``include_extras`` 参数。"

#: ../../library/typing.rst:1691
msgid ""
"Provide basic introspection for generic types and special typing forms."
msgstr "为泛型类型与特殊类型形式提供了基本的内省功能。"

#: ../../library/typing.rst:1693
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or "
":mod:`collections` class, it gets normalized to the original class. If ``X``"
" is a :class:`Union` or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original"
" arguments ``[Y, Z, ...]`` due to type caching. For unsupported objects "
"return ``None`` and ``()`` correspondingly. Examples::"
msgstr ""
"对于 ``X[Y, Z, ...]`` 形式的类型对象，这些函数返回 ``X`` 与 ``(Y, Z, ...)``。如果 ``X`` 是内置对象或 "
":mod:`collections` class 的泛型别名， 会将其标准化为原始类。如果 ``X`` 是包含在其他泛型类型中的 "
":class:`Union` 或 :class:`Literal`，``(Y, Z, ...)`` 的顺序会因类型缓存，而与原始参数 ``[Y, Z, "
"...]`` 的顺序不同。对于不支持的对象会相应地返回 ``None`` 或 ``()``。例如："

#: ../../library/typing.rst:1712
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"用于字符串前向引用的内部类型表示的类。 例如，``List[\"SomeClass\"]`` 会被隐式转换为 "
"``List[ForwardRef(\"SomeClass\")]``。 这个类不应由用户来实例化，但可以由内省工具使用。"

#: ../../library/typing.rst:1718
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
":pep:`585` 泛型类型例如 ``list[\"SomeClass\"]`` 将不会被隐式地转换为 "
"``list[ForwardRef(\"SomeClass\")]`` 因而将不会自动解析为 ``list[SomeClass]``。"

#: ../../library/typing.rst:1725
msgid "Constant"
msgstr "常量"

#: ../../library/typing.rst:1729
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr "被第三方静态类型检查器假定为 ``True`` 的特殊常量。在运行时为 ``False``。用法如下："

#: ../../library/typing.rst:1738
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
"第一个类型注解必须用引号标注，才能把它当作“前向引用”，从而在解释器运行时中隐藏 ``expensive_mod`` "
"引用。局部变量的类型注释不会被评估，因此，第二个注解不需要用引号引起来。"

#: ../../library/typing.rst:1745
msgid ""
"If ``from __future__ import annotations`` is used in Python 3.7 or later, "
"annotations are not evaluated at function definition time. Instead, they are"
" stored as strings in ``__annotations__``, This makes it unnecessary to use "
"quotes around the annotation. (see :pep:`563`)."
msgstr ""
"Python 3.7 或更高版本中使用 ``from __future__ import`` 时，函数定义时不处理注解， 而是把注解当作字符串存在 "
"``__annotations__`` 里，这样就不必为注解使用引号。（详见 :pep:`563`）。"
