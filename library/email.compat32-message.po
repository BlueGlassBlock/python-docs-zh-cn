# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Kevin Deng <kevindeng55+transifex@gmail.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:18+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.compat32-message.rst:4
msgid ""
":mod:`email.message.Message`: Representing an email message using the "
":data:`~email.policy.compat32` API"
msgstr ""
":mod:`email.message.Message`: 使用 :data:`~email.policy.compat32` API "
"来表示电子邮件消息"

#: ../../library/email.compat32-message.rst:12
msgid ""
"The :class:`Message` class is very similar to the "
":class:`~email.message.EmailMessage` class, without the methods added by "
"that class, and with the default behavior of certain other methods being "
"slightly different.  We also document here some methods that, while "
"supported by the :class:`~email.message.EmailMessage` class, are not "
"recommended unless you are dealing with legacy code."
msgstr ""
":class:`Message` 类与 :class:`~email.message.EmailMessage` "
"类非常相似，但没有该类所添加的方法，并且某些方法的默认行为也略有不同。 我们还在这里记录了一些虽然被 "
":class:`~email.message.EmailMessage` 类所支持但并不推荐的方法，除非你是在处理旧有代码。"

#: ../../library/email.compat32-message.rst:19
msgid "The philosophy and structure of the two classes is otherwise the same."
msgstr "在其他情况下这两个类的理念和结构都是相同的。"

#: ../../library/email.compat32-message.rst:21
msgid ""
"This document describes the behavior under the default (for "
":class:`Message`) policy :attr:`~email.policy.Compat32`.  If you are going "
"to use another policy, you should be using the "
":class:`~email.message.EmailMessage` class instead."
msgstr ""
"本文档描述了默认 (对于 :class:`Message`) 策略 :attr:`~email.policy.Compat32` 之下的行为。 "
"如果你要使用其他策略，你应当改用 :class:`~email.message.EmailMessage` 类。"

#: ../../library/email.compat32-message.rst:25
msgid ""
"An email message consists of *headers* and a *payload*.  Headers must be "
":rfc:`5233` style names and values, where the field name and value are "
"separated by a colon.  The colon is not part of either the field name or the"
" field value.  The payload may be a simple text message, or a binary object,"
" or a structured sequence of sub-messages each with their own set of headers"
" and their own payload.  The latter type of payload is indicated by the "
"message having a MIME type such as :mimetype:`multipart/\\*` or "
":mimetype:`message/rfc822`."
msgstr ""
"电子邮件消息是由多个 *标头* 和一个 *payload* 载荷组成的。 标头必须为 :rfc:`5233` 风格的名称和值，其中字段名和值由冒号分隔。"
" 冒号不是字段名或字段值的组成部分。 载荷可以是简单的文本消息，或是二进制对象，或是多个子消息的结构化序列，每个子消息都有自己的标头集合和自己的载荷。 "
"后一种类型的载荷是由具有 :mimetype:`multipart/\\*` 或 :mimetype:`message/rfc822` 等 MIME "
"类型的消息来指明的。"

#: ../../library/email.compat32-message.rst:34
msgid ""
"The conceptual model provided by a :class:`Message` object is that of an "
"ordered dictionary of headers with additional methods for accessing both "
"specialized information from the headers, for accessing the payload, for "
"generating a serialized version of the message, and for recursively walking "
"over the object tree.  Note that duplicate headers are supported but special"
" methods must be used to access them."
msgstr ""
":class:`Message` "
"对象所提供了概念化模型是由标头组成的有序字典，加上用于访问标头中的特殊信息以及访问载荷的额外方法，以便能生成消息的序列化版本，并递归地遍历对象树。 "
"请注意重复的标头是受支持的，但必须使用特殊的方法来访问它们。"

#: ../../library/email.compat32-message.rst:41
msgid ""
"The :class:`Message` pseudo-dictionary is indexed by the header names, which"
" must be ASCII values.  The values of the dictionary are strings that are "
"supposed to contain only ASCII characters; there is some special handling "
"for non-ASCII input, but it doesn't always produce the correct results.  "
"Headers are stored and returned in case-preserving form, but field names are"
" matched case-insensitively.  There may also be a single envelope header, "
"also known as the *Unix-From* header or the ``From_`` header.  The *payload*"
" is either a string or bytes, in the case of simple message objects, or a "
"list of :class:`Message` objects, for MIME container documents (e.g. "
":mimetype:`multipart/\\*` and :mimetype:`message/rfc822`)."
msgstr ""
":class:`Message` 伪字典以标头名作为索引，标头名必须为 ASCII 值。 字典的值为应当只包含 ASCII 字符的字符串；对于非 "
"ASCII 输入有一些特殊处理，但这并不总能产生正确的结果。 标头以保留原大小写的形式存储和返回，但字段名称匹配对大小写不敏感。 "
"还可能会有一个单独的封包标头，也称 *Unix-From* 标头或 ``From_`` 标头。 *载荷* "
"对于简单消息对象的情况是一个字符串或字节串，对于 MIME 容器文档的情况 (例如 :mimetype:`multipart/\\*` 和 "
":mimetype:`message/rfc822`) 则是一个 :class:`Message` 对象。"

#: ../../library/email.compat32-message.rst:52
msgid "Here are the methods of the :class:`Message` class:"
msgstr "以下是 :class:`Message` 类的方法:"

#: ../../library/email.compat32-message.rst:57
msgid ""
"If *policy* is specified (it must be an instance of a :mod:`~email.policy` "
"class) use the rules it specifies to update and serialize the representation"
" of the message.  If *policy* is not set, use the :class:`compat32 "
"<email.policy.Compat32>` policy, which maintains backward compatibility with"
" the Python 3.2 version of the email package.  For more information see the "
":mod:`~email.policy` documentation."
msgstr ""
"如果指定了 *policy* (它必须为 :mod:`~email.policy` 类的实例) 则使用它所设置的规则来更新和序列化消息的表示形式。 "
"如果未设置 *policy*，则使用 :class:`compat32 <email.policy.Compat32>` 策略，该策略会保持对 "
"Python 3.2 版 email 包的向下兼容性。 更多信息请参阅 :mod:`~email.policy` 文档。"

#: ../../library/email.compat32-message.rst:64
msgid "The *policy* keyword argument was added."
msgstr "增加了 *policy* 关键字参数。"

#: ../../library/email.compat32-message.rst:69
msgid ""
"Return the entire message flattened as a string.  When optional *unixfrom* "
"is true, the envelope header is included in the returned string. *unixfrom* "
"defaults to ``False``.  For backward compatibility reasons, *maxheaderlen* "
"defaults to ``0``, so if you want a different value you must override it "
"explicitly (the value specified for *max_line_length* in the policy will be "
"ignored by this method).  The *policy* argument may be used to override the "
"default policy obtained from the message instance. This can be used to "
"control some of the formatting produced by the method, since the specified "
"*policy* will be passed to the ``Generator``."
msgstr ""
"以展平的字符串形式返回整个消息对象。 或可选的 *unixfrom* 为真值，返回的字符串会包括封包标头。 *unixfrom* 的默认值是 "
"``False``。 出于保持向下兼容性的原因，*maxheaderlen* 的默认值是 "
"``0``，因此如果你想要不同的值你必须显式地重载它（在策略中为 *max_line_length* 指定的值将被此方法忽略）。 *policy* "
"参数可被用于覆盖从消息实例获取的默认策略。 这可以用来对该方法所输出的格式进行一些控制，因为指定的 *policy* 将被传递给 "
"``Generator``。"

#: ../../library/email.compat32-message.rst:79
#: ../../library/email.compat32-message.rst:121
msgid ""
"Flattening the message may trigger changes to the :class:`Message` if "
"defaults need to be filled in to complete the transformation to a string "
"(for example, MIME boundaries may be generated or modified)."
msgstr ""
"如果需要填充默认值以完成对字符串的转换则展平消息可能触发对 :class:`Message` 的修改（例如，MIME 边界可能会被生成或被修改）。"

#: ../../library/email.compat32-message.rst:83
msgid ""
"Note that this method is provided as a convenience and may not always format"
" the message the way you want.  For example, by default it does not do the "
"mangling of lines that begin with ``From`` that is required by the unix mbox"
" format.  For more flexibility, instantiate a "
":class:`~email.generator.Generator` instance and use its "
":meth:`~email.generator.Generator.flatten` method directly.  For example::"
msgstr ""
"请注意此方法是出于便捷原因提供的，可能无法总是以你想要的方式格式化消息。 例如，在默认情况下它不会按 unix mbox 格式的要求对以 "
"``From`` 打头的行执行调整。 为了获得更高灵活性，请实例化一个 :class:`~email.generator.Generator` "
"实例并直接使用其 :meth:`~email.generator.Generator.flatten` 方法。 例如::"

#: ../../library/email.compat32-message.rst:97
msgid ""
"If the message object contains binary data that is not encoded according to "
"RFC standards, the non-compliant data will be replaced by unicode \"unknown "
"character\" code points.  (See also :meth:`.as_bytes` and "
":class:`~email.generator.BytesGenerator`.)"
msgstr ""
"如果消息对象包含未按照 RFC 标准进行编码的二进制数据，则这些不合规数据将被 unicode \"unknown character\" "
"码位值所替代。 （另请参阅 :meth:`.as_bytes` 和 :class:`~email.generator.BytesGenerator`。）"

#: ../../library/email.compat32-message.rst:102
msgid "the *policy* keyword argument was added."
msgstr "增加了 *policy* 关键字参数。"

#: ../../library/email.compat32-message.rst:107
msgid ""
"Equivalent to :meth:`.as_string()`.  Allows ``str(msg)`` to produce a string"
" containing the formatted message."
msgstr ""

#: ../../library/email.compat32-message.rst:113
msgid ""
"Return the entire message flattened as a bytes object.  When optional "
"*unixfrom* is true, the envelope header is included in the returned string."
"  *unixfrom* defaults to ``False``.  The *policy* argument may be used to "
"override the default policy obtained from the message instance. This can be "
"used to control some of the formatting produced by the method, since the "
"specified *policy* will be passed to the ``BytesGenerator``."
msgstr ""

#: ../../library/email.compat32-message.rst:125
msgid ""
"Note that this method is provided as a convenience and may not always format"
" the message the way you want.  For example, by default it does not do the "
"mangling of lines that begin with ``From`` that is required by the unix mbox"
" format.  For more flexibility, instantiate a "
":class:`~email.generator.BytesGenerator` instance and use its "
":meth:`~email.generator.BytesGenerator.flatten` method directly. For "
"example::"
msgstr ""

#: ../../library/email.compat32-message.rst:145
msgid ""
"Equivalent to :meth:`.as_bytes()`.  Allows ``bytes(msg)`` to produce a bytes"
" object containing the formatted message."
msgstr ""

#: ../../library/email.compat32-message.rst:153
msgid ""
"Return ``True`` if the message's payload is a list of sub-\\ "
":class:`Message` objects, otherwise return ``False``.  When "
":meth:`is_multipart` returns ``False``, the payload should be a string "
"object (which might be a CTE encoded binary payload).  (Note that "
":meth:`is_multipart` returning ``True`` does not necessarily mean that "
"\"msg.get_content_maintype() == 'multipart'\" will return the ``True``. For "
"example, ``is_multipart`` will return ``True`` when the :class:`Message` is "
"of type ``message/rfc822``.)"
msgstr ""

#: ../../library/email.compat32-message.rst:165
msgid ""
"Set the message's envelope header to *unixfrom*, which should be a string."
msgstr ""

#: ../../library/email.compat32-message.rst:170
msgid ""
"Return the message's envelope header.  Defaults to ``None`` if the envelope "
"header was never set."
msgstr "返回消息的信封头。如果信封头从未被设置过，默认返回 ``None`` 。"

#: ../../library/email.compat32-message.rst:176
msgid ""
"Add the given *payload* to the current payload, which must be ``None`` or a "
"list of :class:`Message` objects before the call. After the call, the "
"payload will always be a list of :class:`Message` objects.  If you want to "
"set the payload to a scalar object (e.g. a string), use :meth:`set_payload` "
"instead."
msgstr ""

#: ../../library/email.compat32-message.rst:182
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by "
":meth:`~email.message.EmailMessage.set_content` and the related ``make`` and"
" ``add`` methods."
msgstr ""

#: ../../library/email.compat32-message.rst:190
msgid ""
"Return the current payload, which will be a list of :class:`Message` objects"
" when :meth:`is_multipart` is ``True``, or a string when "
":meth:`is_multipart` is ``False``.  If the payload is a list and you mutate "
"the list object, you modify the message's payload in place."
msgstr ""

#: ../../library/email.compat32-message.rst:195
msgid ""
"With optional argument *i*, :meth:`get_payload` will return the *i*-th "
"element of the payload, counting from zero, if :meth:`is_multipart` is "
"``True``.  An :exc:`IndexError` will be raised if *i* is less than 0 or "
"greater than or equal to the number of items in the payload.  If the payload"
" is a string (i.e.  :meth:`is_multipart` is ``False``) and *i* is given, a "
":exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.compat32-message.rst:202
msgid ""
"Optional *decode* is a flag indicating whether the payload should be decoded"
" or not, according to the :mailheader:`Content-Transfer-Encoding` header. "
"When ``True`` and the message is not a multipart, the payload will be "
"decoded if this header's value is ``quoted-printable`` or ``base64``. If "
"some other encoding is used, or :mailheader:`Content-Transfer-Encoding` "
"header is missing, the payload is returned as-is (undecoded).  In all cases "
"the returned value is binary data.  If the message is a multipart and the "
"*decode* flag is ``True``, then ``None`` is returned.  If the payload is "
"base64 and it was not perfectly formed (missing padding, characters outside "
"the base64 alphabet), then an appropriate defect will be added to the "
"message's defect property (:class:`~email.errors.InvalidBase64PaddingDefect`"
" or :class:`~email.errors.InvalidBase64CharactersDefect`, respectively)."
msgstr ""

#: ../../library/email.compat32-message.rst:216
msgid ""
"When *decode* is ``False`` (the default) the body is returned as a string "
"without decoding the :mailheader:`Content-Transfer-Encoding`.  However, for "
"a :mailheader:`Content-Transfer-Encoding` of 8bit, an attempt is made to "
"decode the original bytes using the ``charset`` specified by the :mailheader"
":`Content-Type` header, using the ``replace`` error handler. If no "
"``charset`` is specified, or if the ``charset`` given is not recognized by "
"the email package, the body is decoded using the default ASCII charset."
msgstr ""

#: ../../library/email.compat32-message.rst:225
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by "
":meth:`~email.message.EmailMessage.get_content` and "
":meth:`~email.message.EmailMessage.iter_parts`."
msgstr ""

#: ../../library/email.compat32-message.rst:233
msgid ""
"Set the entire message object's payload to *payload*.  It is the client's "
"responsibility to ensure the payload invariants.  Optional *charset* sets "
"the message's default character set; see :meth:`set_charset` for details."
msgstr ""

#: ../../library/email.compat32-message.rst:237
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by "
":meth:`~email.message.EmailMessage.set_content`."
msgstr ""

#: ../../library/email.compat32-message.rst:244
msgid ""
"Set the character set of the payload to *charset*, which can either be a "
":class:`~email.charset.Charset` instance (see :mod:`email.charset`), a "
"string naming a character set, or ``None``.  If it is a string, it will be "
"converted to a :class:`~email.charset.Charset` instance.  If *charset* is "
"``None``, the ``charset`` parameter will be removed from the :mailheader"
":`Content-Type` header (the message will not be otherwise modified).  "
"Anything else will generate a :exc:`TypeError`."
msgstr ""

#: ../../library/email.compat32-message.rst:252
msgid ""
"If there is no existing :mailheader:`MIME-Version` header one will be added."
"  If there is no existing :mailheader:`Content-Type` header, one will be "
"added with a value of :mimetype:`text/plain`.  Whether the :mailheader"
":`Content-Type` header already exists or not, its ``charset`` parameter will"
" be set to *charset.output_charset*.   If *charset.input_charset* and "
"*charset.output_charset* differ, the payload will be re-encoded to the "
"*output_charset*.  If there is no existing :mailheader:`Content-Transfer-"
"Encoding` header, then the payload will be transfer-encoded, if needed, "
"using the specified :class:`~email.charset.Charset`, and a header with the "
"appropriate value will be added.  If a :mailheader:`Content-Transfer-"
"Encoding` header already exists, the payload is assumed to already be "
"correctly encoded using that :mailheader:`Content-Transfer-Encoding` and is "
"not modified."
msgstr ""

#: ../../library/email.compat32-message.rst:266
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the *charset* parameter of the "
":meth:`email.emailmessage.EmailMessage.set_content` method."
msgstr ""

#: ../../library/email.compat32-message.rst:274
msgid ""
"Return the :class:`~email.charset.Charset` instance associated with the "
"message's payload."
msgstr ""

#: ../../library/email.compat32-message.rst:277
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class it always returns ``None``."
msgstr ""

#: ../../library/email.compat32-message.rst:282
msgid ""
"The following methods implement a mapping-like interface for accessing the "
"message's :rfc:`2822` headers.  Note that there are some semantic "
"differences between these methods and a normal mapping (i.e. dictionary) "
"interface.  For example, in a dictionary there are no duplicate keys, but "
"here there may be duplicate message headers.  Also, in dictionaries there is"
" no guaranteed order to the keys returned by :meth:`keys`, but in a "
":class:`Message` object, headers are always returned in the order they "
"appeared in the original message, or were added to the message later.  Any "
"header deleted and then re-added are always appended to the end of the "
"header list."
msgstr ""

#: ../../library/email.compat32-message.rst:292
msgid ""
"These semantic differences are intentional and are biased toward maximal "
"convenience."
msgstr ""

#: ../../library/email.compat32-message.rst:295
msgid ""
"Note that in all cases, any envelope header present in the message is not "
"included in the mapping interface."
msgstr "还请留意，无论在什么情况下，消息当中的任何信封头字段都不会包含在映射接口当中。"

#: ../../library/email.compat32-message.rst:298
msgid ""
"In a model generated from bytes, any header values that (in contravention of"
" the RFCs) contain non-ASCII bytes will, when retrieved through this "
"interface, be represented as :class:`~email.header.Header` objects with a "
"charset of `unknown-8bit`."
msgstr ""

#: ../../library/email.compat32-message.rst:306
msgid "Return the total number of headers, including duplicates."
msgstr "返回头字段的总数，重复的也计算在内。"

#: ../../library/email.compat32-message.rst:311
msgid ""
"Return ``True`` if the message object has a field named *name*. Matching is "
"done case-insensitively and *name* should not include the trailing colon. "
"Used for the ``in`` operator, e.g.::"
msgstr ""

#: ../../library/email.compat32-message.rst:321
msgid ""
"Return the value of the named header field.  *name* should not include the "
"colon field separator.  If the header is missing, ``None`` is returned; a "
":exc:`KeyError` is never raised."
msgstr ""

#: ../../library/email.compat32-message.rst:325
msgid ""
"Note that if the named field appears more than once in the message's "
"headers, exactly which of those field values will be returned is undefined."
"  Use the :meth:`get_all` method to get the values of all the extant named "
"headers."
msgstr ""

#: ../../library/email.compat32-message.rst:333
msgid ""
"Add a header to the message with field name *name* and value *val*.  The "
"field is appended to the end of the message's existing fields."
msgstr ""

#: ../../library/email.compat32-message.rst:336
msgid ""
"Note that this does *not* overwrite or delete any existing header with the "
"same name.  If you want to ensure that the new header is the only one "
"present in the message with field name *name*, delete the field first, "
"e.g.::"
msgstr ""
"请注意，这个方法 *既不会* 覆盖 *也不会* 删除任何字段名重名的已有字段。如果你确实想保证新字段是整个信息头当中唯一拥有 *name* "
"字段名的字段，你需要先把旧字段删除。例如："

#: ../../library/email.compat32-message.rst:346
msgid ""
"Delete all occurrences of the field with name *name* from the message's "
"headers.  No exception is raised if the named field isn't present in the "
"headers."
msgstr "删除信息头当中字段名匹配 *name* 的所有字段。如果匹配指定名称的字段没有找到，也不会抛出任何异常。"

#: ../../library/email.compat32-message.rst:353
msgid "Return a list of all the message's header field names."
msgstr "以列表形式返回消息头中所有的字段名。"

#: ../../library/email.compat32-message.rst:358
msgid "Return a list of all the message's field values."
msgstr "以列表形式返回消息头中所有的字段值。"

#: ../../library/email.compat32-message.rst:363
msgid ""
"Return a list of 2-tuples containing all the message's field headers and "
"values."
msgstr "以二元元组的列表形式返回消息头中所有的字段名和字段值。"

#: ../../library/email.compat32-message.rst:369
msgid ""
"Return the value of the named header field.  This is identical to "
":meth:`__getitem__` except that optional *failobj* is returned if the named "
"header is missing (defaults to ``None``)."
msgstr ""

#: ../../library/email.compat32-message.rst:373
msgid "Here are some additional useful methods:"
msgstr ""

#: ../../library/email.compat32-message.rst:378
msgid ""
"Return a list of all the values for the field named *name*. If there are no "
"such named headers in the message, *failobj* is returned (defaults to "
"``None``)."
msgstr "返回字段名为 *name* 的所有字段值的列表。如果信息内不存在匹配的字段，返回 *failobj* （其默认值为 ``None`` ）。"

#: ../../library/email.compat32-message.rst:385
msgid ""
"Extended header setting.  This method is similar to :meth:`__setitem__` "
"except that additional header parameters can be provided as keyword "
"arguments.  *_name* is the header field to add and *_value* is the *primary*"
" value for the header."
msgstr ""
"高级头字段设定。这个方法与 :meth:`__setitem__` 类似，不过你可以使用关键字参数为字段提供附加参数。 *_name* 是字段名， "
"*_value* 是字段 *主* 值。"

#: ../../library/email.compat32-message.rst:390
msgid ""
"For each item in the keyword argument dictionary *_params*, the key is taken"
" as the parameter name, with underscores converted to dashes (since dashes "
"are illegal in Python identifiers).  Normally, the parameter will be added "
"as ``key=\"value\"`` unless the value is ``None``, in which case only the "
"key will be added.  If the value contains non-ASCII characters, it can be "
"specified as a three tuple in the format ``(CHARSET, LANGUAGE, VALUE)``, "
"where ``CHARSET`` is a string naming the charset to be used to encode the "
"value, ``LANGUAGE`` can usually be set to ``None`` or the empty string (see "
":rfc:`2231` for other possibilities), and ``VALUE`` is the string value "
"containing non-ASCII code points.  If a three tuple is not passed and the "
"value contains non-ASCII characters, it is automatically encoded in "
":rfc:`2231` format using a ``CHARSET`` of ``utf-8`` and a ``LANGUAGE`` of "
"``None``."
msgstr ""

#: ../../library/email.compat32-message.rst:404
msgid "Here's an example::"
msgstr ""

#: ../../library/email.compat32-message.rst:408
msgid "This will add a header that looks like ::"
msgstr "会添加一个形如下文的头字段："

#: ../../library/email.compat32-message.rst:412
msgid "An example with non-ASCII characters::"
msgstr ""

#: ../../library/email.compat32-message.rst:417
msgid "Which produces ::"
msgstr ""

#: ../../library/email.compat32-message.rst:424
msgid ""
"Replace a header.  Replace the first header found in the message that "
"matches *_name*, retaining header order and field name case.  If no matching"
" header was found, a :exc:`KeyError` is raised."
msgstr ""

#: ../../library/email.compat32-message.rst:431
msgid ""
"Return the message's content type.  The returned string is coerced to lower "
"case of the form :mimetype:`maintype/subtype`.  If there was no :mailheader"
":`Content-Type` header in the message the default type as given by "
":meth:`get_default_type` will be returned.  Since according to :rfc:`2045`, "
"messages always have a default type, :meth:`get_content_type` will always "
"return a value."
msgstr ""

#: ../../library/email.compat32-message.rst:438
msgid ""
":rfc:`2045` defines a message's default type to be :mimetype:`text/plain` "
"unless it appears inside a :mimetype:`multipart/digest` container, in which "
"case it would be :mimetype:`message/rfc822`.  If the :mailheader:`Content-"
"Type` header has an invalid type specification, :rfc:`2045` mandates that "
"the default type be :mimetype:`text/plain`."
msgstr ""

#: ../../library/email.compat32-message.rst:447
msgid ""
"Return the message's main content type.  This is the :mimetype:`maintype` "
"part of the string returned by :meth:`get_content_type`."
msgstr ""
"返回信息的主要内容类型。准确来说，此方法返回的是 :meth:`get_content_type` 方法所返回的形如 "
":mimetype:`maintype/subtype` 的字符串当中的 :mimetype:`maintype` 部分。"

#: ../../library/email.compat32-message.rst:453
msgid ""
"Return the message's sub-content type.  This is the :mimetype:`subtype` part"
" of the string returned by :meth:`get_content_type`."
msgstr ""
"返回信息的子内容类型。准确来说，此方法返回的是 :meth:`get_content_type` 方法所返回的形如 "
":mimetype:`maintype/subtype` 的字符串当中的 :mimetype:`subtype` 部分。"

#: ../../library/email.compat32-message.rst:459
msgid ""
"Return the default content type.  Most messages have a default content type "
"of :mimetype:`text/plain`, except for messages that are subparts of "
":mimetype:`multipart/digest` containers.  Such subparts have a default "
"content type of :mimetype:`message/rfc822`."
msgstr ""
"返回默认的内容类型。绝大多数的信息，其默认内容类型都是 :mimetype:`text/plain` 。作为 "
":mimetype:`multipart/digest` 容器内子部分的信息除外，它们的默认内容类型是 "
":mimetype:`message/rfc822` 。"

#: ../../library/email.compat32-message.rst:467
msgid ""
"Set the default content type.  *ctype* should either be "
":mimetype:`text/plain` or :mimetype:`message/rfc822`, although this is not "
"enforced.  The default content type is not stored in the :mailheader"
":`Content-Type` header."
msgstr ""

#: ../../library/email.compat32-message.rst:475
msgid ""
"Return the message's :mailheader:`Content-Type` parameters, as a list. The "
"elements of the returned list are 2-tuples of key/value pairs, as split on "
"the ``'='`` sign.  The left hand side of the ``'='`` is the key, while the "
"right hand side is the value.  If there is no ``'='`` sign in the parameter "
"the value is the empty string, otherwise the value is as described in "
":meth:`get_param` and is unquoted if optional *unquote* is ``True`` (the "
"default)."
msgstr ""

#: ../../library/email.compat32-message.rst:483
msgid ""
"Optional *failobj* is the object to return if there is no :mailheader"
":`Content-Type` header.  Optional *header* is the header to search instead "
"of :mailheader:`Content-Type`."
msgstr ""

#: ../../library/email.compat32-message.rst:487
#: ../../library/email.compat32-message.rst:525
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the *params* property of the "
"individual header objects returned by the header access methods."
msgstr ""

#: ../../library/email.compat32-message.rst:495
msgid ""
"Return the value of the :mailheader:`Content-Type` header's parameter "
"*param* as a string.  If the message has no :mailheader:`Content-Type` "
"header or if there is no such parameter, then *failobj* is returned "
"(defaults to ``None``)."
msgstr ""

#: ../../library/email.compat32-message.rst:500
msgid ""
"Optional *header* if given, specifies the message header to use instead of "
":mailheader:`Content-Type`."
msgstr ""

#: ../../library/email.compat32-message.rst:503
msgid ""
"Parameter keys are always compared case insensitively.  The return value can"
" either be a string, or a 3-tuple if the parameter was :rfc:`2231` encoded."
"  When it's a 3-tuple, the elements of the value are of the form ``(CHARSET,"
" LANGUAGE, VALUE)``.  Note that both ``CHARSET`` and ``LANGUAGE`` can be "
"``None``, in which case you should consider ``VALUE`` to be encoded in the "
"``us-ascii`` charset.  You can usually ignore ``LANGUAGE``."
msgstr ""

#: ../../library/email.compat32-message.rst:511
msgid ""
"If your application doesn't care whether the parameter was encoded as in "
":rfc:`2231`, you can collapse the parameter value by calling "
":func:`email.utils.collapse_rfc2231_value`, passing in the return value from"
" :meth:`get_param`.  This will return a suitably decoded Unicode string when"
" the value is a tuple, or the original string unquoted if it isn't.  For "
"example::"
msgstr ""

#: ../../library/email.compat32-message.rst:521
msgid ""
"In any case, the parameter value (either the returned string, or the "
"``VALUE`` item in the 3-tuple) is always unquoted, unless *unquote* is set "
"to ``False``."
msgstr ""

#: ../../library/email.compat32-message.rst:534
msgid ""
"Set a parameter in the :mailheader:`Content-Type` header.  If the parameter "
"already exists in the header, its value will be replaced with *value*.  If "
"the :mailheader:`Content-Type` header as not yet been defined for this "
"message, it will be set to :mimetype:`text/plain` and the new parameter "
"value will be appended as per :rfc:`2045`."
msgstr ""

#: ../../library/email.compat32-message.rst:540
msgid ""
"Optional *header* specifies an alternative header to :mailheader:`Content-"
"Type`, and all parameters will be quoted as necessary unless optional "
"*requote* is ``False`` (the default is ``True``)."
msgstr ""

#: ../../library/email.compat32-message.rst:544
msgid ""
"If optional *charset* is specified, the parameter will be encoded according "
"to :rfc:`2231`. Optional *language* specifies the RFC 2231 language, "
"defaulting to the empty string.  Both *charset* and *language* should be "
"strings."
msgstr ""

#: ../../library/email.compat32-message.rst:549
msgid ""
"If *replace* is ``False`` (the default) the header is moved to the end of "
"the list of headers.  If *replace* is ``True``, the header will be updated "
"in place."
msgstr ""
"如果 *replace* 为 ``False`` （默认值），该头字段会被移动到所有头字段的末尾。如果 *replace* 为 ``True`` "
"，字段会被原地更新。"

#: ../../library/email.compat32-message.rst:553
msgid "``replace`` keyword was added."
msgstr "添加了 ``replace`` 关键字。"

#: ../../library/email.compat32-message.rst:558
msgid ""
"Remove the given parameter completely from the :mailheader:`Content-Type` "
"header.  The header will be re-written in place without the parameter or its"
" value.  All values will be quoted as necessary unless *requote* is "
"``False`` (the default is ``True``).  Optional *header* specifies an "
"alternative to :mailheader:`Content-Type`."
msgstr ""

#: ../../library/email.compat32-message.rst:567
msgid ""
"Set the main type and subtype for the :mailheader:`Content-Type` header. "
"*type* must be a string in the form :mimetype:`maintype/subtype`, otherwise "
"a :exc:`ValueError` is raised."
msgstr ""

#: ../../library/email.compat32-message.rst:571
msgid ""
"This method replaces the :mailheader:`Content-Type` header, keeping all the "
"parameters in place.  If *requote* is ``False``, this leaves the existing "
"header's quoting as is, otherwise the parameters will be quoted (the "
"default)."
msgstr ""

#: ../../library/email.compat32-message.rst:576
msgid ""
"An alternative header can be specified in the *header* argument. When the "
":mailheader:`Content-Type` header is set a :mailheader:`MIME-Version` header"
" is also added."
msgstr ""

#: ../../library/email.compat32-message.rst:580
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the ``make_`` and ``add_`` methods."
msgstr ""

#: ../../library/email.compat32-message.rst:587
msgid ""
"Return the value of the ``filename`` parameter of the :mailheader:`Content-"
"Disposition` header of the message.  If the header does not have a "
"``filename`` parameter, this method falls back to looking for the ``name`` "
"parameter on the :mailheader:`Content-Type` header.  If neither is found, or"
" the header is missing, then *failobj* is returned. The returned string will"
" always be unquoted as per :func:`email.utils.unquote`."
msgstr ""
"返回信息头当中 :mailheader:`Content-Disposition` 字段当中名为 ``filename`` "
"的参数值。如果该字段当中没有此参数，该方法会退而寻找 :mailheader:`Content-Type` 字段当中的 ``name`` "
"参数值。如果这个也没有找到，或者这些个字段压根就不存在，返回 *failobj* 。返回的字符串永远按照 "
":func:`email.utils.unquote` 方法去除引号。"

#: ../../library/email.compat32-message.rst:598
msgid ""
"Return the value of the ``boundary`` parameter of the :mailheader:`Content-"
"Type` header of the message, or *failobj* if either the header is missing, "
"or has no ``boundary`` parameter.  The returned string will always be "
"unquoted as per :func:`email.utils.unquote`."
msgstr ""
"返回信息头当中 :mailheader:`Content-Type` 字段当中名为 ``boundary`` "
"的参数值。如果字段当中没有此参数，或者这些个字段压根就不存在，返回 *failobj* 。返回的字符串永远按照 "
":func:`email.utils.unquote` 方法去除引号。"

#: ../../library/email.compat32-message.rst:606
msgid ""
"Set the ``boundary`` parameter of the :mailheader:`Content-Type` header to "
"*boundary*.  :meth:`set_boundary` will always quote *boundary* if necessary."
"  A :exc:`~email.errors.HeaderParseError` is raised if the message object "
"has no :mailheader:`Content-Type` header."
msgstr ""
"将 :mailheader:`Content-Type` 头字段的 ``boundary`` 参数设置为 *boundary* 。 "
":meth:`set_boundary` 方法永远都会在必要的时候为 *boundary* 添加引号。如果信息对象中没有 :mailheader"
":`Content-Type` 头字段，抛出 :exc:`~email.errors.HeaderParseError` 异常。"

#: ../../library/email.compat32-message.rst:611
msgid ""
"Note that using this method is subtly different than deleting the old "
":mailheader:`Content-Type` header and adding a new one with the new boundary"
" via :meth:`add_header`, because :meth:`set_boundary` preserves the order of"
" the :mailheader:`Content-Type` header in the list of headers. However, it "
"does *not* preserve any continuation lines which may have been present in "
"the original :mailheader:`Content-Type` header."
msgstr ""

#: ../../library/email.compat32-message.rst:621
msgid ""
"Return the ``charset`` parameter of the :mailheader:`Content-Type` header, "
"coerced to lower case.  If there is no :mailheader:`Content-Type` header, or"
" if that header has no ``charset`` parameter, *failobj* is returned."
msgstr ""
"返回 :mailheader:`Content-Type` 头字段中的 ``charset`` "
"参数，强制小写。如果字段当中没有此参数，或者这个字段压根不存在，返回 *failobj* 。"

#: ../../library/email.compat32-message.rst:625
msgid ""
"Note that this method differs from :meth:`get_charset` which returns the "
":class:`~email.charset.Charset` instance for the default encoding of the "
"message body."
msgstr ""

#: ../../library/email.compat32-message.rst:631
msgid ""
"Return a list containing the character set names in the message.  If the "
"message is a :mimetype:`multipart`, then the list will contain one element "
"for each subpart in the payload, otherwise, it will be a list of length 1."
msgstr ""
"返回一个包含了信息内所有字符集名字的列表。如果信息是 :mimetype:`multipart` "
"类型的，那么列表当中的每一项都对应其负载的子部分的字符集名字。否则，该列表是一个长度为1的列表。"

#: ../../library/email.compat32-message.rst:635
msgid ""
"Each item in the list will be a string which is the value of the ``charset``"
" parameter in the :mailheader:`Content-Type` header for the represented "
"subpart.  However, if the subpart has no :mailheader:`Content-Type` header, "
"no ``charset`` parameter, or is not of the :mimetype:`text` main MIME type, "
"then that item in the returned list will be *failobj*."
msgstr ""

#: ../../library/email.compat32-message.rst:645
msgid ""
"Return the lowercased value (without parameters) of the message's "
":mailheader:`Content-Disposition` header if it has one, or ``None``.  The "
"possible values for this method are *inline*, *attachment* or ``None`` if "
"the message follows :rfc:`2183`."
msgstr ""
"如果信息的 :mailheader:`Content-Disposition` 头字段存在，返回其字段值；否则返回 ``None`` "
"。返回的值均为小写，不包含参数。如果信息遵循 :rfc:`2183` 标准，则返回值只可能在 *inline* 、 *attachment* 和 "
"``None`` 之间选择。"

#: ../../library/email.compat32-message.rst:654
msgid ""
"The :meth:`walk` method is an all-purpose generator which can be used to "
"iterate over all the parts and subparts of a message object tree, in depth-"
"first traversal order.  You will typically use :meth:`walk` as the iterator "
"in a ``for`` loop; each iteration returns the next subpart."
msgstr ""
":meth:`walk` 方法是一个多功能生成器。它可以被用来以深度优先顺序遍历信息对象树的所有部分和子部分。一般而言， :meth:`walk` "
"会被用作 ``for`` 循环的迭代器，每一次迭代都返回其下一个子部分。"

#: ../../library/email.compat32-message.rst:659
msgid ""
"Here's an example that prints the MIME type of every part of a multipart "
"message structure:"
msgstr "以下例子会打印出一封具有多部分结构之信息的每个部分的 MIME 类型。"

#: ../../library/email.compat32-message.rst:685
msgid ""
"``walk`` iterates over the subparts of any part where :meth:`is_multipart` "
"returns ``True``, even though ``msg.get_content_maintype() == 'multipart'`` "
"may return ``False``.  We can see this in our example by making use of the "
"``_structure`` debug helper function:"
msgstr ""
"``walk`` 会遍历所有 :meth:`is_multipart` 方法返回 ``True`` 的部分之子部分，哪怕 "
"``msg.get_content_maintype() == 'multipart'`` 返回的是 ``False`` 。使用 "
"``_structure`` 除错帮助函数可以帮助我们在下面这个例子当中看清楚这一点："

#: ../../library/email.compat32-message.rst:712
msgid ""
"Here the ``message`` parts are not ``multiparts``, but they do contain "
"subparts. ``is_multipart()`` returns ``True`` and ``walk`` descends into the"
" subparts."
msgstr ""
"在这里， ``message`` 的部分并非 ``multiparts`` ，但是它们真的包含子部分！ ``is_multipart()`` 返回 "
"``True`` ， ``walk`` 也深入进这些子部分中。"

#: ../../library/email.compat32-message.rst:717
msgid ""
":class:`Message` objects can also optionally contain two instance "
"attributes, which can be used when generating the plain text of a MIME "
"message."
msgstr ""

#: ../../library/email.compat32-message.rst:723
msgid ""
"The format of a MIME document allows for some text between the blank line "
"following the headers, and the first multipart boundary string. Normally, "
"this text is never visible in a MIME-aware mail reader because it falls "
"outside the standard MIME armor.  However, when viewing the raw text of the "
"message, or when viewing the message in a non-MIME aware reader, this text "
"can become visible."
msgstr ""
"MIME 文档格式在标头之后的空白行以及第一个多部分的分界字符串之间允许添加一些文本， 通常，此文本在支持 MIME "
"的邮件阅读器中永远不可见，因为它处在标准 MIME 防护范围之外。 但是，当查看消息的原始文本，或当在不支持 MIME "
"的阅读器中查看消息时，此文本会变得可见。"

#: ../../library/email.compat32-message.rst:730
msgid ""
"The *preamble* attribute contains this leading extra-armor text for MIME "
"documents.  When the :class:`~email.parser.Parser` discovers some text after"
" the headers but before the first boundary string, it assigns this text to "
"the message's *preamble* attribute.  When the "
":class:`~email.generator.Generator` is writing out the plain text "
"representation of a MIME message, and it finds the message has a *preamble* "
"attribute, it will write this text in the area between the headers and the "
"first boundary.  See :mod:`email.parser` and :mod:`email.generator` for "
"details."
msgstr ""
"*preamble* 属性包含 MIME 文档开头部分的这些处于保护范围之外的文本。 当 :class:`~email.parser.Parser` "
"在标头之后及第一个分界字符串之前发现一些文本时，它会将这些文本赋值给消息的 *preamble* 属性。 当 "
":class:`~email.generator.Generator` 写出 MIME 消息的纯文本表示形式时，如果它发现消息具有 *preamble*"
" 属性，它将在标头及第一个分界之间区域写出这些文本。 请参阅 :mod:`email.parser` 和 :mod:`email.generator` "
"了解更多细节。"

#: ../../library/email.compat32-message.rst:740
msgid ""
"Note that if the message object has no preamble, the *preamble* attribute "
"will be ``None``."
msgstr "请注意如果消息对象没有前导文本，则 *preamble* 属性将为 ``None``。"

#: ../../library/email.compat32-message.rst:746
msgid ""
"The *epilogue* attribute acts the same way as the *preamble* attribute, "
"except that it contains text that appears between the last boundary and the "
"end of the message."
msgstr ""

#: ../../library/email.compat32-message.rst:750
msgid ""
"You do not need to set the epilogue to the empty string in order for the "
":class:`~email.generator.Generator` to print a newline at the end of the "
"file."
msgstr ""

#: ../../library/email.compat32-message.rst:757
msgid ""
"The *defects* attribute contains a list of all the problems found when "
"parsing this message.  See :mod:`email.errors` for a detailed description of"
" the possible parsing defects."
msgstr ""
"*defects* 属性包含在解析消息时发现的所有问题的列表。 请参阅 :mod:`email.errors` 了解可能的解析缺陷的详细描述。"
