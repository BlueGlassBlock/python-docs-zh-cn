# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# SKY H. <sky19960802@gmail.com>, 2021
# Alpha Du <alphanow@gmail.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2022
# Freesand Leo <yuqinju@163.com>, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-17 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2023\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dis.rst:2
msgid ":mod:`dis` --- Disassembler for Python bytecode"
msgstr ":mod:`dis` --- Python 字节码反汇编器"

#: ../../library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr "**Source code:** :source:`Lib/dis.py`"

#: ../../library/dis.rst:17
msgid ""
"The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by "
"disassembling it. The CPython bytecode which this module takes as an input "
"is defined in the file :file:`Include/opcode.h` and used by the compiler and"
" the interpreter."
msgstr ""
":mod:`dis` 模块通过反汇编支持CPython的 :term:`bytecode` 分析。该模块作为输入的 CPython 字节码在文件 "
":file:`Include/opcode.h` 中定义，并由编译器和解释器使用。"

#: ../../library/dis.rst:24
msgid ""
"Bytecode is an implementation detail of the CPython interpreter.  No "
"guarantees are made that bytecode will not be added, removed, or changed "
"between versions of Python.  Use of this module should not be considered to "
"work across Python VMs or Python releases."
msgstr ""
"字节码是 CPython 解释器的实现细节。不保证不会在Python版本之间添加、删除或更改字节码。不应考虑将此模块的跨 Python VM 或 "
"Python 版本的使用。"

#: ../../library/dis.rst:29
msgid ""
"Use 2 bytes for each instruction. Previously the number of bytes varied by "
"instruction."
msgstr "每条指令使用2个字节。以前字节数因指令而异。"

#: ../../library/dis.rst:33
msgid ""
"The argument of jump, exception handling and loop instructions is now the "
"instruction offset rather than the byte offset."
msgstr "跳转、异常处理和循环指令的参数现在将为指令偏移量而不是字节偏移量。"

#: ../../library/dis.rst:37
msgid ""
"Some instructions are accompanied by one or more inline cache entries, which"
" take the form of :opcode:`CACHE` instructions. These instructions are "
"hidden by default, but can be shown by passing ``show_caches=True`` to any "
":mod:`dis` utility. Furthermore, the interpreter now adapts the bytecode to "
"specialize it for different runtime conditions. The adaptive bytecode can be"
" shown by passing ``adaptive=True``."
msgstr ""
"有些指令带有一个或多个内联缓存条目，它们是采用 :opcode:`CACHE` 指令的形式。 这些指令默认是隐藏的，但可以通过将 "
"``show_caches=True`` 传给任何 :mod:`dis` 工具对象来显示。 "
"此外，解释器现在会适配字节码以使其能针对不同的运行时条件实现专门化。 适配的字节码可通过传入 ``adaptive=True`` 来显示。"

#: ../../library/dis.rst:46
msgid "Example: Given the function :func:`myfunc`::"
msgstr "示例：给出函数 :func:`myfunc`::"

#: ../../library/dis.rst:51
msgid ""
"the following command can be used to display the disassembly of "
":func:`myfunc`:"
msgstr "以下命令可被用来显示 :func:`myfunc` 的反汇编:"

#: ../../library/dis.rst:65
msgid "(The \"2\" is a line number)."
msgstr "(\"2\" 是行号)。"

#: ../../library/dis.rst:68
msgid "Bytecode analysis"
msgstr "字节码分析"

#: ../../library/dis.rst:72
msgid ""
"The bytecode analysis API allows pieces of Python code to be wrapped in a "
":class:`Bytecode` object that provides easy access to details of the "
"compiled code."
msgstr "字节码分析 API 允许将 Python 代码片段包装在 :class:`Bytecode` 对象中，以便轻松访问已编译代码的详细信息。"

#: ../../library/dis.rst:79
msgid ""
"Analyse the bytecode corresponding to a function, generator, asynchronous "
"generator, coroutine, method, string of source code, or a code object (as "
"returned by :func:`compile`)."
msgstr "分析的字节码对应于函数、生成器、异步生成器、协程、方法、源代码字符串或代码对象（由 :func:`compile` 返回）。"

#: ../../library/dis.rst:83
msgid ""
"This is a convenience wrapper around many of the functions listed below, "
"most notably :func:`get_instructions`, as iterating over a :class:`Bytecode`"
" instance yields the bytecode operations as :class:`Instruction` instances."
msgstr ""
"这是下面列出的许多函数的便利包装，最值得注意的是 :func:`get_instructions` ，迭代于 :class:`Bytecode` "
"的实例产生字节码操作 :class:`Instruction` 的实例。"

#: ../../library/dis.rst:87 ../../library/dis.rst:276
msgid ""
"If *first_line* is not ``None``, it indicates the line number that should be"
" reported for the first source line in the disassembled code.  Otherwise, "
"the source line information (if any) is taken directly from the disassembled"
" code object."
msgstr ""
"如果 *first_line* 不是 ``None`` "
"，则表示应该为反汇编代码中的第一个源代码行报告的行号。否则，源行信息（如果有的话）直接来自反汇编的代码对象。"

#: ../../library/dis.rst:92
msgid ""
"If *current_offset* is not ``None``, it refers to an instruction offset in "
"the disassembled code. Setting this means :meth:`.dis` will display a "
"\"current instruction\" marker against the specified opcode."
msgstr ""
"如果 *current_offset* 不是 ``None`` ，则它指的是反汇编代码中的指令偏移量。设置它意味着 :meth:`.dis` "
"将针对指定的操作码显示“当前指令”标记。"

#: ../../library/dis.rst:96
msgid ""
"If *show_caches* is ``True``, :meth:`.dis` will display inline cache entries"
" used by the interpreter to specialize the bytecode."
msgstr "如果 *show_caches* 为 ``True``，:meth:`.dis` 将显示解释器用来专门化字节码的内联缓存条目。"

#: ../../library/dis.rst:99
msgid ""
"If *adaptive* is ``True``, :meth:`.dis` will display specialized bytecode "
"that may be different from the original bytecode."
msgstr "如果 *adaptive* 为 ``True``，:meth:`.dis` 将显示可能不同于原始字节码的专门化字节码。"

#: ../../library/dis.rst:104
msgid ""
"Construct a :class:`Bytecode` instance from the given traceback, setting "
"*current_offset* to the instruction responsible for the exception."
msgstr "从给定回溯构造一个 :class:`Bytecode` 实例，将设置 *current_offset* 为异常负责的指令。"

#: ../../library/dis.rst:109
msgid "The compiled code object."
msgstr "已编译的代码对象。"

#: ../../library/dis.rst:113
msgid "The first source line of the code object (if available)"
msgstr "代码对象的第一个源代码行（如果可用）"

#: ../../library/dis.rst:117
msgid ""
"Return a formatted view of the bytecode operations (the same as printed by "
":func:`dis.dis`, but returned as a multi-line string)."
msgstr "返回字节码操作的格式化视图（与 :func:`dis.dis` 打印相同，但作为多行字符串返回）。"

#: ../../library/dis.rst:122
msgid ""
"Return a formatted multi-line string with detailed information about the "
"code object, like :func:`code_info`."
msgstr "返回带有关于代码对象的详细信息的格式化多行字符串，如 :func:`code_info` 。"

#: ../../library/dis.rst:125 ../../library/dis.rst:166
#: ../../library/dis.rst:218
msgid "This can now handle coroutine and asynchronous generator objects."
msgstr "现在可以处理协程和异步生成器对象。"

#: ../../library/dis.rst:128 ../../library/dis.rst:221
#: ../../library/dis.rst:237 ../../library/dis.rst:264
#: ../../library/dis.rst:285
msgid "Added the *show_caches* and *adaptive* parameters."
msgstr "增加了 *show_caches* 和 *adaptive* 形参。"

#: ../../library/dis.rst:131
msgid "Example:"
msgstr "示例:"

#: ../../library/dis.rst:148
msgid "Analysis functions"
msgstr "分析函数"

#: ../../library/dis.rst:150
msgid ""
"The :mod:`dis` module also defines the following analysis functions that "
"convert the input directly to the desired output. They can be useful if only"
" a single operation is being performed, so the intermediate analysis object "
"isn't useful:"
msgstr ":mod:`dis` 模块还定义了以下分析函数，它们将输入直接转换为所需的输出。如果只执行单个操作，它们可能很有用，因此中间分析对象没用："

#: ../../library/dis.rst:156
msgid ""
"Return a formatted multi-line string with detailed code object information "
"for the supplied function, generator, asynchronous generator, coroutine, "
"method, source code string or code object."
msgstr "返回格式化的多行字符串，其包含详细代码对象信息的用于被提供的函数、生成器、异步生成器、协程、方法、源代码字符串或代码对象。"

#: ../../library/dis.rst:160
msgid ""
"Note that the exact contents of code info strings are highly implementation "
"dependent and they may change arbitrarily across Python VMs or Python "
"releases."
msgstr "请注意，代码信息字符串的确切内容是高度依赖于实现的，它们可能会在Python VM或Python版本中任意更改。"

#: ../../library/dis.rst:172
msgid ""
"Print detailed code object information for the supplied function, method, "
"source code string or code object to *file* (or ``sys.stdout`` if *file* is "
"not specified)."
msgstr ""
"将提供的函数、方法。源代码字符串或代码对象的详细代码对象信息打印到 *file* （如果未指定 *file* ，则为 ``sys.stdout`` ）。"

#: ../../library/dis.rst:176
msgid ""
"This is a convenient shorthand for ``print(code_info(x), file=file)``, "
"intended for interactive exploration at the interpreter prompt."
msgstr "这是 ``print(code_info(x), file=file)`` 的便捷简写，用于在解释器提示符下进行交互式探索。"

#: ../../library/dis.rst:181 ../../library/dis.rst:212
#: ../../library/dis.rst:234 ../../library/dis.rst:261
msgid "Added *file* parameter."
msgstr "添加 *file* 形参。"

#: ../../library/dis.rst:187
msgid ""
"Disassemble the *x* object.  *x* can denote either a module, a class, a "
"method, a function, a generator, an asynchronous generator, a coroutine, a "
"code object, a string of source code or a byte sequence of raw bytecode. For"
" a module, it disassembles all functions. For a class, it disassembles all "
"methods (including class and static methods). For a code object or sequence "
"of raw bytecode, it prints one line per bytecode instruction. It also "
"recursively disassembles nested code objects (the code of comprehensions, "
"generator expressions and nested functions, and the code used for building "
"nested classes). Strings are first compiled to code objects with the "
":func:`compile` built-in function before being disassembled.  If no object "
"is provided, this function disassembles the last traceback."
msgstr ""
"反汇编 *x* 对象。 *x* "
"可以表示模块、类、方法、函数、生成器、异步生成器、协程、代码对象、源代码字符串或原始字节码的字节序列。对于模块，它会反汇编所有功能。对于一个类，它反汇编所有方法（包括类和静态方法）。对于代码对象或原始字节码序列，它每字节码指令打印一行。它还递归地反汇编嵌套代码对象（推导式代码，生成器表达式和嵌套函数，以及用于构建嵌套类的代码）。在被反汇编之前，首先使用"
" :func:`compile` 内置函数将字符串编译为代码对象。如果未提供任何对象，则此函数会反汇编最后一次回溯。"

#: ../../library/dis.rst:200 ../../library/dis.rst:231
#: ../../library/dis.rst:258
msgid ""
"The disassembly is written as text to the supplied *file* argument if "
"provided and to ``sys.stdout`` otherwise."
msgstr "如果提供的话，反汇编将作为文本写入提供的 *file* 参数，否则写入 ``sys.stdout`` 。"

#: ../../library/dis.rst:203
msgid ""
"The maximal depth of recursion is limited by *depth* unless it is ``None``. "
"``depth=0`` means no recursion."
msgstr "递归的最大深度受 *depth* 限制，除非它是 ``None`` 。 ``depth=0`` 表示没有递归。"

#: ../../library/dis.rst:206
msgid ""
"If *show_caches* is ``True``, this function will display inline cache "
"entries used by the interpreter to specialize the bytecode."
msgstr "如果 *show_caches* 为 ``True``，此函数将显示解释器用来专门化字节码的内联缓存条目。"

#: ../../library/dis.rst:209
msgid ""
"If *adaptive* is ``True``, this function will display specialized bytecode "
"that may be different from the original bytecode."
msgstr "如果 *adaptive* 为 ``True``，此函数将显示可能不同于原始字节码的专门化字节码。"

#: ../../library/dis.rst:215
msgid "Implemented recursive disassembling and added *depth* parameter."
msgstr "实现了递归反汇编并添加了 *depth* 参数。"

#: ../../library/dis.rst:227
msgid ""
"Disassemble the top-of-stack function of a traceback, using the last "
"traceback if none was passed.  The instruction causing the exception is "
"indicated."
msgstr "如果没有传递，则使用最后一个回溯来反汇编回溯的堆栈顶部函数。 指示了导致异常的指令。"

#: ../../library/dis.rst:244
msgid ""
"Disassemble a code object, indicating the last instruction if *lasti* was "
"provided.  The output is divided in the following columns:"
msgstr "反汇编代码对象，如果提供了 *lasti* ，则指示最后一条指令。输出分为以下几列："

#: ../../library/dis.rst:247
msgid "the line number, for the first instruction of each line"
msgstr "行号，用于每行的第一条指令"

#: ../../library/dis.rst:248
msgid "the current instruction, indicated as ``-->``,"
msgstr "当前指令，表示为 ``-->`` ，"

#: ../../library/dis.rst:249
msgid "a labelled instruction, indicated with ``>>``,"
msgstr "一个标记的指令，用 ``>>`` 表示，"

#: ../../library/dis.rst:250
msgid "the address of the instruction,"
msgstr "指令的地址，"

#: ../../library/dis.rst:251
msgid "the operation code name,"
msgstr "操作码名称，"

#: ../../library/dis.rst:252
msgid "operation parameters, and"
msgstr "操作参数，和"

#: ../../library/dis.rst:253
msgid "interpretation of the parameters in parentheses."
msgstr "括号中参数的解释。"

#: ../../library/dis.rst:255
msgid ""
"The parameter interpretation recognizes local and global variable names, "
"constant values, branch targets, and compare operators."
msgstr "参数解释识别本地和全局变量名称、常量值、分支目标和比较运算符。"

#: ../../library/dis.rst:270
msgid ""
"Return an iterator over the instructions in the supplied function, method, "
"source code string or code object."
msgstr "在所提供的函数、方法、源代码字符串或代码对象中的指令上返回一个迭代器。"

#: ../../library/dis.rst:273
msgid ""
"The iterator generates a series of :class:`Instruction` named tuples giving "
"the details of each operation in the supplied code."
msgstr "迭代器生成一系列 :class:`Instruction` ，命名为元组，提供所提供代码中每个操作的详细信息。"

#: ../../library/dis.rst:281
msgid ""
"The *show_caches* and *adaptive* parameters work as they do in :func:`dis`."
msgstr "*show_caches* 和 *adaptive* 形参的作用与 :func:`dis` 中的同名形参相同。"

#: ../../library/dis.rst:291
msgid ""
"This generator function uses the ``co_lines`` method of the code object "
"*code* to find the offsets which are starts of lines in the source code.  "
"They are generated as ``(offset, lineno)`` pairs."
msgstr ""
"这个生成器函数使用代码对象 *code* 的 ``co_lines`` 方法来查找源代码中行开头的偏移量。 它们将作为 ``(offset, "
"lineno)`` 对被生成。"

#: ../../library/dis.rst:295
msgid "Line numbers can be decreasing. Before, they were always increasing."
msgstr "行号可能会减少。 以前，他们总是在增加。"

#: ../../library/dis.rst:298
msgid ""
"The :pep:`626` ``co_lines`` method is used instead of the ``co_firstlineno``"
" and ``co_lnotab`` attributes of the code object."
msgstr ""
"使用 :pep:`626` ``co_lines`` 方法而不是代码对象的 ``co_firstlineno`` 和 ``co_lnotab`` 属性。"

#: ../../library/dis.rst:305
msgid ""
"Detect all offsets in the raw compiled bytecode string *code* which are jump"
" targets, and return a list of these offsets."
msgstr "检测作为跳转目标的原始编译后字节码字符串 *code* 中的所有偏移量，并返回这些偏移量的列表。"

#: ../../library/dis.rst:311
msgid "Compute the stack effect of *opcode* with argument *oparg*."
msgstr "使用参数 *oparg* 计算 *opcode* 的堆栈效果。"

#: ../../library/dis.rst:313
msgid ""
"If the code has a jump target and *jump* is ``True``, :func:`~stack_effect` "
"will return the stack effect of jumping.  If *jump* is ``False``, it will "
"return the stack effect of not jumping. And if *jump* is ``None`` (default),"
" it will return the maximal stack effect of both cases."
msgstr ""
"如果代码有一个跳转目标并且 *jump* 是 ``True`` ，则 :func:`~drag_effect` 将返回跳转的堆栈效果。如果 *jump*"
" 是 ``False`` ，它将返回不跳跃的堆栈效果。如果 *jump* 是 ``None`` （默认值），它将返回两种情况的最大堆栈效果。"

#: ../../library/dis.rst:320
msgid "Added *jump* parameter."
msgstr "添加 *jump* 参数。"

#: ../../library/dis.rst:327
msgid "Python Bytecode Instructions"
msgstr "Python字节码说明"

#: ../../library/dis.rst:329
msgid ""
"The :func:`get_instructions` function and :class:`Bytecode` class provide "
"details of bytecode instructions as :class:`Instruction` instances:"
msgstr ""
":func:`get_instructions` 函数和 :class:`Bytecode` 类提供字节码指令的详细信息的 "
":class:`Instruction` 实例："

#: ../../library/dis.rst:334
msgid "Details for a bytecode operation"
msgstr "字节码操作的详细信息"

#: ../../library/dis.rst:338
msgid ""
"numeric code for operation, corresponding to the opcode values listed below "
"and the bytecode values in the :ref:`opcode_collections`."
msgstr "操作的数字代码，对应于下面列出的操作码值和 :ref:`opcode_collections` 中的字节码值。"

#: ../../library/dis.rst:344
msgid "human readable name for operation"
msgstr "人类可读的操作名称"

#: ../../library/dis.rst:349
msgid "numeric argument to operation (if any), otherwise ``None``"
msgstr "操作的数字参数（如果有的话），否则为 ``None``"

#: ../../library/dis.rst:354
msgid "resolved arg value (if any), otherwise ``None``"
msgstr "已解析的 arg 值（如果有的话），否则为 ``None``"

#: ../../library/dis.rst:359
msgid ""
"human readable description of operation argument (if any), otherwise an "
"empty string."
msgstr "人类可读的操作参数（如果存在）的描述，否则为空字符串。"

#: ../../library/dis.rst:365
msgid "start index of operation within bytecode sequence"
msgstr "在字节码序列中启动操作索引"

#: ../../library/dis.rst:370
msgid "line started by this opcode (if any), otherwise ``None``"
msgstr "行由此操作码（如果有）启动，否则为 ``None``"

#: ../../library/dis.rst:375
msgid "``True`` if other code jumps to here, otherwise ``False``"
msgstr "如果其他代码跳到这里，则为 ``True`` ，否则为 ``False``"

#: ../../library/dis.rst:380
msgid ""
":class:`dis.Positions` object holding the start and end locations that are "
"covered by this instruction."
msgstr ":class:`dis.Positions` 对象保存了这条指令所涵盖的起始和结束位置。"

#: ../../library/dis.rst:387
msgid "Field ``positions`` is added."
msgstr "增加了 ``positions`` 字段。"

#: ../../library/dis.rst:392
msgid ""
"In case the information is not available, some fields might be ``None``."
msgstr "考虑到此信息不可用的情况，某些字段可能为 ``None``。"

#: ../../library/dis.rst:402
msgid ""
"The Python compiler currently generates the following bytecode instructions."
msgstr "Python编译器当前生成以下字节码指令。"

#: ../../library/dis.rst:405
msgid "**General instructions**"
msgstr "**一般指令**"

#: ../../library/dis.rst:409
msgid ""
"Do nothing code.  Used as a placeholder by the bytecode optimizer, and to "
"generate line tracing events."
msgstr "无操作代码。 被字节码优化器用作占位符，以及生成行追踪事件。"

#: ../../library/dis.rst:415
msgid "Removes the top-of-stack (TOS) item."
msgstr "删除堆栈顶部（TOS）项。"

#: ../../library/dis.rst:420
msgid ""
"Push the *i*-th item to the top of the stack. The item is not removed from "
"its original location."
msgstr "将第 *i* 个条目推入栈顶。 该条目不会从其原始位置上被移除。"

#: ../../library/dis.rst:428
msgid "Swap TOS with the item at position *i*."
msgstr "将 TOS 项与 *i* 位置上的项互换。"

#: ../../library/dis.rst:435
msgid ""
"Rather than being an actual instruction, this opcode is used to mark extra "
"space for the interpreter to cache useful data directly in the bytecode "
"itself. It is automatically hidden by all ``dis`` utilities, but can be "
"viewed with ``show_caches=True``."
msgstr ""

#: ../../library/dis.rst:440
msgid ""
"Logically, this space is part of the preceding instruction. Many opcodes "
"expect to be followed by an exact number of caches, and will instruct the "
"interpreter to skip over them at runtime."
msgstr ""

#: ../../library/dis.rst:444
msgid ""
"Populated caches can look like arbitrary instructions, so great care should "
"be taken when reading or modifying raw, adaptive bytecode containing "
"quickened data."
msgstr ""

#: ../../library/dis.rst:451
msgid "**Unary operations**"
msgstr "**一元操作**"

#: ../../library/dis.rst:453
msgid ""
"Unary operations take the top of the stack, apply the operation, and push "
"the result back on the stack."
msgstr "一元操作获取堆栈顶部元素，应用操作，并将结果推回堆栈。"

#: ../../library/dis.rst:458
msgid "Implements ``TOS = +TOS``."
msgstr "实现 ``TOS = +TOS`` 。"

#: ../../library/dis.rst:463
msgid "Implements ``TOS = -TOS``."
msgstr "实现 ``TOS = -TOS`` 。"

#: ../../library/dis.rst:468
msgid "Implements ``TOS = not TOS``."
msgstr "实现 ``TOS = not TOS`` 。"

#: ../../library/dis.rst:473
msgid "Implements ``TOS = ~TOS``."
msgstr "实现 ``TOS = ~TOS`` 。"

#: ../../library/dis.rst:478
msgid "Implements ``TOS = iter(TOS)``."
msgstr "实现 ``TOS = iter(TOS)`` 。"

#: ../../library/dis.rst:483
msgid ""
"If ``TOS`` is a :term:`generator iterator` or :term:`coroutine` object it is"
" left as is.  Otherwise, implements ``TOS = iter(TOS)``."
msgstr ""
"如果 ``TOS`` 是一个 :term:`generator iterator` 或 :term:`coroutine` 对象则保持原样。否则实现 "
"``TOS = iter(TOS)`` 。"

#: ../../library/dis.rst:489
msgid "**Binary and in-place operations**"
msgstr "**双目和原地操作**"

#: ../../library/dis.rst:491
msgid ""
"Binary operations remove the top of the stack (TOS) and the second top-most "
"stack item (TOS1) from the stack.  They perform the operation, and put the "
"result back on the stack."
msgstr "二元操作从堆栈中删除堆栈顶部（TOS）和第二个最顶层堆栈项（TOS1）。 它们执行操作，并将结果放回堆栈。"

#: ../../library/dis.rst:495
msgid ""
"In-place operations are like binary operations, in that they remove TOS and "
"TOS1, and push the result back on the stack, but the operation is done in-"
"place when TOS1 supports it, and the resulting TOS may be (but does not have"
" to be) the original TOS1."
msgstr ""
"就地操作就像二元操作，因为它们删除了TOS和TOS1，并将结果推回到堆栈上，但是当TOS1支持它时，操作就地完成，并且产生的TOS可能是（但不一定） "
"原来的TOS1。"

#: ../../library/dis.rst:503
msgid ""
"Implements the binary and in-place operators (depending on the value of "
"*op*)."
msgstr "实现双目和原地操作运算符（取决于 *op* 的值）。"

#: ../../library/dis.rst:511
msgid "Implements ``TOS = TOS1[TOS]``."
msgstr "实现 ``TOS = TOS1[TOS]`` 。"

#: ../../library/dis.rst:516
msgid "Implements ``TOS1[TOS] = TOS2``."
msgstr "实现 ``TOS1[TOS] = TOS2`` 。"

#: ../../library/dis.rst:521
msgid "Implements ``del TOS1[TOS]``."
msgstr "实现 ``del TOS1[TOS]`` 。"

#: ../../library/dis.rst:524
msgid "**Coroutine opcodes**"
msgstr "**协程操作码**"

#: ../../library/dis.rst:528
msgid ""
"Implements ``TOS = get_awaitable(TOS)``, where ``get_awaitable(o)`` returns "
"``o`` if ``o`` is a coroutine object or a generator object with the "
"CO_ITERABLE_COROUTINE flag, or resolves ``o.__await__``."
msgstr ""
"实现 ``TOS = get_awaitable(TOS)`` ，其中 ``get_awaitable(o)`` 返回 ``o`` 如果 ``o`` "
"是一个有 CO_ITERABLE_COROUTINE 标志的协程对象或生成器对象，否则解析 ``o.__await__`` 。"

#: ../../library/dis.rst:533
msgid ""
"If the ``where`` operand is nonzero, it indicates where the instruction "
"occurs:"
msgstr "如果 ``where`` 操作数为非零值，则表示指令所在的位置:"

#: ../../library/dis.rst:536
msgid "``1`` After a call to ``__aenter__``"
msgstr "``1`` 为对 ``__aenter__`` 的调用之后"

#: ../../library/dis.rst:537
msgid "``2`` After a call to ``__aexit__``"
msgstr "``2`` 为对 ``__aexit__`` 的调用之后"

#: ../../library/dis.rst:541
msgid "Previously, this instruction did not have an oparg."
msgstr "在之前版本中，该指令没有 oparg。"

#: ../../library/dis.rst:547
msgid "Implements ``TOS = TOS.__aiter__()``."
msgstr "实现 ``TOS = TOS.__aiter__()`` 。"

#: ../../library/dis.rst:550
msgid "Returning awaitable objects from ``__aiter__`` is no longer supported."
msgstr "已经不再支持从 ``__aiter__`` 返回可等待对象。"

#: ../../library/dis.rst:557
msgid ""
"Pushes ``get_awaitable(TOS.__anext__())`` to the stack.  See "
"``GET_AWAITABLE`` for details about ``get_awaitable``."
msgstr ""
"将 ``get_awaitable(TOS.__anext__())`` 推入栈。 请参阅 ``GET_AWAITABLE`` 了解有关 "
"``get_awaitable`` 的详情。"

#: ../../library/dis.rst:565
msgid ""
"Terminates an :keyword:`async for` loop.  Handles an exception raised when "
"awaiting a next item. The stack contains the async iterable in TOS1 and the "
"raised exception in TOS. Both are popped. If the exception is not "
":exc:`StopAsyncIteration`, it is re-raised."
msgstr ""

#: ../../library/dis.rst:572 ../../library/dis.rst:650
#: ../../library/dis.rst:661
msgid ""
"Exception representation on the stack now consist of one, not three, items."
msgstr ""

#: ../../library/dis.rst:577
msgid ""
"Resolves ``__aenter__`` and ``__aexit__`` from the object on top of the "
"stack.  Pushes ``__aexit__`` and result of ``__aenter__()`` to the stack."
msgstr ""
"从栈顶对象解析 ``__aenter__`` 和 ``__aexit__`` 。将 ``__aexit__`` 和 ``__aenter__()`` "
"的结果推入堆栈。"

#: ../../library/dis.rst:584
msgid "**Miscellaneous opcodes**"
msgstr "**其他操作码**"

#: ../../library/dis.rst:588
msgid ""
"Implements the expression statement for the interactive mode.  TOS is "
"removed from the stack and printed.  In non-interactive mode, an expression "
"statement is terminated with :opcode:`POP_TOP`."
msgstr "实现交互模式的表达式语句。TOS从堆栈中被移除并打印。在非交互模式下，表达式语句以 :opcode:`POP_TOP` 终止。"

#: ../../library/dis.rst:595
msgid ""
"Calls ``set.add(TOS1[-i], TOS)``.  Used to implement set comprehensions."
msgstr "调用 ``set.add(TOS1[-i], TOS)`` 。 用于实现集合推导。"

#: ../../library/dis.rst:600
msgid ""
"Calls ``list.append(TOS1[-i], TOS)``.  Used to implement list "
"comprehensions."
msgstr "调用 ``list.append(TOS1[-i], TOS)``。 用于实现列表推导式。"

#: ../../library/dis.rst:605
msgid ""
"Calls ``dict.__setitem__(TOS1[-i], TOS1, TOS)``.  Used to implement dict "
"comprehensions."
msgstr "调用 ``dict.__setitem__(TOS1[-i], TOS1, TOS)`` 。 用于实现字典推导。"

#: ../../library/dis.rst:609
msgid "Map value is TOS and map key is TOS1. Before, those were reversed."
msgstr "映射值为 TOS ，映射键为 TOS1 。之前，它们被颠倒了。"

#: ../../library/dis.rst:612
msgid ""
"For all of the :opcode:`SET_ADD`, :opcode:`LIST_APPEND` and "
":opcode:`MAP_ADD` instructions, while the added value or key/value pair is "
"popped off, the container object remains on the stack so that it is "
"available for further iterations of the loop."
msgstr ""
"对于所有 :opcode:`SET_ADD` 、 :opcode:`LIST_APPEND` 和 :opcode:`MAP_ADD` "
"指令，当弹出添加的值或键值对时，容器对象保留在堆栈上，以便它可用于循环的进一步迭代。"

#: ../../library/dis.rst:620
msgid "Returns with TOS to the caller of the function."
msgstr "返回 TOS 到函数的调用者。"

#: ../../library/dis.rst:625
msgid "Pops TOS and yields it from a :term:`generator`."
msgstr "弹出 TOS 并从一个 :term:`generator` 生成它。"

#: ../../library/dis.rst:631
msgid ""
"Checks whether ``__annotations__`` is defined in ``locals()``, if not it is "
"set up to an empty ``dict``. This opcode is only emitted if a class or "
"module body contains :term:`variable annotations <variable annotation>` "
"statically."
msgstr ""
"检查 ``__annotations__`` 是否在 ``locals()`` 中定义，如果没有，它被设置为空 ``dict`` "
"。只有在类或模块体静态地包含 :term:`variable annotations <variable annotation>` 时才会发出此操作码。"

#: ../../library/dis.rst:641
msgid ""
"Loads all symbols not starting with ``'_'`` directly from the module TOS to "
"the local namespace. The module is popped after loading all names. This "
"opcode implements ``from module import *``."
msgstr ""
"将所有不以 ``'_'`` 开头的符号直接从模块 TOS 加载到局部命名空间。加载所有名称后弹出该模块。这个操作码实现了 ``from module "
"import *`` 。"

#: ../../library/dis.rst:648
msgid ""
"Pops a value from the stack, which is used to restore the exception state."
msgstr ""

#: ../../library/dis.rst:655
msgid ""
"Re-raises the exception currently on top of the stack. If oparg is non-zero,"
" pops an additional value from the stack which is used to set ``f_lasti`` of"
" the current frame."
msgstr ""

#: ../../library/dis.rst:666
msgid ""
"Pops a value from the stack. Pushes the current exception to the top of the "
"stack. Pushes the value originally popped back to the stack. Used in "
"exception handlers."
msgstr ""

#: ../../library/dis.rst:674
msgid ""
"Performs exception matching for ``except``. Tests whether the TOS1 is an "
"exception matching TOS. Pops TOS and pushes the boolean result of the test."
msgstr ""

#: ../../library/dis.rst:681
msgid ""
"Performs exception matching for ``except*``. Applies ``split(TOS)`` on the "
"exception group representing TOS1."
msgstr ""

#: ../../library/dis.rst:684
msgid ""
"In case of a match, pops two items from the stack and pushes the non-"
"matching subgroup (``None`` in case of full match) followed by the matching "
"subgroup. When there is no match, pops one item (the match type) and pushes "
"``None``."
msgstr ""

#: ../../library/dis.rst:693
msgid ""
"Combines the raised and reraised exceptions list from TOS, into an exception"
" group to propagate from a try-except* block. Uses the original exception "
"group from TOS1 to reconstruct the structure of reraised exceptions. Pops "
"two items from the stack and pushes the exception to reraise or ``None`` if "
"there isn't one."
msgstr ""

#: ../../library/dis.rst:703
msgid ""
"Calls the function in position 4 on the stack with arguments (type, val, tb)"
" representing the exception at the top of the stack. Used to implement the "
"call ``context_manager.__exit__(*exc_info())`` when an exception has "
"occurred in a :keyword:`with` statement."
msgstr ""

#: ../../library/dis.rst:710
msgid ""
"The ``__exit__`` function is in position 4 of the stack rather than 7. "
"Exception representation on the stack now consist of one, not three, items."
msgstr ""

#: ../../library/dis.rst:717
msgid ""
"Pushes :exc:`AssertionError` onto the stack.  Used by the :keyword:`assert` "
"statement."
msgstr "将 :exc:`AssertionError` 推入栈顶。 由 :keyword:`assert` 语句使用。"

#: ../../library/dis.rst:725
msgid ""
"Pushes :func:`builtins.__build_class__` onto the stack.  It is later called "
"to construct a class."
msgstr ""

#: ../../library/dis.rst:731
msgid ""
"This opcode performs several operations before a with block starts.  First, "
"it loads :meth:`~object.__exit__` from the context manager and pushes it "
"onto the stack for later use by :opcode:`WITH_EXCEPT_START`.  Then, "
":meth:`~object.__enter__` is called. Finally, the result of calling the "
"``__enter__()`` method is pushed onto the stack."
msgstr ""

#: ../../library/dis.rst:742
msgid "Push ``len(TOS)`` onto the stack."
msgstr "将 ``len(TOS)`` 推入栈顶。"

#: ../../library/dis.rst:749
msgid ""
"If TOS is an instance of :class:`collections.abc.Mapping` (or, more "
"technically: if it has the :const:`Py_TPFLAGS_MAPPING` flag set in its "
":c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""
"如果 TOS 是 :class:`collections.abc.Mapping` 的实例（或者更准确地说：如果在它的 "
":c:member:`~PyTypeObject.tp_flags` 中设置了 :const:`Py_TPFLAGS_MAPPING` 旗标），则将 "
"``True`` 推入栈顶。 否则，推入 ``False``。"

#: ../../library/dis.rst:759
msgid ""
"If TOS is an instance of :class:`collections.abc.Sequence` and is *not* an "
"instance of :class:`str`/:class:`bytes`/:class:`bytearray` (or, more "
"technically: if it has the :const:`Py_TPFLAGS_SEQUENCE` flag set in its "
":c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""
"如果 TOS 是 :class:`collections.abc.Sequence` 的实例而 *不是*  "
":class:`str`/:class:`bytes`/:class:`bytearray` 的实例（或者更准确地说：如果在它的 "
":c:member:`~PyTypeObject.tp_flags` 中设置了 :const:`Py_TPFLAGS_SEQUENCE` 旗标），则将 "
"``True`` 推入栈顶。 否则 ，推入 ``False``。"

#: ../../library/dis.rst:769
msgid ""
"TOS is a tuple of mapping keys, and TOS1 is the match subject.  If TOS1 "
"contains all of the keys in TOS, push a :class:`tuple` containing the "
"corresponding values. Otherwise, push ``None``."
msgstr ""

#: ../../library/dis.rst:775 ../../library/dis.rst:1320
msgid ""
"Previously, this instruction also pushed a boolean value indicating success "
"(``True``) or failure (``False``)."
msgstr ""

#: ../../library/dis.rst:782
msgid ""
"Implements ``name = TOS``. *namei* is the index of *name* in the attribute "
":attr:`co_names` of the code object. The compiler tries to use "
":opcode:`STORE_FAST` or :opcode:`STORE_GLOBAL` if possible."
msgstr ""
"实现 ``name = TOS``。 *namei* 是 *name* 在代码对象的 :attr:`co_names` 属性中的索引。 "
"在可能的情况下，编译器会尝试使用 :opcode:`STORE_FAST` 或 :opcode:`STORE_GLOBAL`。"

#: ../../library/dis.rst:789
msgid ""
"Implements ``del name``, where *namei* is the index into :attr:`co_names` "
"attribute of the code object."
msgstr "实现 ``del name`` ，其中 *namei* 是代码对象的 :attr:`co_names` 属性的索引。"

#: ../../library/dis.rst:795
msgid ""
"Unpacks TOS into *count* individual values, which are put onto the stack "
"right-to-left."
msgstr "将 TOS 解包为 *count* 个单独的值，它们将按从右至左的顺序被放入堆栈。"

#: ../../library/dis.rst:801
msgid ""
"Implements assignment with a starred target: Unpacks an iterable in TOS into"
" individual values, where the total number of values can be smaller than the"
" number of items in the iterable: one of the new values will be a list of "
"all leftover items."
msgstr ""
"实现使用带星号的目标进行赋值：将 TOS 中的可迭代对象解包为单独的值，其中值的总数可以小于可迭代对象中的项数：新值之一将是由所有剩余项构成的列表。"

#: ../../library/dis.rst:806
msgid ""
"The low byte of *counts* is the number of values before the list value, the "
"high byte of *counts* the number of values after it.  The resulting values "
"are put onto the stack right-to-left."
msgstr "*counts* 的低字节是列表值之前的值的数量，*counts* 中的高字节则是之后的值的数量。 结果值会按从右至左的顺序入栈。"

#: ../../library/dis.rst:813
msgid ""
"Implements ``TOS.name = TOS1``, where *namei* is the index of name in "
":attr:`co_names`."
msgstr "实现 ``TOS.name = TOS1``，其中 *namei* 是 name 在 :attr:`co_names` 中的索引号。"

#: ../../library/dis.rst:819
msgid ""
"Implements ``del TOS.name``, using *namei* as index into :attr:`co_names`."
msgstr "实现 ``del TOS.name``，使用 *namei* 作为 :attr:`co_names` 中的索引号。"

#: ../../library/dis.rst:824
msgid "Works as :opcode:`STORE_NAME`, but stores the name as a global."
msgstr "类似于 :opcode:`STORE_NAME` 但会将 name 存储为全局变量。"

#: ../../library/dis.rst:829
msgid "Works as :opcode:`DELETE_NAME`, but deletes a global name."
msgstr "类似于 :opcode:`DELETE_NAME` 但会删除一个全局变量。"

#: ../../library/dis.rst:834
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr "将 ``co_consts[consti]`` 推入栈顶。"

#: ../../library/dis.rst:839
msgid "Pushes the value associated with ``co_names[namei]`` onto the stack."
msgstr "将与 ``co_names[namei]`` 相关联的值推入栈顶。"

#: ../../library/dis.rst:844
msgid ""
"Creates a tuple consuming *count* items from the stack, and pushes the "
"resulting tuple onto the stack."
msgstr "创建一个使用了来自栈的 *count* 个项的元组，并将结果元组推入栈顶。"

#: ../../library/dis.rst:850
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a list."
msgstr "类似于 :opcode:`BUILD_TUPLE` 但会创建一个列表。"

#: ../../library/dis.rst:855
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a set."
msgstr "类似于 :opcode:`BUILD_TUPLE` 但会创建一个集合。"

#: ../../library/dis.rst:860
msgid ""
"Pushes a new dictionary object onto the stack.  Pops ``2 * count`` items so "
"that the dictionary holds *count* entries: ``{..., TOS3: TOS2, TOS1: TOS}``."
msgstr ""
"将一个新字典对象推入栈顶。 弹出 ``2 * count`` 项使得字典包含 *count* 个条目: ``{..., TOS3: TOS2, "
"TOS1: TOS}``。"

#: ../../library/dis.rst:864
msgid ""
"The dictionary is created from stack items instead of creating an empty "
"dictionary pre-sized to hold *count* items."
msgstr "字典是根据栈中的项创建而不是创建一个预设大小包含 *count* 项的空字典。"

#: ../../library/dis.rst:871
msgid ""
"The version of :opcode:`BUILD_MAP` specialized for constant keys. Pops the "
"top element on the stack which contains a tuple of keys, then starting from "
"``TOS1``, pops *count* values to form values in the built dictionary."
msgstr ""
":opcode:`BUILD_MAP` 版本专用于常量键。 弹出的栈顶元素包含一个由键构成的元组，然后从 ``TOS1`` 开始从构建字典的值中弹出 "
"*count* 个值。"

#: ../../library/dis.rst:880
msgid ""
"Concatenates *count* strings from the stack and pushes the resulting string "
"onto the stack."
msgstr "拼接 *count* 个来自栈的字符串并将结果字符串推入栈顶。"

#: ../../library/dis.rst:888
msgid ""
"Pops a list from the stack and pushes a tuple containing the same values."
msgstr "从堆栈中弹出一个列表并推入一个包含相同值的元组。"

#: ../../library/dis.rst:895
msgid "Calls ``list.extend(TOS1[-i], TOS)``.  Used to build lists."
msgstr "调用 ``list.extend(TOS1[-i], TOS)``。 用于构建列表。"

#: ../../library/dis.rst:902
msgid "Calls ``set.update(TOS1[-i], TOS)``.  Used to build sets."
msgstr "调用 ``set.update(TOS1[-i], TOS)``。 用于构建集合。"

#: ../../library/dis.rst:909
msgid "Calls ``dict.update(TOS1[-i], TOS)``.  Used to build dicts."
msgstr "调用 ``dict.update(TOS1[-i], TOS)``。 用于构建字典。"

#: ../../library/dis.rst:916
msgid "Like :opcode:`DICT_UPDATE` but raises an exception for duplicate keys."
msgstr "类似于 :opcode:`DICT_UPDATE` 但对于重复的键会引发异常。"

#: ../../library/dis.rst:923
msgid "Replaces TOS with ``getattr(TOS, co_names[namei])``."
msgstr "将 TOS 替换为 ``getattr(TOS, co_names[namei])``。"

#: ../../library/dis.rst:928
msgid ""
"Performs a Boolean operation.  The operation name can be found in "
"``cmp_op[opname]``."
msgstr "执行布尔运算操作。 操作名称可在 ``cmp_op[opname]`` 中找到。"

#: ../../library/dis.rst:934
msgid "Performs ``is`` comparison, or ``is not`` if ``invert`` is 1."
msgstr "执行 ``is`` 比较，或者如果 ``invert`` 为 1 则执行 ``is not``。"

#: ../../library/dis.rst:941
msgid "Performs ``in`` comparison, or ``not in`` if ``invert`` is 1."
msgstr "执行 ``in`` 比较，或者如果 ``invert`` 为 1 则执行 ``not in``。"

#: ../../library/dis.rst:948
msgid ""
"Imports the module ``co_names[namei]``.  TOS and TOS1 are popped and provide"
" the *fromlist* and *level* arguments of :func:`__import__`.  The module "
"object is pushed onto the stack.  The current namespace is not affected: for"
" a proper import statement, a subsequent :opcode:`STORE_FAST` instruction "
"modifies the namespace."
msgstr ""
"导入模块 ``co_names[namei]``。 会弹出 TOS 和 TOS1 以提供 *fromlist* 和 *level* 参数给 "
":func:`__import__`。 模块对象会被推入栈顶。 当前命名空间不受影响：对于一条标准 import 语句，会执行后续的 "
":opcode:`STORE_FAST` 指令来修改命名空间。"

#: ../../library/dis.rst:957
msgid ""
"Loads the attribute ``co_names[namei]`` from the module found in TOS. The "
"resulting object is pushed onto the stack, to be subsequently stored by a "
":opcode:`STORE_FAST` instruction."
msgstr ""
"从在 TOS 内找到的模块中加载属性 ``co_names[namei]``。 结果对象会被推入栈顶，以便由后续的 "
":opcode:`STORE_FAST` 指令来保存。"

#: ../../library/dis.rst:964
msgid "Increments bytecode counter by *delta*."
msgstr "将字节码计数器的值增加 *delta*。"

#: ../../library/dis.rst:969
msgid "Decrements bytecode counter by *delta*. Checks for interrupts."
msgstr "将字节码计数器减少 *delta*。 检查中断。"

#: ../../library/dis.rst:976
msgid "Decrements bytecode counter by *delta*. Does not check for interrupts."
msgstr "将字节码计数器减少 *delta*。 不检查中断。"

#: ../../library/dis.rst:983
msgid ""
"If TOS is true, increments the bytecode counter by *delta*.  TOS is popped."
msgstr "如果 TOS 为真值，则将字节码计数器增加 *delta*。 TOS 将被弹出。"

#: ../../library/dis.rst:990
msgid ""
"If TOS is true, decrements the bytecode counter by *delta*.  TOS is popped."
msgstr "如果 TOS 为真值，则将字节码计数器减少 *delta*。 TOS 将被弹出。"

#: ../../library/dis.rst:997
msgid ""
"If TOS is false, increments the bytecode counter by *delta*.  TOS is popped."
msgstr "如果 TOS 为假值，则将字节码计数器增加 *delta*。 TOS 将被弹出。"

#: ../../library/dis.rst:1004
msgid ""
"If TOS is false, decrements the bytecode counter by *delta*.  TOS is popped."
msgstr "如果 TOS 为假值，则将字节码计数器减少 *delta*。 TOS 将被弹出。"

#: ../../library/dis.rst:1011
msgid ""
"If TOS is not ``None``, increments the bytecode counter by *delta*.  TOS is "
"popped."
msgstr "如果 TOS 不为 ``None``，则将字节码计数器增加 *delta*。 TOS 将被弹出。"

#: ../../library/dis.rst:1018
msgid ""
"If TOS is not ``None``, decrements the bytecode counter by *delta*.  TOS is "
"popped."
msgstr "如果 TOS 不为 ``None``，则将字节码计数器减少 *delta*。 TOS 将被弹出。"

#: ../../library/dis.rst:1025
msgid ""
"If TOS is ``None``, increments the bytecode counter by *delta*.  TOS is "
"popped."
msgstr "如果 TOS 为 ``None``，则将字节码计数器增加 *delta*。 将被弹出。"

#: ../../library/dis.rst:1032
msgid ""
"If TOS is ``None``, decrements the bytecode counter by *delta*.  TOS is "
"popped."
msgstr "如果 TOS 为 ``None``，则将字节码计数器减少 *delta*。 TOS 将被弹出。"

#: ../../library/dis.rst:1039
msgid ""
"If TOS is true, increments the bytecode counter by *delta* and leaves TOS on"
" the stack.  Otherwise (TOS is false), TOS is popped."
msgstr "如果 TOS 为真值，则将字节码计数器增加 *delta* 并将 TOS 留在栈中。 否则（TOS 为假值），TOS 将被弹出。"

#: ../../library/dis.rst:1044 ../../library/dis.rst:1054
msgid "The oparg is now a relative delta rather than an absolute target."
msgstr "现在 oparg 是一个相对变化量而非绝对目标值。"

#: ../../library/dis.rst:1049
msgid ""
"If TOS is false, increments the bytecode counter by *delta* and leaves TOS "
"on the stack.  Otherwise (TOS is true), TOS is popped."
msgstr "如果 TOS 为假值，则将字节码计数器增加 *delta* 并将 TOS 留在栈中。 否则（TOS 为真值），TOS 将被弹出。"

#: ../../library/dis.rst:1060
msgid ""
"TOS is an :term:`iterator`.  Call its :meth:`~iterator.__next__` method.  If"
" this yields a new value, push it on the stack (leaving the iterator below "
"it).  If the iterator indicates it is exhausted, TOS is popped, and the byte"
" code counter is incremented by *delta*."
msgstr ""
"TOS 是一个 :term:`iterator`。 请调用其 :meth:`~iterator.__next__` 方法。 "
"如果此操作产生了一个新值，则将其推入栈顶（将迭代器留在其下方）。 如果迭代器提示已耗尽，TOS 会被弹出，并且字节码计数器将增加 *delta*。"

#: ../../library/dis.rst:1068
msgid "Loads the global named ``co_names[namei>>1]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:1070
msgid ""
"If the low bit of ``namei`` is set, then a ``NULL`` is pushed to the stack "
"before the global variable."
msgstr ""

#: ../../library/dis.rst:1076
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr "将指向局部对象 ``co_varnames[var_num]`` 的引用推入栈顶。"

#: ../../library/dis.rst:1081
msgid "Stores TOS into the local ``co_varnames[var_num]``."
msgstr "将 TOS 存放到局部对象 ``co_varnames[var_num]``。"

#: ../../library/dis.rst:1086
msgid "Deletes local ``co_varnames[var_num]``."
msgstr "移除局部对象 ``co_varnames[var_num]``。"

#: ../../library/dis.rst:1091
msgid ""
"Creates a new cell in slot ``i``.  If that slot is empty then that value is "
"stored into the new cell."
msgstr ""

#: ../../library/dis.rst:1099
msgid ""
"Pushes a reference to the cell contained in slot ``i`` of the \"fast "
"locals\" storage.  The name of the variable is ``co_fastlocalnames[i]``."
msgstr ""

#: ../../library/dis.rst:1102
msgid ""
"Note that ``LOAD_CLOSURE`` is effectively an alias for ``LOAD_FAST``. It "
"exists to keep bytecode a little more readable."
msgstr ""

#: ../../library/dis.rst:1105 ../../library/dis.rst:1114
#: ../../library/dis.rst:1126 ../../library/dis.rst:1135
#: ../../library/dis.rst:1146
msgid "``i`` is no longer offset by the length of ``co_varnames``."
msgstr ""

#: ../../library/dis.rst:1111
msgid ""
"Loads the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Pushes a reference to the object the cell contains on the stack."
msgstr ""

#: ../../library/dis.rst:1120
msgid ""
"Much like :opcode:`LOAD_DEREF` but first checks the locals dictionary before"
" consulting the cell.  This is used for loading free variables in class "
"bodies."
msgstr "类似于 :opcode:`LOAD_DEREF` 但在查询单元之前会首先检查局部对象字典。 这被用于加载类语句体中的自由变量。"

#: ../../library/dis.rst:1132
msgid ""
"Stores TOS into the cell contained in slot ``i`` of the \"fast locals\" "
"storage."
msgstr ""

#: ../../library/dis.rst:1141
msgid ""
"Empties the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Used by the :keyword:`del` statement."
msgstr ""

#: ../../library/dis.rst:1152
msgid ""
"Copies the ``n`` free variables from the closure into the frame. Removes the"
" need for special code on the caller's side when calling closures."
msgstr ""

#: ../../library/dis.rst:1161
msgid ""
"Raises an exception using one of the 3 forms of the ``raise`` statement, "
"depending on the value of *argc*:"
msgstr "使用 ``raise`` 语句的 3 种形式之一引发异常，具体形式取决于 *argc* 的值："

#: ../../library/dis.rst:1164
msgid "0: ``raise`` (re-raise previous exception)"
msgstr "0: ``raise`` (重新引发之前的异常)"

#: ../../library/dis.rst:1165
msgid "1: ``raise TOS`` (raise exception instance or type at ``TOS``)"
msgstr "1: ``raise TOS`` (在 ``TOS`` 上引发异常实例或类型)"

#: ../../library/dis.rst:1166
msgid ""
"2: ``raise TOS1 from TOS`` (raise exception instance or type at ``TOS1`` "
"with ``__cause__`` set to ``TOS``)"
msgstr ""
"2: ``raise TOS1 from TOS`` (在 ``TOS1`` 上引发异常实例或类型并将 ``__cause__`` 设为 "
"``TOS``)"

#: ../../library/dis.rst:1172
msgid ""
"Calls a callable object with the number of arguments specified by ``argc``, "
"including the named arguments specified by the preceding :opcode:`KW_NAMES`,"
" if any. On the stack are (in ascending order), either:"
msgstr ""

#: ../../library/dis.rst:1177
msgid "NULL"
msgstr "NULL"

#: ../../library/dis.rst:1178 ../../library/dis.rst:1184
msgid "The callable"
msgstr ""

#: ../../library/dis.rst:1179
msgid "The positional arguments"
msgstr ""

#: ../../library/dis.rst:1180 ../../library/dis.rst:1187
msgid "The named arguments"
msgstr ""

#: ../../library/dis.rst:1182
msgid "or:"
msgstr ""

#: ../../library/dis.rst:1185
msgid "``self``"
msgstr ""

#: ../../library/dis.rst:1186
msgid "The remaining positional arguments"
msgstr ""

#: ../../library/dis.rst:1189
msgid ""
"``argc`` is the total of the positional and named arguments, excluding "
"``self`` when a ``NULL`` is not present."
msgstr ""

#: ../../library/dis.rst:1192
msgid ""
"``CALL`` pops all arguments and the callable object off the stack, calls the"
" callable object with those arguments, and pushes the return value returned "
"by the callable object."
msgstr ""

#: ../../library/dis.rst:1201
msgid ""
"Calls a callable object with variable set of positional and keyword "
"arguments.  If the lowest bit of *flags* is set, the top of the stack "
"contains a mapping object containing additional keyword arguments. Before "
"the callable is called, the mapping object and iterable object are each "
"\"unpacked\" and their contents passed in as keyword and positional "
"arguments respectively. ``CALL_FUNCTION_EX`` pops all arguments and the "
"callable object off the stack, calls the callable object with those "
"arguments, and pushes the return value returned by the callable object."
msgstr ""
"调用一个可调用对象并附带位置参数和关键字参数变量集合。 如果设置了 *flags* 的最低位，则栈顶包含一个由额外关键字参数组成的映射对象。 "
"在调用该可调用对象之前，映射对象和可迭代对象会被分别“解包”并将它们的内容分别作为关键字参数和位置参数传入。 ``CALL_FUNCTION_EX`` "
"会中栈中弹出所有参数及可调用对象，附带这些参数调用该可调用对象，并将可调用对象所返回的返回值推入栈顶。"

#: ../../library/dis.rst:1216
msgid ""
"Loads a method named ``co_names[namei]`` from the TOS object. TOS is popped."
" This bytecode distinguishes two cases: if TOS has a method with the correct"
" name, the bytecode pushes the unbound method and TOS. TOS will be used as "
"the first argument (``self``) by :opcode:`CALL` when calling the unbound "
"method. Otherwise, ``NULL`` and the object return by the attribute lookup "
"are pushed."
msgstr ""

#: ../../library/dis.rst:1228
msgid ""
"Prefixes :opcode:`CALL`. Logically this is a no op. It exists to enable "
"effective specialization of calls. ``argc`` is the number of arguments as "
"described in :opcode:`CALL`."
msgstr ""

#: ../../library/dis.rst:1237
msgid ""
"Pushes a ``NULL`` to the stack. Used in the call sequence to match the "
"``NULL`` pushed by :opcode:`LOAD_METHOD` for non-method calls."
msgstr ""

#: ../../library/dis.rst:1246
msgid ""
"Prefixes :opcode:`PRECALL`. Stores a reference to ``co_consts[consti]`` into"
" an internal variable for use by :opcode:`CALL`. ``co_consts[consti]`` must "
"be a tuple of strings."
msgstr ""

#: ../../library/dis.rst:1255
msgid ""
"Pushes a new function object on the stack.  From bottom to top, the consumed"
" stack must consist of values if the argument carries a specified flag value"
msgstr "将一个新函数对象推入栈顶。 从底端到顶端，如果参数带有指定的旗标值则所使用的栈必须由这些值组成。"

#: ../../library/dis.rst:1258
msgid ""
"``0x01`` a tuple of default values for positional-only and positional-or-"
"keyword parameters in positional order"
msgstr "``0x01`` 一个默认值的元组，用于按位置排序的仅限位置形参以及位置或关键字形参"

#: ../../library/dis.rst:1260
msgid "``0x02`` a dictionary of keyword-only parameters' default values"
msgstr "``0x02`` 一个仅限关键字形参的默认值的字典"

#: ../../library/dis.rst:1261
msgid "``0x04`` a tuple of strings containing parameters' annotations"
msgstr "``0x04`` 一个包含形参标注的字符串元组。"

#: ../../library/dis.rst:1262
msgid "``0x08`` a tuple containing cells for free variables, making a closure"
msgstr "``0x08`` 一个包含用于自由变量的单元的元组，生成一个闭包"

#: ../../library/dis.rst:1263
msgid "the code associated with the function (at TOS1)"
msgstr "与函数相关联的代码 (在 TOS1)"

#: ../../library/dis.rst:1264
msgid "the :term:`qualified name` of the function (at TOS)"
msgstr "函数的 :term:`qualified name` (在 TOS)"

#: ../../library/dis.rst:1266
msgid "Flag value ``0x04`` is a tuple of strings instead of dictionary"
msgstr "旗标值 ``0x04`` 是一个字符串元组而非字典。"

#: ../../library/dis.rst:1273
msgid ""
"Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, "
"``slice(TOS1, TOS)`` is pushed; if it is 3, ``slice(TOS2, TOS1, TOS)`` is "
"pushed. See the :func:`slice` built-in function for more information."
msgstr ""
"将一个切片对象推入栈顶。 *argc* 必须为 2 或 3。 如果为 2，则推入 ``slice(TOS1, TOS)``；如果为 3，则推入 "
"``slice(TOS2, TOS1, TOS)``。 请参阅 :func:`slice` 内置函数了解详细信息。"

#: ../../library/dis.rst:1280
msgid ""
"Prefixes any opcode which has an argument too big to fit into the default "
"one byte. *ext* holds an additional byte which act as higher bits in the "
"argument. For each opcode, at most three prefixal ``EXTENDED_ARG`` are "
"allowed, forming an argument from two-byte to four-byte."
msgstr ""
"为任意带有大到无法放入默认的单字节的参数的操作码添加前缀。 *ext* 存放一个附加字节作为参数中的高比特位。 对于每个操作码，最多允许三个 "
"``EXTENDED_ARG`` 前缀，构成两字节到三字节的参数。"

#: ../../library/dis.rst:1288
msgid ""
"Used for implementing formatted literal strings (f-strings).  Pops an "
"optional *fmt_spec* from the stack, then a required *value*. *flags* is "
"interpreted as follows:"
msgstr ""
"用于实现格式化字面值字符串（f-字符串）。 从栈中弹出一个可选的 *fmt_spec*，然后是一个必须的 *value*。 *flags* "
"的解读方式如下："

#: ../../library/dis.rst:1292
msgid "``(flags & 0x03) == 0x00``: *value* is formatted as-is."
msgstr "``(flags & 0x03) == 0x00``: *value* 按原样格式化。"

#: ../../library/dis.rst:1293
msgid ""
"``(flags & 0x03) == 0x01``: call :func:`str` on *value* before formatting "
"it."
msgstr "``(flags & 0x03) == 0x01``: 在格式化 *value* 之前调用其 :func:`str`。"

#: ../../library/dis.rst:1295
msgid ""
"``(flags & 0x03) == 0x02``: call :func:`repr` on *value* before formatting "
"it."
msgstr "``(flags & 0x03) == 0x02``: 在格式化 *value* 之前调用其 :func:`repr`。"

#: ../../library/dis.rst:1297
msgid ""
"``(flags & 0x03) == 0x03``: call :func:`ascii` on *value* before formatting "
"it."
msgstr "``(flags & 0x03) == 0x03``: 在格式化 *value* 之前调用其 :func:`ascii`。"

#: ../../library/dis.rst:1299
msgid ""
"``(flags & 0x04) == 0x04``: pop *fmt_spec* from the stack and use it, else "
"use an empty *fmt_spec*."
msgstr "``(flags & 0x04) == 0x04``: 从栈中弹出 *fmt_spec* 并使用它，否则使用空的 *fmt_spec*。"

#: ../../library/dis.rst:1302
msgid ""
"Formatting is performed using :c:func:`PyObject_Format`.  The result is "
"pushed on the stack."
msgstr "使用 :c:func:`PyObject_Format` 执行格式化。 结果会被推入栈顶。"

#: ../../library/dis.rst:1310
msgid ""
"TOS is a tuple of keyword attribute names, TOS1 is the class being matched "
"against, and TOS2 is the match subject.  *count* is the number of positional"
" sub-patterns."
msgstr "TOS 是一个包含关键字属性名称的元组，TOS1 是要匹配的类，而 TOS2 是匹配目标。 *count* 是位置子模式的数量。"

#: ../../library/dis.rst:1314
msgid ""
"Pop TOS, TOS1, and TOS2.  If TOS2 is an instance of TOS1 and has the "
"positional and keyword attributes required by *count* and TOS, push a tuple "
"of extracted attributes.  Otherwise, push ``None``."
msgstr ""

#: ../../library/dis.rst:1327
msgid "A no-op. Performs internal tracing, debugging and optimization checks."
msgstr ""

#: ../../library/dis.rst:1329
msgid "The ``where`` operand marks where the ``RESUME`` occurs:"
msgstr ""

#: ../../library/dis.rst:1331
msgid "``0`` The start of a function"
msgstr ""

#: ../../library/dis.rst:1332
msgid "``1`` After a ``yield`` expression"
msgstr ""

#: ../../library/dis.rst:1333
msgid "``2`` After a ``yield from`` expression"
msgstr ""

#: ../../library/dis.rst:1334
msgid "``3`` After an ``await`` expression"
msgstr "``3`` 在 ``await`` 表达式之后"

#: ../../library/dis.rst:1341
msgid ""
"Create a generator, coroutine, or async generator from the current frame. "
"Clear the current frame and return the newly created generator."
msgstr ""

#: ../../library/dis.rst:1349
msgid ""
"Sends ``None`` to the sub-generator of this generator. Used in ``yield "
"from`` and ``await`` statements."
msgstr ""

#: ../../library/dis.rst:1357
msgid ""
"Wraps the value on top of the stack in an ``async_generator_wrapped_value``."
" Used to yield in async generators."
msgstr ""

#: ../../library/dis.rst:1365
msgid ""
"This is not really an opcode.  It identifies the dividing line between "
"opcodes which don't use their argument and those that do (``< "
"HAVE_ARGUMENT`` and ``>= HAVE_ARGUMENT``, respectively)."
msgstr ""
"这不是一个真正的操作码。 它用于标明使用参数和不使用参数的操作码 (分别为 ``< HAVE_ARGUMENT`` 和 ``>= "
"HAVE_ARGUMENT``) 之间的分隔线。"

#: ../../library/dis.rst:1369
msgid ""
"Now every instruction has an argument, but opcodes ``< HAVE_ARGUMENT`` "
"ignore it. Before, only opcodes ``>= HAVE_ARGUMENT`` had an argument."
msgstr ""
"现在每条指令都带有参数，但操作码 ``< HAVE_ARGUMENT`` 会忽略它。 之前仅限操作码 ``>= HAVE_ARGUMENT`` "
"带有参数。"

#: ../../library/dis.rst:1377
msgid "Opcode collections"
msgstr "操作码集合"

#: ../../library/dis.rst:1379
msgid ""
"These collections are provided for automatic introspection of bytecode "
"instructions:"
msgstr "提供这些集合用于字节码指令的自动内省："

#: ../../library/dis.rst:1384
msgid "Sequence of operation names, indexable using the bytecode."
msgstr "操作名称的序列，可使用字节码来索引。"

#: ../../library/dis.rst:1389
msgid "Dictionary mapping operation names to bytecodes."
msgstr "映射操作名称到字节码的字典"

#: ../../library/dis.rst:1394
msgid "Sequence of all compare operation names."
msgstr "所有比较操作名称的序列。"

#: ../../library/dis.rst:1399
msgid "Sequence of bytecodes that access a constant."
msgstr "访问常量的字节码序列。"

#: ../../library/dis.rst:1404
msgid ""
"Sequence of bytecodes that access a free variable (note that 'free' in this "
"context refers to names in the current scope that are referenced by inner "
"scopes or names in outer scopes that are referenced from this scope.  It "
"does *not* include references to global or builtin scopes)."
msgstr ""
"访问自由变量的字节码序列（请注意这里所说的‘自由’是指在当前作用域中被内部作用域所引用的名称，或在外部作用域中被此作用域所引用的名称。 它 *并不* "
"包括对全局或内置作用域的引用）。"

#: ../../library/dis.rst:1412
msgid "Sequence of bytecodes that access an attribute by name."
msgstr "按名称访问属性的字节码序列。"

#: ../../library/dis.rst:1417
msgid "Sequence of bytecodes that have a relative jump target."
msgstr "具有相对跳转目标的字节码序列。"

#: ../../library/dis.rst:1422
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr "具有绝对跳转目标的字节码序列。"

#: ../../library/dis.rst:1427
msgid "Sequence of bytecodes that access a local variable."
msgstr "访问局部变量的字节码序列。"

#: ../../library/dis.rst:1432
msgid "Sequence of bytecodes of Boolean operations."
msgstr "布尔运算的字节码序列。"
