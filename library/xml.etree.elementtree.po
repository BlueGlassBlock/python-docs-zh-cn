# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Shengjing Zhu <zsj950618@gmail.com>, 2020
# ww song <sww4718168@gmail.com>, 2020
# eric R <trencyclopedia@gmail.com>, 2020
# dannyvi <dannyvis@icloud.com>, 2020
# Meng Du <alphanow@gmail.com>, 2020
# walkinrain <walkinrain2008@163.com>, 2020
# stone jing <stonejing1817@gmail.com>, 2020
# Menghua Xiao <arieshout@gmail.com>, 2020
# ppcfish <ppcfish@gmail.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 12:14+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.etree.elementtree.rst:2
msgid ":mod:`xml.etree.ElementTree` --- The ElementTree XML API"
msgstr ":mod:`xml.etree.ElementTree` ---  ElementTree XML API"

#: ../../library/xml.etree.elementtree.rst:9
msgid "**Source code:** :source:`Lib/xml/etree/ElementTree.py`"
msgstr "**源代码：** :source:`Lib/xml/etree/ElementTree.py`"

#: ../../library/xml.etree.elementtree.rst:13
msgid ""
"The :mod:`xml.etree.ElementTree` module implements a simple and efficient "
"API for parsing and creating XML data."
msgstr ":mod:`xml.etree.ElementTree` 模块实现了一个简单高效的API，用于解析和创建XML数据。"

#: ../../library/xml.etree.elementtree.rst:16
msgid ""
"This module will use a fast implementation whenever available. The "
":mod:`xml.etree.cElementTree` module is deprecated."
msgstr "只要有可能，这个模块将使用快速实现。:mod:`xml.etree.cElementTree` 模块已弃用。"

#: ../../library/xml.etree.elementtree.rst:23
msgid ""
"The :mod:`xml.etree.ElementTree` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xml.etree.ElementTree` 模块对于恶意构建的数据是不安全的。如果需要解析不可信或未经身份验证的数据，请参见 :ref"
":`xml-vulnerabilities` 。"

#: ../../library/xml.etree.elementtree.rst:28
msgid "Tutorial"
msgstr "教程"

#: ../../library/xml.etree.elementtree.rst:30
msgid ""
"This is a short tutorial for using :mod:`xml.etree.ElementTree` (``ET`` in "
"short).  The goal is to demonstrate some of the building blocks and basic "
"concepts of the module."
msgstr ""
"这是一个使用 :mod:`xml.etree.ElementTree` （简称 ``ET`` ）的简短教程。目标是演示模块的一些构建块和基本概念。"

#: ../../library/xml.etree.elementtree.rst:35
msgid "XML tree and elements"
msgstr "XML树和元素"

#: ../../library/xml.etree.elementtree.rst:37
msgid ""
"XML is an inherently hierarchical data format, and the most natural way to "
"represent it is with a tree.  ``ET`` has two classes for this purpose - "
":class:`ElementTree` represents the whole XML document as a tree, and "
":class:`Element` represents a single node in this tree.  Interactions with "
"the whole document (reading and writing to/from files) are usually done on "
"the :class:`ElementTree` level.  Interactions with a single XML element and "
"its sub-elements are done on the :class:`Element` level."
msgstr ""
"XML是一种固有的分层数据格式，最自然的表示方法是使用树。为此， ``ET`` 有两个类： :class:`ElementTree` "
"将整个XML文档表示为一个树， :class:`Element` 表示该树中的单个节点。与整个文档的交互（读写文件）通常在 "
":class:`ElementTree` 级别完成。与单个XML元素及其子元素的交互是在 :class:`Element` 级别完成的。"

#: ../../library/xml.etree.elementtree.rst:48
msgid "Parsing XML"
msgstr "解析XML"

#: ../../library/xml.etree.elementtree.rst:50
msgid ""
"We'll be using the following XML document as the sample data for this "
"section:"
msgstr "我们将使用以下XML文档作为本节的示例数据："

#: ../../library/xml.etree.elementtree.rst:78
msgid "We can import this data by reading from a file::"
msgstr "可以通过从文件中读取来导入此数据："

#: ../../library/xml.etree.elementtree.rst:84
msgid "Or directly from a string::"
msgstr "或直接从字符串中解析："

#: ../../library/xml.etree.elementtree.rst:88
msgid ""
":func:`fromstring` parses XML from a string directly into an "
":class:`Element`, which is the root element of the parsed tree.  Other "
"parsing functions may create an :class:`ElementTree`.  Check the "
"documentation to be sure."
msgstr ""
":func:`fromstring` 将XML从字符串直接解析为 :class:`Element` "
"，该元素是已解析树的根元素。其他解析函数可能会创建一个 :class:`ElementTree` 。确切信息请查阅文档。"

#: ../../library/xml.etree.elementtree.rst:92
msgid ""
"As an :class:`Element`, ``root`` has a tag and a dictionary of attributes::"
msgstr "作为 :class:`Element` ， ``root`` 具有标签和属性字典::"

#: ../../library/xml.etree.elementtree.rst:99
msgid "It also has children nodes over which we can iterate::"
msgstr "还有可以迭代的子节点："

#: ../../library/xml.etree.elementtree.rst:108
msgid "Children are nested, and we can access specific child nodes by index::"
msgstr "子级是可以嵌套的，我们可以通过索引访问特定的子级节点："

#: ../../library/xml.etree.elementtree.rst:116
msgid ""
"Not all elements of the XML input will end up as elements of the parsed "
"tree. Currently, this module skips over any XML comments, processing "
"instructions, and document type declarations in the input. Nevertheless, "
"trees built using this module's API rather than parsing from XML text can "
"have comments and processing instructions in them; they will be included "
"when generating XML output. A document type declaration may be accessed by "
"passing a custom :class:`TreeBuilder` instance to the :class:`XMLParser` "
"constructor."
msgstr ""
"并非XML输入的所有元素都将作为解析树的元素结束。目前，此模块跳过输入中的任何XML注释、处理指令和文档类型声明。然而，使用这个模块的API而不是从XML文本解析构建的树可以包含注释和处理指令，生成XML输出时同样包含这些注释和处理指令。可以通过将自定义"
" :class:`TreeBuilder` 实例传递给 :class:`XMLParser` 构造函数来访问文档类型声明。"

#: ../../library/xml.etree.elementtree.rst:130
msgid "Pull API for non-blocking parsing"
msgstr "Pull API进行非阻塞解析"

#: ../../library/xml.etree.elementtree.rst:132
msgid ""
"Most parsing functions provided by this module require the whole document to"
" be read at once before returning any result.  It is possible to use an "
":class:`XMLParser` and feed data into it incrementally, but it is a push API"
" that calls methods on a callback target, which is too low-level and "
"inconvenient for most needs.  Sometimes what the user really wants is to be "
"able to parse XML incrementally, without blocking operations, while enjoying"
" the convenience of fully constructed :class:`Element` objects."
msgstr ""
"此模块所提供了大多数解析函数都要求在返回任何结果之前一次性读取整个文档。 可以使用 :class:`XMLParser` "
"并以渐进方式添加数据，但这是在回调目标上调用方法的推送式 API。 有时用户真正想要的是能够以渐进方式解析 XML 而无需阻塞操作，同时享受完整的已构造"
" :class:`Element` 对象。"

#: ../../library/xml.etree.elementtree.rst:140
msgid ""
"The most powerful tool for doing this is :class:`XMLPullParser`.  It does "
"not require a blocking read to obtain the XML data, and is instead fed with "
"data incrementally with :meth:`XMLPullParser.feed` calls.  To get the parsed"
" XML elements, call :meth:`XMLPullParser.read_events`.  Here is an example::"
msgstr ""
"针对此需求的最强大工具是 :class:`XMLPullParser`。 它不要求通过阻塞式读取来获得 XML 数据，而是通过执行 "
":meth:`XMLPullParser.feed` 调用来渐进式地添加数据。  要获得已解析的 XML 元素，应调用 "
":meth:`XMLPullParser.read_events`。 下面是一个示例::"

#: ../../library/xml.etree.elementtree.rst:156
msgid ""
"The obvious use case is applications that operate in a non-blocking fashion "
"where the XML data is being received from a socket or read incrementally "
"from some storage device.  In such cases, blocking reads are unacceptable."
msgstr ""
"常见的用例是针对以非阻塞方式进行的应用程序，其中 XML 是从套接字接收或从某些存储设备渐进式读取的。 在这些用例中，阻塞式读取是不可接受的。"

#: ../../library/xml.etree.elementtree.rst:160
msgid ""
"Because it's so flexible, :class:`XMLPullParser` can be inconvenient to use "
"for simpler use-cases.  If you don't mind your application blocking on "
"reading XML data but would still like to have incremental parsing "
"capabilities, take a look at :func:`iterparse`.  It can be useful when "
"you're reading a large XML document and don't want to hold it wholly in "
"memory."
msgstr ""
"因为其非常灵活，:class:`XMLPullParser` 在更简单的用例中使用起来可能并不方便。 如果你不介意你的应用程序在读取 XML "
"数据时造成阻塞但仍希望具有增量解析能力，可以考虑 :func:`iterparse`。 它在你读取大型 XML "
"文档并且不希望将它完全放去内存时会很适用。"

#: ../../library/xml.etree.elementtree.rst:167
msgid "Finding interesting elements"
msgstr "查找感兴趣的元素"

#: ../../library/xml.etree.elementtree.rst:169
msgid ""
":class:`Element` has some useful methods that help iterate recursively over "
"all the sub-tree below it (its children, their children, and so on).  For "
"example, :meth:`Element.iter`::"
msgstr ""
":class:`Element` 有一些很有效的方法，可帮助递归遍历其下的所有子树（包括子级，子级的子级，等等）。例如 "
":meth:`Element.iter`::"

#: ../../library/xml.etree.elementtree.rst:182
msgid ""
":meth:`Element.findall` finds only elements with a tag which are direct "
"children of the current element.  :meth:`Element.find` finds the *first* "
"child with a particular tag, and :attr:`Element.text` accesses the element's"
" text content.  :meth:`Element.get` accesses the element's attributes::"
msgstr ""
":meth:`Element.findall` 仅查找当前元素的直接子元素中带有指定标签的元素。 :meth:`Element.find` "
"找带有特定标签的 *第一个* 子级，然后可以用 :attr:`Element.text` 访问元素的文本内容。 :attr:`Element.get` "
"访问元素的属性::"

#: ../../library/xml.etree.elementtree.rst:196
msgid ""
"More sophisticated specification of which elements to look for is possible "
"by using :ref:`XPath <elementtree-xpath>`."
msgstr "通过使用 :ref:`XPath <elementtree-xpath>` ，可以更精确地指定要查找的元素。"

#: ../../library/xml.etree.elementtree.rst:200
msgid "Modifying an XML File"
msgstr "修改XML文件"

#: ../../library/xml.etree.elementtree.rst:202
msgid ""
":class:`ElementTree` provides a simple way to build XML documents and write "
"them to files. The :meth:`ElementTree.write` method serves this purpose."
msgstr ""
":class:`ElementTree` 提供了一种构建XML文档并将其写入文件的简单方法。调用 :meth:`ElementTree.write` "
"方法就可以实现。"

#: ../../library/xml.etree.elementtree.rst:205
msgid ""
"Once created, an :class:`Element` object may be manipulated by directly "
"changing its fields (such as :attr:`Element.text`), adding and modifying "
"attributes (:meth:`Element.set` method), as well as adding new children (for"
" example with :meth:`Element.append`)."
msgstr ""
"创建后可以直接操作 :class:`Element` 对象。例如：使用 :attr:`Element.text` 修改文本字段，使用 "
":meth:`Element.set` 方法添加和修改属性，以及使用  :meth:`Element.append` 添加新的子元素。"

#: ../../library/xml.etree.elementtree.rst:210
msgid ""
"Let's say we want to add one to each country's rank, and add an ``updated`` "
"attribute to the rank element::"
msgstr "假设我们要为每个国家/地区的中添加一个排名，并在排名元素中添加一个 ``updated`` 属性："

#: ../../library/xml.etree.elementtree.rst:220
#: ../../library/xml.etree.elementtree.rst:264
msgid "Our XML now looks like this:"
msgstr "生成的XML现在看起来像这样："

#: ../../library/xml.etree.elementtree.rst:248
msgid ""
"We can remove elements using :meth:`Element.remove`.  Let's say we want to "
"remove all countries with a rank higher than 50::"
msgstr "可以使用 :meth:`Element.remove` 删除元素。假设我们要删除排名高于50的所有国家/地区::"

#: ../../library/xml.etree.elementtree.rst:259
msgid ""
"Note that concurrent modification while iterating can lead to problems, just"
" like when iterating and modifying Python lists or dicts. Therefore, the "
"example first collects all matching elements with ``root.findall()``, and "
"only then iterates over the list of matches."
msgstr ""
"请注意在迭代时进行并发修改可能会导致问题，就像在迭代并修改 Python 列表或字典时那样。 因此，这个示例先通过 ``root.findall()``"
" 收集了所有匹配的元素，在此之后再对匹配项列表进行迭代。"

#: ../../library/xml.etree.elementtree.rst:286
msgid "Building XML documents"
msgstr "构建XML文档"

#: ../../library/xml.etree.elementtree.rst:288
msgid ""
"The :func:`SubElement` function also provides a convenient way to create new"
" sub-elements for a given element::"
msgstr ":func:`SubElement` 函数还提供了一种便捷方法来为给定元素创建新的子元素::"

#: ../../library/xml.etree.elementtree.rst:299
msgid "Parsing XML with Namespaces"
msgstr "使用命名空间解析XML"

#: ../../library/xml.etree.elementtree.rst:301
msgid ""
"If the XML input has `namespaces "
"<https://en.wikipedia.org/wiki/XML_namespace>`__, tags and attributes with "
"prefixes in the form ``prefix:sometag`` get expanded to ``{uri}sometag`` "
"where the *prefix* is replaced by the full *URI*. Also, if there is a "
"`default namespace <https://www.w3.org/TR/xml-names/#defaulting>`__, that "
"full URI gets prepended to all of the non-prefixed tags."
msgstr ""
"如果 XML 输入带有 `命名空间 <https://en.wikipedia.org/wiki/XML_namespace>`__，则具有前缀的 "
"``prefix:sometag`` 形式的标记和属性将被扩展为 ``{uri}sometag``，其中 *prefix* 会被完整 *URI* "
"所替换。 并且，如果存在 `默认命名空间 <https://www.w3.org/TR/xml-names/#defaulting>`__，则完整 "
"URI 会被添加到所有未加前缀的标记之前。"

#: ../../library/xml.etree.elementtree.rst:309
msgid ""
"Here is an XML example that incorporates two namespaces, one with the prefix"
" \"fictional\" and the other serving as the default namespace:"
msgstr "下面的 XML 示例包含两个命名空间，一个具有前缀 \"fictional\" 而另一个则作为默认命名空间:"

#: ../../library/xml.etree.elementtree.rst:330
msgid ""
"One way to search and explore this XML example is to manually add the URI to"
" every tag or attribute in the xpath of a :meth:`~Element.find` or "
":meth:`~Element.findall`::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:341
msgid ""
"A better way to search the namespaced XML example is to create a dictionary "
"with your own prefixes and use those in the search functions::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:353
msgid "These two approaches both output::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:365
msgid "Additional resources"
msgstr "其他资源"

#: ../../library/xml.etree.elementtree.rst:367
msgid ""
"See http://effbot.org/zone/element-index.htm for tutorials and links to "
"other docs."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:374
msgid "XPath support"
msgstr "XPath支持"

#: ../../library/xml.etree.elementtree.rst:376
msgid ""
"This module provides limited support for `XPath expressions "
"<https://www.w3.org/TR/xpath>`_ for locating elements in a tree.  The goal "
"is to support a small subset of the abbreviated syntax; a full XPath engine "
"is outside the scope of the module."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:382
#: ../../library/xml.etree.elementtree.rst:744
msgid "Example"
msgstr "示例"

#: ../../library/xml.etree.elementtree.rst:384
msgid ""
"Here's an example that demonstrates some of the XPath capabilities of the "
"module.  We'll be using the ``countrydata`` XML document from the "
":ref:`Parsing XML <elementtree-parsing-xml>` section::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:408
msgid ""
"For XML with namespaces, use the usual qualified ``{namespace}tag`` "
"notation::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:415
msgid "Supported XPath syntax"
msgstr "支持的XPath语法"

#: ../../library/xml.etree.elementtree.rst:420
msgid "Syntax"
msgstr "语法"

#: ../../library/xml.etree.elementtree.rst:420
msgid "Meaning"
msgstr "含义"

#: ../../library/xml.etree.elementtree.rst:422
msgid "``tag``"
msgstr "``tag``"

#: ../../library/xml.etree.elementtree.rst:422
msgid ""
"Selects all child elements with the given tag. For example, ``spam`` selects"
" all child elements named ``spam``, and ``spam/egg`` selects all "
"grandchildren named ``egg`` in all children named ``spam``.  "
"``{namespace}*`` selects all tags in the given namespace, ``{*}spam`` "
"selects tags named ``spam`` in any (or no) namespace, and ``{}*`` only "
"selects tags that are not in a namespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:431
msgid "Support for star-wildcards was added."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:434
msgid "``*``"
msgstr "``*``"

#: ../../library/xml.etree.elementtree.rst:434
msgid ""
"Selects all child elements, including comments and processing instructions."
"  For example, ``*/egg`` selects all grandchildren named ``egg``."
msgstr "选择所有子元素，包括注释和处理说明。例如 ``*/egg`` 选择所有名为 ``egg`` 的孙元素。"

#: ../../library/xml.etree.elementtree.rst:438
msgid "``.``"
msgstr "``.``"

#: ../../library/xml.etree.elementtree.rst:438
msgid ""
"Selects the current node.  This is mostly useful at the beginning of the "
"path, to indicate that it's a relative path."
msgstr "选择当前节点。这在路径的开头非常有用，用于指示它是相对路径。"

#: ../../library/xml.etree.elementtree.rst:442
msgid "``//``"
msgstr "``//``"

#: ../../library/xml.etree.elementtree.rst:442
msgid ""
"Selects all subelements, on all levels beneath the current  element.  For "
"example, ``.//egg`` selects all ``egg`` elements in the entire tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:446
msgid "``..``"
msgstr "``..``"

#: ../../library/xml.etree.elementtree.rst:446
msgid ""
"Selects the parent element.  Returns ``None`` if the path attempts to reach "
"the ancestors of the start element (the element ``find`` was called on)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:450
msgid "``[@attrib]``"
msgstr "``[@attrib]``"

#: ../../library/xml.etree.elementtree.rst:450
msgid "Selects all elements that have the given attribute."
msgstr "选择具有给定属性的所有元素。"

#: ../../library/xml.etree.elementtree.rst:452
msgid "``[@attrib='value']``"
msgstr "``[@attrib='value']``"

#: ../../library/xml.etree.elementtree.rst:452
msgid ""
"Selects all elements for which the given attribute has the given value.  The"
" value cannot contain quotes."
msgstr "选择给定属性具有给定值的所有元素。该值不能包含引号。"

#: ../../library/xml.etree.elementtree.rst:456
msgid "``[tag]``"
msgstr "``[tag]``"

#: ../../library/xml.etree.elementtree.rst:456
msgid ""
"Selects all elements that have a child named ``tag``.  Only immediate "
"children are supported."
msgstr "选择所有包含 ``tag`` 子元素的元素。只支持直系子元素。"

#: ../../library/xml.etree.elementtree.rst:459
msgid "``[.='text']``"
msgstr "``[.='text']``"

#: ../../library/xml.etree.elementtree.rst:459
msgid ""
"Selects all elements whose complete text content, including descendants, "
"equals the given ``text``."
msgstr "选择完整文本内容等于 ``text`` 的所有元素（包括后代）。"

#: ../../library/xml.etree.elementtree.rst:464
msgid "``[tag='text']``"
msgstr "``[tag='text']``"

#: ../../library/xml.etree.elementtree.rst:464
msgid ""
"Selects all elements that have a child named ``tag`` whose complete text "
"content, including descendants, equals the given ``text``."
msgstr "选择所有包含名为 ``tag`` 的子元素的元素，这些子元素（包括后代）的完整文本内容等于给定的 ``text`` 。"

#: ../../library/xml.etree.elementtree.rst:468
msgid "``[position]``"
msgstr "``[position]``"

#: ../../library/xml.etree.elementtree.rst:468
msgid ""
"Selects all elements that are located at the given position.  The position "
"can be either an integer (1 is the first position), the expression "
"``last()`` (for the last position), or a position relative to the last "
"position (e.g. ``last()-1``)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:475
msgid ""
"Predicates (expressions within square brackets) must be preceded by a tag "
"name, an asterisk, or another predicate.  ``position`` predicates must be "
"preceded by a tag name."
msgstr "谓词（方括号内的表达式）之前必须带有标签名称，星号或其他谓词。``position`` 谓词前必须有标签名称。"

#: ../../library/xml.etree.elementtree.rst:480
#: ../../library/xml.etree.elementtree.rst:796
msgid "Reference"
msgstr "参考"

#: ../../library/xml.etree.elementtree.rst:485
#: ../../library/xml.etree.elementtree.rst:801
msgid "Functions"
msgstr "函数"

#: ../../library/xml.etree.elementtree.rst:489
msgid ""
"`C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ transformation function."
msgstr "`C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_  转换功能。."

#: ../../library/xml.etree.elementtree.rst:491
msgid ""
"Canonicalization is a way to normalise XML output in a way that allows byte-"
"by-byte comparisons and digital signatures.  It reduced the freedom that XML"
" serializers have and instead generates a more constrained XML "
"representation.  The main restrictions regard the placement of namespace "
"declarations, the ordering of attributes, and ignorable whitespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:497
msgid ""
"This function takes an XML data string (*xml_data*) or a file path or file-"
"like object (*from_file*) as input, converts it to the canonical form, and "
"writes it out using the *out* file(-like) object, if provided, or returns it"
" as a text string if not.  The output file receives text, not bytes.  It "
"should therefore be opened in text mode with ``utf-8`` encoding."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:504
msgid "Typical uses::"
msgstr "典型使用::"

#: ../../library/xml.etree.elementtree.rst:515
msgid "The configuration *options* are as follows:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:517
msgid "*with_comments*: set to true to include comments (default: false)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:518
msgid ""
"*strip_text*: set to true to strip whitespace before and after text content"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:519
#: ../../library/xml.etree.elementtree.rst:521
msgid "(default: false)"
msgstr "（默认值：否）"

#: ../../library/xml.etree.elementtree.rst:520
msgid ""
"*rewrite_prefixes*: set to true to replace namespace prefixes by "
"\"n{number}\""
msgstr ""

#: ../../library/xml.etree.elementtree.rst:522
msgid "*qname_aware_tags*: a set of qname aware tag names in which prefixes"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:523
#: ../../library/xml.etree.elementtree.rst:525
msgid "should be replaced in text content (default: empty)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:524
msgid ""
"*qname_aware_attrs*: a set of qname aware attribute names in which prefixes"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:526
msgid ""
"*exclude_attrs*: a set of attribute names that should not be serialised"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:527
msgid "*exclude_tags*: a set of tag names that should not be serialised"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:529
msgid ""
"In the option list above, \"a set\" refers to any collection or iterable of "
"strings, no ordering is expected."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:537
msgid ""
"Comment element factory.  This factory function creates a special element "
"that will be serialized as an XML comment by the standard serializer.  The "
"comment string can be either a bytestring or a Unicode string.  *text* is a "
"string containing the comment string.  Returns an element instance "
"representing a comment."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:543
msgid ""
"Note that :class:`XMLParser` skips over comments in the input instead of "
"creating comment objects for them. An :class:`ElementTree` will only contain"
" comment nodes if they have been inserted into to the tree using one of the "
":class:`Element` methods."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:550
msgid ""
"Writes an element tree or element structure to sys.stdout.  This function "
"should be used for debugging only."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:553
msgid ""
"The exact output format is implementation dependent.  In this version, it's "
"written as an ordinary XML file."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:556
msgid "*elem* is an element tree or an individual element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:558
msgid ""
"The :func:`dump` function now preserves the attribute order specified by the"
" user."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:565
msgid ""
"Parses an XML section from a string constant.  Same as :func:`XML`.  *text* "
"is a string containing XML data.  *parser* is an optional parser instance. "
"If not given, the standard :class:`XMLParser` parser is used. Returns an "
":class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:573
msgid ""
"Parses an XML document from a sequence of string fragments.  *sequence* is a"
" list or other sequence containing XML data fragments.  *parser* is an "
"optional parser instance.  If not given, the standard :class:`XMLParser` "
"parser is used.  Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:583
msgid ""
"Check if an object appears to be a valid element object.  *element* is an "
"element instance.  Return ``True`` if this is an element object."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:589
msgid ""
"Parses an XML section into an element tree incrementally, and reports what's"
" going on to the user.  *source* is a filename or :term:`file object` "
"containing XML data.  *events* is a sequence of events to report back.  The "
"supported events are the strings ``\"start\"``, ``\"end\"``, "
"``\"comment\"``, ``\"pi\"``, ``\"start-ns\"`` and ``\"end-ns\"`` (the \"ns\""
" events are used to get detailed namespace information).  If *events* is "
"omitted, only ``\"end\"`` events are reported. *parser* is an optional "
"parser instance.  If not given, the standard :class:`XMLParser` parser is "
"used.  *parser* must be a subclass of :class:`XMLParser` and can only use "
"the default :class:`TreeBuilder` as a target.  Returns an :term:`iterator` "
"providing ``(event, elem)`` pairs."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:601
msgid ""
"Note that while :func:`iterparse` builds the tree incrementally, it issues "
"blocking reads on *source* (or the file it names).  As such, it's unsuitable"
" for applications where blocking reads can't be made.  For fully non-"
"blocking parsing, see :class:`XMLPullParser`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:608
msgid ""
":func:`iterparse` only guarantees that it has seen the \">\" character of a "
"starting tag when it emits a \"start\" event, so the attributes are defined,"
" but the contents of the text and tail attributes are undefined at that "
"point.  The same applies to the element children; they may or may not be "
"present."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:614
#: ../../library/xml.etree.elementtree.rst:1451
msgid "If you need a fully populated element, look for \"end\" events instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:616
msgid "The *parser* argument."
msgstr "*parser* 参数。"

#: ../../library/xml.etree.elementtree.rst:619
#: ../../library/xml.etree.elementtree.rst:1455
msgid "The ``comment`` and ``pi`` events were added."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:625
msgid ""
"Parses an XML section into an element tree.  *source* is a filename or file "
"object containing XML data.  *parser* is an optional parser instance.  If "
"not given, the standard :class:`XMLParser` parser is used.  Returns an "
":class:`ElementTree` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:633
msgid ""
"PI element factory.  This factory function creates a special element that "
"will be serialized as an XML processing instruction.  *target* is a string "
"containing the PI target.  *text* is a string containing the PI contents, if"
" given.  Returns an element instance, representing a processing instruction."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:638
msgid ""
"Note that :class:`XMLParser` skips over processing instructions in the input"
" instead of creating comment objects for them. An :class:`ElementTree` will "
"only contain processing instruction nodes if they have been inserted into to"
" the tree using one of the :class:`Element` methods."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:646
msgid ""
"Registers a namespace prefix.  The registry is global, and any existing "
"mapping for either the given prefix or the namespace URI will be removed. "
"*prefix* is a namespace prefix.  *uri* is a namespace uri.  Tags and "
"attributes in this namespace will be serialized with the given prefix, if at"
" all possible."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:657
msgid ""
"Subelement factory.  This function creates an element instance, and appends "
"it to an existing element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:660
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *parent* is the parent element.  *tag* is "
"the subelement name.  *attrib* is an optional dictionary, containing element"
" attributes.  *extra* contains additional attributes, given as keyword "
"arguments.  Returns an element instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:671
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is"
" the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to"
" generate a Unicode string (otherwise, a bytestring is generated).  *method*"
" is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is "
"``\"xml\"``). *xml_declaration*, *default_namespace* and "
"*short_empty_elements* has the same meaning as in :meth:`ElementTree.write`."
" Returns an (optionally) encoded string containing the XML data."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:680
#: ../../library/xml.etree.elementtree.rst:707
#: ../../library/xml.etree.elementtree.rst:1163
msgid "The *short_empty_elements* parameter."
msgstr "*short_empty_elements* 形参。"

#: ../../library/xml.etree.elementtree.rst:683
#: ../../library/xml.etree.elementtree.rst:710
msgid "The *xml_declaration* and *default_namespace* parameters."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:686
msgid ""
"The :func:`tostring` function now preserves the attribute order specified by"
" the user."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:695
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is"
" the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to"
" generate a Unicode string (otherwise, a bytestring is generated).  *method*"
" is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is "
"``\"xml\"``). *xml_declaration*, *default_namespace* and "
"*short_empty_elements* has the same meaning as in :meth:`ElementTree.write`."
" Returns a list of (optionally) encoded strings containing the XML data. It "
"does not guarantee any specific sequence, except that "
"``b\"\".join(tostringlist(element)) == tostring(element)``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:713
msgid ""
"The :func:`tostringlist` function now preserves the attribute order "
"specified by the user."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:720
msgid ""
"Parses an XML section from a string constant.  This function can be used to "
"embed \"XML literals\" in Python code.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard "
":class:`XMLParser` parser is used.  Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:728
msgid ""
"Parses an XML section from a string constant, and also returns a dictionary "
"which maps from element id:s to elements.  *text* is a string containing XML"
" data.  *parser* is an optional parser instance.  If not given, the standard"
" :class:`XMLParser` parser is used.  Returns a tuple containing an "
":class:`Element` instance and a dictionary."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:738
msgid "XInclude support"
msgstr "XInclude 支持"

#: ../../library/xml.etree.elementtree.rst:740
msgid ""
"This module provides limited support for `XInclude directives "
"<https://www.w3.org/TR/xinclude/>`_, via the :mod:`xml.etree.ElementInclude`"
" helper module.  This module can be used to insert subtrees and text strings"
" into element trees, based on information in the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:746
msgid ""
"Here's an example that demonstrates use of the XInclude module. To include "
"an XML document in the current document, use the "
"``{http://www.w3.org/2001/XInclude}include`` element and set the **parse** "
"attribute to ``\"xml\"``, and use the **href** attribute to specify the "
"document to include."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:755
msgid ""
"By default, the **href** attribute is treated as a file name. You can use "
"custom loaders to override this behaviour. Also note that the standard "
"helper does not support XPointer syntax."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:757
msgid ""
"To process this file, load it as usual, and pass the root element to the "
":mod:`xml.etree.ElementTree` module:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:768
msgid ""
"The ElementInclude module replaces the "
"``{http://www.w3.org/2001/XInclude}include`` element with the root element "
"from the **source.xml** document. The result might look something like this:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:776
msgid ""
"If the **parse** attribute is omitted, it defaults to \"xml\". The href "
"attribute is required."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:778
msgid ""
"To include a text document, use the "
"``{http://www.w3.org/2001/XInclude}include`` element, and set the **parse** "
"attribute to \"text\":"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:787
msgid "The result might look something like:"
msgstr "结果可能如下所示："

#: ../../library/xml.etree.elementtree.rst:805
msgid ""
"Default loader. This default loader reads an included resource from disk.  "
"*href* is a URL. *parse* is for parse mode either \"xml\" or \"text\".  "
"*encoding* is an optional text encoding.  If not given, encoding is "
"``utf-8``.  Returns the expanded resource.  If the parse mode is "
"``\"xml\"``, this is an ElementTree instance.  If the parse mode is "
"\"text\", this is a Unicode string.  If the loader fails, it can return None"
" or raise an exception."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:815
msgid ""
"This function expands XInclude directives.  *elem* is the root element.  "
"*loader* is an optional resource loader.  If omitted, it defaults to "
":func:`default_loader`. If given, it should be a callable that implements "
"the same interface as :func:`default_loader`.  Returns the expanded "
"resource.  If the parse mode is ``\"xml\"``, this is an ElementTree "
"instance.  If the parse mode is \"text\", this is a Unicode string.  If the "
"loader fails, it can return None or raise an exception."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:827
msgid "Element Objects"
msgstr "元素对象"

#: ../../library/xml.etree.elementtree.rst:831
msgid ""
"Element class.  This class defines the Element interface, and provides a "
"reference implementation of this interface."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:834
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *tag* is the element name.  *attrib* is an "
"optional dictionary, containing element attributes.  *extra* contains "
"additional attributes, given as keyword arguments."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:842
msgid ""
"A string identifying what kind of data this element represents (the element "
"type, in other words)."
msgstr "一个标识此元素意味着何种数据的字符串(换句话说，元素类型)。"

#: ../../library/xml.etree.elementtree.rst:849
msgid ""
"These attributes can be used to hold additional data associated with the "
"element.  Their values are usually strings but may be any application-"
"specific object.  If the element is created from an XML file, the *text* "
"attribute holds either the text between the element's start tag and its "
"first child or end tag, or ``None``, and the *tail* attribute holds either "
"the text between the element's end tag and the next tag, or ``None``.  For "
"the XML data"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:861
msgid ""
"the *a* element has ``None`` for both *text* and *tail* attributes, the *b* "
"element has *text* ``\"1\"`` and *tail* ``\"4\"``, the *c* element has "
"*text* ``\"2\"`` and *tail* ``None``, and the *d* element has *text* "
"``None`` and *tail* ``\"3\"``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:866
msgid ""
"To collect the inner text of an element, see :meth:`itertext`, for example "
"``\"\".join(element.itertext())``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:869
msgid "Applications may store arbitrary objects in these attributes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:874
msgid ""
"A dictionary containing the element's attributes.  Note that while the "
"*attrib* value is always a real mutable Python dictionary, an ElementTree "
"implementation may choose to use another internal representation, and create"
" the dictionary only if someone asks for it.  To take advantage of such "
"implementations, use the dictionary methods below whenever possible."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:880
msgid "The following dictionary-like methods work on the element attributes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:885
msgid ""
"Resets an element.  This function removes all subelements, clears all "
"attributes, and sets the text and tail attributes to ``None``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:891
msgid "Gets the element attribute named *key*."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:893
msgid ""
"Returns the attribute value, or *default* if the attribute was not found."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:898
msgid ""
"Returns the element attributes as a sequence of (name, value) pairs.  The "
"attributes are returned in an arbitrary order."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:904
msgid ""
"Returns the elements attribute names as a list.  The names are returned in "
"an arbitrary order."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:910
msgid "Set the attribute *key* on the element to *value*."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:912
msgid "The following methods work on the element's children (subelements)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:917
msgid ""
"Adds the element *subelement* to the end of this element's internal list of "
"subelements.  Raises :exc:`TypeError` if *subelement* is not an "
":class:`Element`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:924
msgid ""
"Appends *subelements* from a sequence object with zero or more elements. "
"Raises :exc:`TypeError` if a subelement is not an :class:`Element`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:932
msgid ""
"Finds the first subelement matching *match*.  *match* may be a tag name or a"
" :ref:`path <elementtree-xpath>`.  Returns an element instance or ``None``."
"  *namespaces* is an optional mapping from namespace prefix to full name.  "
"Pass ``''`` as prefix to move all unprefixed tag names in the expression "
"into the given namespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:941
msgid ""
"Finds all matching subelements, by tag name or :ref:`path <elementtree-"
"xpath>`.  Returns a list containing all matching elements in document order."
"  *namespaces* is an optional mapping from namespace prefix to full name.  "
"Pass ``''`` as prefix to move all unprefixed tag names in the expression "
"into the given namespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:950
msgid ""
"Finds text for the first subelement matching *match*.  *match* may be a tag "
"name or a :ref:`path <elementtree-xpath>`.  Returns the text content of the "
"first matching element, or *default* if no element was found. Note that if "
"the matching element has no text content an empty string is returned. "
"*namespaces* is an optional mapping from namespace prefix to full name.  "
"Pass ``''`` as prefix to move all unprefixed tag names in the expression "
"into the given namespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:962
msgid "Use ``list(elem)`` or iteration."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:968
msgid "Use method :meth:`Element.iter` instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:973
msgid ""
"Inserts *subelement* at the given position in this element.  Raises "
":exc:`TypeError` if *subelement* is not an :class:`Element`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:979
msgid ""
"Creates a tree :term:`iterator` with the current element as the root. The "
"iterator iterates over this element and all elements below it, in document "
"(depth first) order.  If *tag* is not ``None`` or ``'*'``, only elements "
"whose tag equals *tag* are returned from the iterator.  If the tree "
"structure is modified during iteration, the result is undefined."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:990
msgid ""
"Finds all matching subelements, by tag name or :ref:`path <elementtree-"
"xpath>`.  Returns an iterable yielding all matching elements in document "
"order. *namespaces* is an optional mapping from namespace prefix to full "
"name."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1001
msgid ""
"Creates a text iterator.  The iterator loops over this element and all "
"subelements, in document order, and returns all inner text."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1009
msgid ""
"Creates a new element object of the same type as this element.  Do not call "
"this method, use the :func:`SubElement` factory function instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1015
msgid ""
"Removes *subelement* from the element.  Unlike the find\\* methods this "
"method compares elements based on the instance identity, not on tag value or"
" contents."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1019
msgid ""
":class:`Element` objects also support the following sequence type methods "
"for working with subelements: :meth:`~object.__delitem__`, "
":meth:`~object.__getitem__`, :meth:`~object.__setitem__`, "
":meth:`~object.__len__`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1024
msgid ""
"Caution: Elements with no subelements will test as ``False``.  This behavior"
" will change in future versions.  Use specific ``len(elem)`` or ``elem is "
"None`` test instead. ::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1036
msgid ""
"Prior to Python 3.8, the serialisation order of the XML attributes of "
"elements was artificially made predictable by sorting the attributes by "
"their name. Based on the now guaranteed ordering of dicts, this arbitrary "
"reordering was removed in Python 3.8 to preserve the order in which "
"attributes were originally parsed or created by user code."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1042
msgid ""
"In general, user code should try not to depend on a specific ordering of "
"attributes, given that the `XML Information Set <https://www.w3.org/TR/xml-"
"infoset/>`_ explicitly excludes the attribute order from conveying "
"information. Code should be prepared to deal with any ordering on input. In "
"cases where deterministic XML output is required, e.g. for cryptographic "
"signing or test data sets, canonical serialisation is available with the "
":func:`canonicalize` function."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1050
msgid ""
"In cases where canonical output is not applicable but a specific attribute "
"order is still desirable on output, code should aim for creating the "
"attributes directly in the desired order, to avoid perceptual mismatches for"
" readers of the code. In cases where this is difficult to achieve, a recipe "
"like the following can be applied prior to serialisation to enforce an order"
" independently from the Element creation::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1070
msgid "ElementTree Objects"
msgstr "ElementTree 对象"

#: ../../library/xml.etree.elementtree.rst:1075
msgid ""
"ElementTree wrapper class.  This class represents an entire element "
"hierarchy, and adds some extra support for serialization to and from "
"standard XML."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1079
msgid ""
"*element* is the root element.  The tree is initialized with the contents of"
" the XML *file* if given."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1085
msgid ""
"Replaces the root element for this tree.  This discards the current contents"
" of the tree, and replaces it with the given element.  Use with care.  "
"*element* is an element instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1092
msgid "Same as :meth:`Element.find`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1097
msgid "Same as :meth:`Element.findall`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1102
msgid "Same as :meth:`Element.findtext`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1108
msgid "Use method :meth:`ElementTree.iter` instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1113
msgid "Returns the root element for this tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1118
msgid ""
"Creates and returns a tree iterator for the root element.  The iterator "
"loops over all elements in this tree, in section order.  *tag* is the tag to"
" look for (default is to return all elements)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1125
msgid "Same as :meth:`Element.iterfind`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1132
msgid ""
"Loads an external XML section into this element tree.  *source* is a file "
"name or :term:`file object`.  *parser* is an optional parser instance. If "
"not given, the standard :class:`XMLParser` parser is used.  Returns the "
"section root element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1142
msgid ""
"Writes the element tree to a file, as XML.  *file* is a file name, or a "
":term:`file object` opened for writing.  *encoding* [1]_ is the output "
"encoding (default is US-ASCII). *xml_declaration* controls if an XML "
"declaration should be added to the file.  Use ``False`` for never, ``True`` "
"for always, ``None`` for only if not US-ASCII or UTF-8 or Unicode (default "
"is ``None``). *default_namespace* sets the default XML namespace (for "
"\"xmlns\"). *method* is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` "
"(default is ``\"xml\"``). The keyword-only *short_empty_elements* parameter "
"controls the formatting of elements that contain no content.  If ``True`` "
"(the default), they are emitted as a single self-closed tag, otherwise they "
"are emitted as a pair of start/end tags."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1156
msgid ""
"The output is either a string (:class:`str`) or binary (:class:`bytes`). "
"This is controlled by the *encoding* argument.  If *encoding* is "
"``\"unicode\"``, the output is a string; otherwise, it's binary.  Note that "
"this may conflict with the type of *file* if it's an open :term:`file "
"object`; make sure you do not try to write a string to a binary stream and "
"vice versa."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1166
msgid ""
"The :meth:`write` method now preserves the attribute order specified by the "
"user."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1171
msgid "This is the XML file that is going to be manipulated::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1183
msgid ""
"Example of changing the attribute \"target\" of every link in first "
"paragraph::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1202
msgid "QName Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1207
msgid ""
"QName wrapper.  This can be used to wrap a QName attribute value, in order "
"to get proper namespace handling on output.  *text_or_uri* is a string "
"containing the QName value, in the form {uri}local, or, if the tag argument "
"is given, the URI part of a QName.  If *tag* is given, the first argument is"
" interpreted as a URI, and this argument is interpreted as a local name. "
":class:`QName` instances are opaque."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1219
msgid "TreeBuilder Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1225
msgid ""
"Generic element structure builder.  This builder converts a sequence of "
"start, data, end, comment and pi method calls to a well-formed element "
"structure.  You can use this class to build an element structure using a "
"custom XML parser, or a parser for some other XML-like format."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1230
msgid ""
"*element_factory*, when given, must be a callable accepting two positional "
"arguments: a tag and a dict of attributes.  It is expected to return a new "
"element instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1234
msgid ""
"The *comment_factory* and *pi_factory* functions, when given, should behave "
"like the :func:`Comment` and :func:`ProcessingInstruction` functions to "
"create comments and processing instructions.  When not given, the default "
"factories will be used.  When *insert_comments* and/or *insert_pis* is true,"
" comments/pis will be inserted into the tree if they appear within the root "
"element (but not outside of it)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1243
msgid ""
"Flushes the builder buffers, and returns the toplevel document element.  "
"Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1249
msgid ""
"Adds text to the current element.  *data* is a string.  This should be "
"either a bytestring, or a Unicode string."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1255
msgid ""
"Closes the current element.  *tag* is the element name.  Returns the closed "
"element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1261
msgid ""
"Opens a new element.  *tag* is the element name.  *attrs* is a dictionary "
"containing element attributes.  Returns the opened element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1267
msgid ""
"Creates a comment with the given *text*.  If ``insert_comments`` is true, "
"this will also add it to the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1275
msgid ""
"Creates a comment with the given *target* name and *text*.  If "
"``insert_pis`` is true, this will also add it to the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1281
msgid ""
"In addition, a custom :class:`TreeBuilder` object can provide the following "
"methods:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1286
msgid ""
"Handles a doctype declaration.  *name* is the doctype name.  *pubid* is the "
"public identifier.  *system* is the system identifier.  This method does not"
" exist on the default :class:`TreeBuilder` class."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1294
msgid ""
"Is called whenever the parser encounters a new namespace declaration, before"
" the ``start()`` callback for the opening element that defines it. *prefix* "
"is ``''`` for the default namespace and the declared namespace prefix name "
"otherwise.  *uri* is the namespace URI."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1303
msgid ""
"Is called after the ``end()`` callback of an element that declared a "
"namespace prefix mapping, with the name of the *prefix* that went out of "
"scope."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1315
msgid ""
"A `C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ writer.  Arguments are the "
"same as for the :func:`canonicalize` function.  This class does not build a "
"tree but translates the callback events directly into a serialised form "
"using the *write* function."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1326
msgid "XMLParser Objects"
msgstr "XMLParser对象"

#: ../../library/xml.etree.elementtree.rst:1331
msgid ""
"This class is the low-level building block of the module.  It uses "
":mod:`xml.parsers.expat` for efficient, event-based parsing of XML.  It can "
"be fed XML data incrementally with the :meth:`feed` method, and parsing "
"events are translated to a push API - by invoking callbacks on the *target* "
"object.  If *target* is omitted, the standard :class:`TreeBuilder` is used. "
"If *encoding* [1]_ is given, the value overrides the encoding specified in "
"the XML file."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1339
msgid ""
"Parameters are now :ref:`keyword-only <keyword-only_parameter>`. The *html* "
"argument no longer supported."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1346
msgid ""
"Finishes feeding data to the parser.  Returns the result of calling the "
"``close()`` method of the *target* passed during construction; by default, "
"this is the toplevel document element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1353
msgid "Feeds data to the parser.  *data* is encoded data."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1355
msgid ""
":meth:`XMLParser.feed` calls *target*\\'s ``start(tag, attrs_dict)`` method "
"for each opening tag, its ``end(tag)`` method for each closing tag, and data"
" is processed by method ``data(data)``.  For further supported callback "
"methods, see the :class:`TreeBuilder` class.  :meth:`XMLParser.close` calls "
"*target*\\'s method ``close()``. :class:`XMLParser` can be used not only for"
" building a tree structure. This is an example of counting the maximum depth"
" of an XML file::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1399
msgid "XMLPullParser Objects"
msgstr "XMLPullParser对象"

#: ../../library/xml.etree.elementtree.rst:1403
msgid ""
"A pull parser suitable for non-blocking applications.  Its input-side API is"
" similar to that of :class:`XMLParser`, but instead of pushing calls to a "
"callback target, :class:`XMLPullParser` collects an internal list of parsing"
" events and lets the user read from it. *events* is a sequence of events to "
"report back.  The supported events are the strings ``\"start\"``, "
"``\"end\"``, ``\"comment\"``, ``\"pi\"``, ``\"start-ns\"`` and ``\"end-"
"ns\"`` (the \"ns\" events are used to get detailed namespace information).  "
"If *events* is omitted, only ``\"end\"`` events are reported."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1414
msgid "Feed the given bytes data to the parser."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1418
msgid ""
"Signal the parser that the data stream is terminated. Unlike "
":meth:`XMLParser.close`, this method always returns :const:`None`. Any "
"events not yet retrieved when the parser is closed can still be read with "
":meth:`read_events`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1425
msgid ""
"Return an iterator over the events which have been encountered in the data "
"fed to the parser.  The iterator yields ``(event, elem)`` pairs, where "
"*event* is a string representing the type of event (e.g. ``\"end\"``) and "
"*elem* is the encountered :class:`Element` object, or other context value as"
" follows."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1431
msgid "``start``, ``end``: the current Element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1432
msgid "``comment``, ``pi``: the current comment / processing instruction"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1433
msgid ""
"``start-ns``: a tuple ``(prefix, uri)`` naming the declared namespace "
"mapping."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1435
msgid "``end-ns``: :const:`None` (this may change in a future version)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1437
msgid ""
"Events provided in a previous call to :meth:`read_events` will not be "
"yielded again.  Events are consumed from the internal queue only when they "
"are retrieved from the iterator, so multiple readers iterating in parallel "
"over iterators obtained from :meth:`read_events` will have unpredictable "
"results."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1445
msgid ""
":class:`XMLPullParser` only guarantees that it has seen the \">\" character "
"of a starting tag when it emits a \"start\" event, so the attributes are "
"defined, but the contents of the text and tail attributes are undefined at "
"that point.  The same applies to the element children; they may or may not "
"be present."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1460
msgid "Exceptions"
msgstr "异常"

#: ../../library/xml.etree.elementtree.rst:1464
msgid ""
"XML parse error, raised by the various parsing methods in this module when "
"parsing fails.  The string representation of an instance of this exception "
"will contain a user-friendly error message.  In addition, it will have the "
"following attributes available:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1471
msgid ""
"A numeric error code from the expat parser. See the documentation of "
":mod:`xml.parsers.expat` for the list of error codes and their meanings."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1476
msgid ""
"A tuple of *line*, *column* numbers, specifying where the error occurred."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1479
msgid "Footnotes"
msgstr "备注"

#: ../../library/xml.etree.elementtree.rst:1480
msgid ""
"The encoding string included in XML output should conform to the appropriate"
" standards.  For example, \"UTF-8\" is valid, but \"UTF8\" is not.  See "
"https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and "
"https://www.iana.org/assignments/character-sets/character-sets.xhtml."
msgstr ""
